// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Character.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Character.proto</summary>
  public static partial class CharacterReflection {

    #region Descriptor
    /// <summary>File descriptor for Character.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CharacterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9DaGFyYWN0ZXIucHJvdG8igAwKCUNoYXJhY3RlchIKCgJpZBgBIAEoBRIM",
            "CgRuYW1lGAIgASgJEg8KB3Zpc2libGUYAyABKAgSEQoJYXZhaWxhYmxlGAQg",
            "ASgIEg0KBWdyYWRlGAUgASgFEhcKD2RlZmF1bHRfc2tpbl9pZBgGIAEoBRIX",
            "Cg9hZHZhbmNlX3NraW5faWQYByABKAUSFQoNYWR2YW5jZV9ncm91cBgIIAEo",
            "BRIhChlhZHZhbmNlX3NraW5fdW5sb2NrX2xldmVsGAkgASgFEg8KB2ZhY3Rp",
            "b24YCiABKAUSDgoGd2VpZ2h0GAsgASgFEg0KBWVfZV90GAwgASgFEg0KBWNs",
            "YXNzGA0gASgFEh0KFWNoYXJhY3Rlcl9hdHRhY2tfdHlwZRgOIAEoBRIaChJz",
            "ZWFyY2hfdGFyZ2V0X3R5cGUYDyABKAUSDwoHYXRrX3NwZBgQIAEoBRIQCght",
            "b3ZfdHlwZRgRIAEoBRIQCgh3YWxrX3NwZBgSIAEoBRIPCgdydW5fc3BkGBMg",
            "ASgFEhIKCnNwX3J1bl9zcGQYFCABKAUSEQoJdHJhbnNfc3BkGBUgASgFEhwK",
            "FHdhbGtfdG9fcnVuX2R1cmF0aW9uGBYgASgFEigKIGRvZGdlX3RvX3J1bl9h",
            "Y2NlbGVyYXRpb25fb3Jfbm90GBcgASgIEg8KB21vdl9hY2MYGCABKAUSDwoH",
            "cm90X3NwZBgZIAEoBRIPCgdyb3RfYWNjGBogASgFEhIKCnZpc2lvbl9kZWcY",
            "GyABKAUSEgoKdmlzaW9uX3JuZxgcIAEoBRIZChF2aXNpb25fYXR0YWNrX3Ju",
            "ZxgdIAEoBRIQCghoZWFyX3JuZxgeIAEoBRIXCg9oZWFyX2F0dGFja19ybmcY",
            "HyABKAUSFQoNcmFpc2VfZ3VuX3JuZxggIAEoBRITCgtidWxsZXRfdHlwZRgh",
            "IAEoBRIMCgRhbW1vGCIgASgFEg4KBmFfaV9pZBgjIAEoBRIVCg1ub3JtYWxf",
            "YXRrX2lkGCQgASgFEhAKCGRvZGdlX2lkGCUgASgFEhAKCHNraWxsX2lkGCYg",
            "ASgFEhgKEHNwZWNpYWxfc2tpbGxfaWQYJyABKAUSEwoLdWx0aW1hdGVfaWQY",
            "KCABKAUSFQoNYXNzaXN0X2FfaV9pZBgpIAEoBRIcChRhc3Npc3Rfbm9ybWFs",
            "X2F0a19pZBgqIAEoBRIXCg9hc3Npc3RfZG9kZ2VfaWQYKyABKAUSFwoPYXNz",
            "aXN0X3NraWxsX2lkGCwgASgFEh8KF2Fzc2lzdF9zcGVjaWFsX3NraWxsX2lk",
            "GC0gASgFEhoKEmFzc2lzdF91bHRpbWF0ZV9pZBguIAEoBRIXCg90YWxlbnRf",
            "c2tpbGxfaWQYLyABKAUSIgoaYXNzaXN0X3NraWxsX29uX3N0YWdlX3R5cGUY",
            "MCABKAUSGgoSYXNzaXN0X3NraWxsX2FuZ2xlGDEgASgFEhsKE2Fzc2lzdF9z",
            "a2lsbF9yYWRpdXMYMiABKAUSKQohYXNzaXN0X3NraWxsX29uX3N0YWdlX29y",
            "aWVudGF0aW9uGDMgASgFEiUKHWFzc2lzdF91bHRpbWF0ZV9vbl9zdGFnZV90",
            "eXBlGDQgASgFEh0KFWFzc2lzdF91bHRpbWF0ZV9hbmdsZRg1IAEoBRIeChZh",
            "c3Npc3RfdWx0aW1hdGVfcmFkaXVzGDYgASgFEiwKJGFzc2lzdF91bHRpbWF0",
            "ZV9vbl9zdGFnZV9vcmllbnRhdGlvbhg3IAEoBRISCgpzd2l0Y2hfY19kGDgg",
            "ASgFEhkKEWVuZXJneV9jb252X3JhdGlvGDkgASgFEhkKEWVuZXJneV9lZmZp",
            "Y2llbmN5GDogASgFEhQKDGZyYWdtZW50c19pZBg7IAEoBRIVCg10cmFuc2Zv",
            "cm1fcXR5GDwgASgFEhcKD3JlY3J1aXRtZW50X3F0eRg9IAEoBRIUCgxhdHRy",
            "aWJ1dGVfaWQYPiABKAkSGQoRcHJlc2VudHNfdHJhaXRfaWQYPyABKAUSHAoU",
            "c2tpbGxzX3VwZ3JhZGVfZ3JvdXAYQCADKAVCDqoCC05vdmEuQ2xpZW50YgZw",
            "cm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Character), global::Nova.Client.Character.Parser, new[]{ "Id", "Name", "Visible", "Available", "Grade", "DefaultSkinId", "AdvanceSkinId", "AdvanceGroup", "AdvanceSkinUnlockLevel", "Faction", "Weight", "EET", "Class", "CharacterAttackType", "SearchTargetType", "AtkSpd", "MovType", "WalkSpd", "RunSpd", "SpRunSpd", "TransSpd", "WalkToRunDuration", "DodgeToRunAccelerationOrNot", "MovAcc", "RotSpd", "RotAcc", "VisionDeg", "VisionRng", "VisionAttackRng", "HearRng", "HearAttackRng", "RaiseGunRng", "BulletType", "Ammo", "AIId", "NormalAtkId", "DodgeId", "SkillId", "SpecialSkillId", "UltimateId", "AssistAIId", "AssistNormalAtkId", "AssistDodgeId", "AssistSkillId", "AssistSpecialSkillId", "AssistUltimateId", "TalentSkillId", "AssistSkillOnStageType", "AssistSkillAngle", "AssistSkillRadius", "AssistSkillOnStageOrientation", "AssistUltimateOnStageType", "AssistUltimateAngle", "AssistUltimateRadius", "AssistUltimateOnStageOrientation", "SwitchCD", "EnergyConvRatio", "EnergyEfficiency", "FragmentsId", "TransformQty", "RecruitmentQty", "AttributeId", "PresentsTraitId", "SkillsUpgradeGroup" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Character : pb::IMessage<Character>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Character> _parser = new pb::MessageParser<Character>(() => new Character());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Character> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.CharacterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Character() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Character(Character other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      visible_ = other.visible_;
      available_ = other.available_;
      grade_ = other.grade_;
      defaultSkinId_ = other.defaultSkinId_;
      advanceSkinId_ = other.advanceSkinId_;
      advanceGroup_ = other.advanceGroup_;
      advanceSkinUnlockLevel_ = other.advanceSkinUnlockLevel_;
      faction_ = other.faction_;
      weight_ = other.weight_;
      eET_ = other.eET_;
      class_ = other.class_;
      characterAttackType_ = other.characterAttackType_;
      searchTargetType_ = other.searchTargetType_;
      atkSpd_ = other.atkSpd_;
      movType_ = other.movType_;
      walkSpd_ = other.walkSpd_;
      runSpd_ = other.runSpd_;
      spRunSpd_ = other.spRunSpd_;
      transSpd_ = other.transSpd_;
      walkToRunDuration_ = other.walkToRunDuration_;
      dodgeToRunAccelerationOrNot_ = other.dodgeToRunAccelerationOrNot_;
      movAcc_ = other.movAcc_;
      rotSpd_ = other.rotSpd_;
      rotAcc_ = other.rotAcc_;
      visionDeg_ = other.visionDeg_;
      visionRng_ = other.visionRng_;
      visionAttackRng_ = other.visionAttackRng_;
      hearRng_ = other.hearRng_;
      hearAttackRng_ = other.hearAttackRng_;
      raiseGunRng_ = other.raiseGunRng_;
      bulletType_ = other.bulletType_;
      ammo_ = other.ammo_;
      aIId_ = other.aIId_;
      normalAtkId_ = other.normalAtkId_;
      dodgeId_ = other.dodgeId_;
      skillId_ = other.skillId_;
      specialSkillId_ = other.specialSkillId_;
      ultimateId_ = other.ultimateId_;
      assistAIId_ = other.assistAIId_;
      assistNormalAtkId_ = other.assistNormalAtkId_;
      assistDodgeId_ = other.assistDodgeId_;
      assistSkillId_ = other.assistSkillId_;
      assistSpecialSkillId_ = other.assistSpecialSkillId_;
      assistUltimateId_ = other.assistUltimateId_;
      talentSkillId_ = other.talentSkillId_;
      assistSkillOnStageType_ = other.assistSkillOnStageType_;
      assistSkillAngle_ = other.assistSkillAngle_;
      assistSkillRadius_ = other.assistSkillRadius_;
      assistSkillOnStageOrientation_ = other.assistSkillOnStageOrientation_;
      assistUltimateOnStageType_ = other.assistUltimateOnStageType_;
      assistUltimateAngle_ = other.assistUltimateAngle_;
      assistUltimateRadius_ = other.assistUltimateRadius_;
      assistUltimateOnStageOrientation_ = other.assistUltimateOnStageOrientation_;
      switchCD_ = other.switchCD_;
      energyConvRatio_ = other.energyConvRatio_;
      energyEfficiency_ = other.energyEfficiency_;
      fragmentsId_ = other.fragmentsId_;
      transformQty_ = other.transformQty_;
      recruitmentQty_ = other.recruitmentQty_;
      attributeId_ = other.attributeId_;
      presentsTraitId_ = other.presentsTraitId_;
      skillsUpgradeGroup_ = other.skillsUpgradeGroup_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Character Clone() {
      return new Character(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "visible" field.</summary>
    public const int VisibleFieldNumber = 3;
    private bool visible_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Visible {
      get { return visible_; }
      set {
        visible_ = value;
      }
    }

    /// <summary>Field number for the "available" field.</summary>
    public const int AvailableFieldNumber = 4;
    private bool available_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Available {
      get { return available_; }
      set {
        available_ = value;
      }
    }

    /// <summary>Field number for the "grade" field.</summary>
    public const int GradeFieldNumber = 5;
    private int grade_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Grade {
      get { return grade_; }
      set {
        grade_ = value;
      }
    }

    /// <summary>Field number for the "default_skin_id" field.</summary>
    public const int DefaultSkinIdFieldNumber = 6;
    private int defaultSkinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefaultSkinId {
      get { return defaultSkinId_; }
      set {
        defaultSkinId_ = value;
      }
    }

    /// <summary>Field number for the "advance_skin_id" field.</summary>
    public const int AdvanceSkinIdFieldNumber = 7;
    private int advanceSkinId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdvanceSkinId {
      get { return advanceSkinId_; }
      set {
        advanceSkinId_ = value;
      }
    }

    /// <summary>Field number for the "advance_group" field.</summary>
    public const int AdvanceGroupFieldNumber = 8;
    private int advanceGroup_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdvanceGroup {
      get { return advanceGroup_; }
      set {
        advanceGroup_ = value;
      }
    }

    /// <summary>Field number for the "advance_skin_unlock_level" field.</summary>
    public const int AdvanceSkinUnlockLevelFieldNumber = 9;
    private int advanceSkinUnlockLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdvanceSkinUnlockLevel {
      get { return advanceSkinUnlockLevel_; }
      set {
        advanceSkinUnlockLevel_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 10;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 11;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "e_e_t" field.</summary>
    public const int EETFieldNumber = 12;
    private int eET_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EET {
      get { return eET_; }
      set {
        eET_ = value;
      }
    }

    /// <summary>Field number for the "class" field.</summary>
    public const int ClassFieldNumber = 13;
    private int class_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Class {
      get { return class_; }
      set {
        class_ = value;
      }
    }

    /// <summary>Field number for the "character_attack_type" field.</summary>
    public const int CharacterAttackTypeFieldNumber = 14;
    private int characterAttackType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharacterAttackType {
      get { return characterAttackType_; }
      set {
        characterAttackType_ = value;
      }
    }

    /// <summary>Field number for the "search_target_type" field.</summary>
    public const int SearchTargetTypeFieldNumber = 15;
    private int searchTargetType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SearchTargetType {
      get { return searchTargetType_; }
      set {
        searchTargetType_ = value;
      }
    }

    /// <summary>Field number for the "atk_spd" field.</summary>
    public const int AtkSpdFieldNumber = 16;
    private int atkSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AtkSpd {
      get { return atkSpd_; }
      set {
        atkSpd_ = value;
      }
    }

    /// <summary>Field number for the "mov_type" field.</summary>
    public const int MovTypeFieldNumber = 17;
    private int movType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovType {
      get { return movType_; }
      set {
        movType_ = value;
      }
    }

    /// <summary>Field number for the "walk_spd" field.</summary>
    public const int WalkSpdFieldNumber = 18;
    private int walkSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WalkSpd {
      get { return walkSpd_; }
      set {
        walkSpd_ = value;
      }
    }

    /// <summary>Field number for the "run_spd" field.</summary>
    public const int RunSpdFieldNumber = 19;
    private int runSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RunSpd {
      get { return runSpd_; }
      set {
        runSpd_ = value;
      }
    }

    /// <summary>Field number for the "sp_run_spd" field.</summary>
    public const int SpRunSpdFieldNumber = 20;
    private int spRunSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpRunSpd {
      get { return spRunSpd_; }
      set {
        spRunSpd_ = value;
      }
    }

    /// <summary>Field number for the "trans_spd" field.</summary>
    public const int TransSpdFieldNumber = 21;
    private int transSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TransSpd {
      get { return transSpd_; }
      set {
        transSpd_ = value;
      }
    }

    /// <summary>Field number for the "walk_to_run_duration" field.</summary>
    public const int WalkToRunDurationFieldNumber = 22;
    private int walkToRunDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WalkToRunDuration {
      get { return walkToRunDuration_; }
      set {
        walkToRunDuration_ = value;
      }
    }

    /// <summary>Field number for the "dodge_to_run_acceleration_or_not" field.</summary>
    public const int DodgeToRunAccelerationOrNotFieldNumber = 23;
    private bool dodgeToRunAccelerationOrNot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool DodgeToRunAccelerationOrNot {
      get { return dodgeToRunAccelerationOrNot_; }
      set {
        dodgeToRunAccelerationOrNot_ = value;
      }
    }

    /// <summary>Field number for the "mov_acc" field.</summary>
    public const int MovAccFieldNumber = 24;
    private int movAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovAcc {
      get { return movAcc_; }
      set {
        movAcc_ = value;
      }
    }

    /// <summary>Field number for the "rot_spd" field.</summary>
    public const int RotSpdFieldNumber = 25;
    private int rotSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotSpd {
      get { return rotSpd_; }
      set {
        rotSpd_ = value;
      }
    }

    /// <summary>Field number for the "rot_acc" field.</summary>
    public const int RotAccFieldNumber = 26;
    private int rotAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotAcc {
      get { return rotAcc_; }
      set {
        rotAcc_ = value;
      }
    }

    /// <summary>Field number for the "vision_deg" field.</summary>
    public const int VisionDegFieldNumber = 27;
    private int visionDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionDeg {
      get { return visionDeg_; }
      set {
        visionDeg_ = value;
      }
    }

    /// <summary>Field number for the "vision_rng" field.</summary>
    public const int VisionRngFieldNumber = 28;
    private int visionRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionRng {
      get { return visionRng_; }
      set {
        visionRng_ = value;
      }
    }

    /// <summary>Field number for the "vision_attack_rng" field.</summary>
    public const int VisionAttackRngFieldNumber = 29;
    private int visionAttackRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionAttackRng {
      get { return visionAttackRng_; }
      set {
        visionAttackRng_ = value;
      }
    }

    /// <summary>Field number for the "hear_rng" field.</summary>
    public const int HearRngFieldNumber = 30;
    private int hearRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HearRng {
      get { return hearRng_; }
      set {
        hearRng_ = value;
      }
    }

    /// <summary>Field number for the "hear_attack_rng" field.</summary>
    public const int HearAttackRngFieldNumber = 31;
    private int hearAttackRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HearAttackRng {
      get { return hearAttackRng_; }
      set {
        hearAttackRng_ = value;
      }
    }

    /// <summary>Field number for the "raise_gun_rng" field.</summary>
    public const int RaiseGunRngFieldNumber = 32;
    private int raiseGunRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RaiseGunRng {
      get { return raiseGunRng_; }
      set {
        raiseGunRng_ = value;
      }
    }

    /// <summary>Field number for the "bullet_type" field.</summary>
    public const int BulletTypeFieldNumber = 33;
    private int bulletType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BulletType {
      get { return bulletType_; }
      set {
        bulletType_ = value;
      }
    }

    /// <summary>Field number for the "ammo" field.</summary>
    public const int AmmoFieldNumber = 34;
    private int ammo_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Ammo {
      get { return ammo_; }
      set {
        ammo_ = value;
      }
    }

    /// <summary>Field number for the "a_i_id" field.</summary>
    public const int AIIdFieldNumber = 35;
    private int aIId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AIId {
      get { return aIId_; }
      set {
        aIId_ = value;
      }
    }

    /// <summary>Field number for the "normal_atk_id" field.</summary>
    public const int NormalAtkIdFieldNumber = 36;
    private int normalAtkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalAtkId {
      get { return normalAtkId_; }
      set {
        normalAtkId_ = value;
      }
    }

    /// <summary>Field number for the "dodge_id" field.</summary>
    public const int DodgeIdFieldNumber = 37;
    private int dodgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DodgeId {
      get { return dodgeId_; }
      set {
        dodgeId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 38;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "special_skill_id" field.</summary>
    public const int SpecialSkillIdFieldNumber = 39;
    private int specialSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SpecialSkillId {
      get { return specialSkillId_; }
      set {
        specialSkillId_ = value;
      }
    }

    /// <summary>Field number for the "ultimate_id" field.</summary>
    public const int UltimateIdFieldNumber = 40;
    private int ultimateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UltimateId {
      get { return ultimateId_; }
      set {
        ultimateId_ = value;
      }
    }

    /// <summary>Field number for the "assist_a_i_id" field.</summary>
    public const int AssistAIIdFieldNumber = 41;
    private int assistAIId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistAIId {
      get { return assistAIId_; }
      set {
        assistAIId_ = value;
      }
    }

    /// <summary>Field number for the "assist_normal_atk_id" field.</summary>
    public const int AssistNormalAtkIdFieldNumber = 42;
    private int assistNormalAtkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistNormalAtkId {
      get { return assistNormalAtkId_; }
      set {
        assistNormalAtkId_ = value;
      }
    }

    /// <summary>Field number for the "assist_dodge_id" field.</summary>
    public const int AssistDodgeIdFieldNumber = 43;
    private int assistDodgeId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistDodgeId {
      get { return assistDodgeId_; }
      set {
        assistDodgeId_ = value;
      }
    }

    /// <summary>Field number for the "assist_skill_id" field.</summary>
    public const int AssistSkillIdFieldNumber = 44;
    private int assistSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSkillId {
      get { return assistSkillId_; }
      set {
        assistSkillId_ = value;
      }
    }

    /// <summary>Field number for the "assist_special_skill_id" field.</summary>
    public const int AssistSpecialSkillIdFieldNumber = 45;
    private int assistSpecialSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSpecialSkillId {
      get { return assistSpecialSkillId_; }
      set {
        assistSpecialSkillId_ = value;
      }
    }

    /// <summary>Field number for the "assist_ultimate_id" field.</summary>
    public const int AssistUltimateIdFieldNumber = 46;
    private int assistUltimateId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistUltimateId {
      get { return assistUltimateId_; }
      set {
        assistUltimateId_ = value;
      }
    }

    /// <summary>Field number for the "talent_skill_id" field.</summary>
    public const int TalentSkillIdFieldNumber = 47;
    private int talentSkillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TalentSkillId {
      get { return talentSkillId_; }
      set {
        talentSkillId_ = value;
      }
    }

    /// <summary>Field number for the "assist_skill_on_stage_type" field.</summary>
    public const int AssistSkillOnStageTypeFieldNumber = 48;
    private int assistSkillOnStageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSkillOnStageType {
      get { return assistSkillOnStageType_; }
      set {
        assistSkillOnStageType_ = value;
      }
    }

    /// <summary>Field number for the "assist_skill_angle" field.</summary>
    public const int AssistSkillAngleFieldNumber = 49;
    private int assistSkillAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSkillAngle {
      get { return assistSkillAngle_; }
      set {
        assistSkillAngle_ = value;
      }
    }

    /// <summary>Field number for the "assist_skill_radius" field.</summary>
    public const int AssistSkillRadiusFieldNumber = 50;
    private int assistSkillRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSkillRadius {
      get { return assistSkillRadius_; }
      set {
        assistSkillRadius_ = value;
      }
    }

    /// <summary>Field number for the "assist_skill_on_stage_orientation" field.</summary>
    public const int AssistSkillOnStageOrientationFieldNumber = 51;
    private int assistSkillOnStageOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistSkillOnStageOrientation {
      get { return assistSkillOnStageOrientation_; }
      set {
        assistSkillOnStageOrientation_ = value;
      }
    }

    /// <summary>Field number for the "assist_ultimate_on_stage_type" field.</summary>
    public const int AssistUltimateOnStageTypeFieldNumber = 52;
    private int assistUltimateOnStageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistUltimateOnStageType {
      get { return assistUltimateOnStageType_; }
      set {
        assistUltimateOnStageType_ = value;
      }
    }

    /// <summary>Field number for the "assist_ultimate_angle" field.</summary>
    public const int AssistUltimateAngleFieldNumber = 53;
    private int assistUltimateAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistUltimateAngle {
      get { return assistUltimateAngle_; }
      set {
        assistUltimateAngle_ = value;
      }
    }

    /// <summary>Field number for the "assist_ultimate_radius" field.</summary>
    public const int AssistUltimateRadiusFieldNumber = 54;
    private int assistUltimateRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistUltimateRadius {
      get { return assistUltimateRadius_; }
      set {
        assistUltimateRadius_ = value;
      }
    }

    /// <summary>Field number for the "assist_ultimate_on_stage_orientation" field.</summary>
    public const int AssistUltimateOnStageOrientationFieldNumber = 55;
    private int assistUltimateOnStageOrientation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AssistUltimateOnStageOrientation {
      get { return assistUltimateOnStageOrientation_; }
      set {
        assistUltimateOnStageOrientation_ = value;
      }
    }

    /// <summary>Field number for the "switch_c_d" field.</summary>
    public const int SwitchCDFieldNumber = 56;
    private int switchCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SwitchCD {
      get { return switchCD_; }
      set {
        switchCD_ = value;
      }
    }

    /// <summary>Field number for the "energy_conv_ratio" field.</summary>
    public const int EnergyConvRatioFieldNumber = 57;
    private int energyConvRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnergyConvRatio {
      get { return energyConvRatio_; }
      set {
        energyConvRatio_ = value;
      }
    }

    /// <summary>Field number for the "energy_efficiency" field.</summary>
    public const int EnergyEfficiencyFieldNumber = 58;
    private int energyEfficiency_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnergyEfficiency {
      get { return energyEfficiency_; }
      set {
        energyEfficiency_ = value;
      }
    }

    /// <summary>Field number for the "fragments_id" field.</summary>
    public const int FragmentsIdFieldNumber = 59;
    private int fragmentsId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FragmentsId {
      get { return fragmentsId_; }
      set {
        fragmentsId_ = value;
      }
    }

    /// <summary>Field number for the "transform_qty" field.</summary>
    public const int TransformQtyFieldNumber = 60;
    private int transformQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TransformQty {
      get { return transformQty_; }
      set {
        transformQty_ = value;
      }
    }

    /// <summary>Field number for the "recruitment_qty" field.</summary>
    public const int RecruitmentQtyFieldNumber = 61;
    private int recruitmentQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecruitmentQty {
      get { return recruitmentQty_; }
      set {
        recruitmentQty_ = value;
      }
    }

    /// <summary>Field number for the "attribute_id" field.</summary>
    public const int AttributeIdFieldNumber = 62;
    private string attributeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AttributeId {
      get { return attributeId_; }
      set {
        attributeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "presents_trait_id" field.</summary>
    public const int PresentsTraitIdFieldNumber = 63;
    private int presentsTraitId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PresentsTraitId {
      get { return presentsTraitId_; }
      set {
        presentsTraitId_ = value;
      }
    }

    /// <summary>Field number for the "skills_upgrade_group" field.</summary>
    public const int SkillsUpgradeGroupFieldNumber = 64;
    private static readonly pb::FieldCodec<int> _repeated_skillsUpgradeGroup_codec
        = pb::FieldCodec.ForInt32(514);
    private readonly pbc::RepeatedField<int> skillsUpgradeGroup_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SkillsUpgradeGroup {
      get { return skillsUpgradeGroup_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Character);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Character other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Visible != other.Visible) return false;
      if (Available != other.Available) return false;
      if (Grade != other.Grade) return false;
      if (DefaultSkinId != other.DefaultSkinId) return false;
      if (AdvanceSkinId != other.AdvanceSkinId) return false;
      if (AdvanceGroup != other.AdvanceGroup) return false;
      if (AdvanceSkinUnlockLevel != other.AdvanceSkinUnlockLevel) return false;
      if (Faction != other.Faction) return false;
      if (Weight != other.Weight) return false;
      if (EET != other.EET) return false;
      if (Class != other.Class) return false;
      if (CharacterAttackType != other.CharacterAttackType) return false;
      if (SearchTargetType != other.SearchTargetType) return false;
      if (AtkSpd != other.AtkSpd) return false;
      if (MovType != other.MovType) return false;
      if (WalkSpd != other.WalkSpd) return false;
      if (RunSpd != other.RunSpd) return false;
      if (SpRunSpd != other.SpRunSpd) return false;
      if (TransSpd != other.TransSpd) return false;
      if (WalkToRunDuration != other.WalkToRunDuration) return false;
      if (DodgeToRunAccelerationOrNot != other.DodgeToRunAccelerationOrNot) return false;
      if (MovAcc != other.MovAcc) return false;
      if (RotSpd != other.RotSpd) return false;
      if (RotAcc != other.RotAcc) return false;
      if (VisionDeg != other.VisionDeg) return false;
      if (VisionRng != other.VisionRng) return false;
      if (VisionAttackRng != other.VisionAttackRng) return false;
      if (HearRng != other.HearRng) return false;
      if (HearAttackRng != other.HearAttackRng) return false;
      if (RaiseGunRng != other.RaiseGunRng) return false;
      if (BulletType != other.BulletType) return false;
      if (Ammo != other.Ammo) return false;
      if (AIId != other.AIId) return false;
      if (NormalAtkId != other.NormalAtkId) return false;
      if (DodgeId != other.DodgeId) return false;
      if (SkillId != other.SkillId) return false;
      if (SpecialSkillId != other.SpecialSkillId) return false;
      if (UltimateId != other.UltimateId) return false;
      if (AssistAIId != other.AssistAIId) return false;
      if (AssistNormalAtkId != other.AssistNormalAtkId) return false;
      if (AssistDodgeId != other.AssistDodgeId) return false;
      if (AssistSkillId != other.AssistSkillId) return false;
      if (AssistSpecialSkillId != other.AssistSpecialSkillId) return false;
      if (AssistUltimateId != other.AssistUltimateId) return false;
      if (TalentSkillId != other.TalentSkillId) return false;
      if (AssistSkillOnStageType != other.AssistSkillOnStageType) return false;
      if (AssistSkillAngle != other.AssistSkillAngle) return false;
      if (AssistSkillRadius != other.AssistSkillRadius) return false;
      if (AssistSkillOnStageOrientation != other.AssistSkillOnStageOrientation) return false;
      if (AssistUltimateOnStageType != other.AssistUltimateOnStageType) return false;
      if (AssistUltimateAngle != other.AssistUltimateAngle) return false;
      if (AssistUltimateRadius != other.AssistUltimateRadius) return false;
      if (AssistUltimateOnStageOrientation != other.AssistUltimateOnStageOrientation) return false;
      if (SwitchCD != other.SwitchCD) return false;
      if (EnergyConvRatio != other.EnergyConvRatio) return false;
      if (EnergyEfficiency != other.EnergyEfficiency) return false;
      if (FragmentsId != other.FragmentsId) return false;
      if (TransformQty != other.TransformQty) return false;
      if (RecruitmentQty != other.RecruitmentQty) return false;
      if (AttributeId != other.AttributeId) return false;
      if (PresentsTraitId != other.PresentsTraitId) return false;
      if(!skillsUpgradeGroup_.Equals(other.skillsUpgradeGroup_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Visible != false) hash ^= Visible.GetHashCode();
      if (Available != false) hash ^= Available.GetHashCode();
      if (Grade != 0) hash ^= Grade.GetHashCode();
      if (DefaultSkinId != 0) hash ^= DefaultSkinId.GetHashCode();
      if (AdvanceSkinId != 0) hash ^= AdvanceSkinId.GetHashCode();
      if (AdvanceGroup != 0) hash ^= AdvanceGroup.GetHashCode();
      if (AdvanceSkinUnlockLevel != 0) hash ^= AdvanceSkinUnlockLevel.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (EET != 0) hash ^= EET.GetHashCode();
      if (Class != 0) hash ^= Class.GetHashCode();
      if (CharacterAttackType != 0) hash ^= CharacterAttackType.GetHashCode();
      if (SearchTargetType != 0) hash ^= SearchTargetType.GetHashCode();
      if (AtkSpd != 0) hash ^= AtkSpd.GetHashCode();
      if (MovType != 0) hash ^= MovType.GetHashCode();
      if (WalkSpd != 0) hash ^= WalkSpd.GetHashCode();
      if (RunSpd != 0) hash ^= RunSpd.GetHashCode();
      if (SpRunSpd != 0) hash ^= SpRunSpd.GetHashCode();
      if (TransSpd != 0) hash ^= TransSpd.GetHashCode();
      if (WalkToRunDuration != 0) hash ^= WalkToRunDuration.GetHashCode();
      if (DodgeToRunAccelerationOrNot != false) hash ^= DodgeToRunAccelerationOrNot.GetHashCode();
      if (MovAcc != 0) hash ^= MovAcc.GetHashCode();
      if (RotSpd != 0) hash ^= RotSpd.GetHashCode();
      if (RotAcc != 0) hash ^= RotAcc.GetHashCode();
      if (VisionDeg != 0) hash ^= VisionDeg.GetHashCode();
      if (VisionRng != 0) hash ^= VisionRng.GetHashCode();
      if (VisionAttackRng != 0) hash ^= VisionAttackRng.GetHashCode();
      if (HearRng != 0) hash ^= HearRng.GetHashCode();
      if (HearAttackRng != 0) hash ^= HearAttackRng.GetHashCode();
      if (RaiseGunRng != 0) hash ^= RaiseGunRng.GetHashCode();
      if (BulletType != 0) hash ^= BulletType.GetHashCode();
      if (Ammo != 0) hash ^= Ammo.GetHashCode();
      if (AIId != 0) hash ^= AIId.GetHashCode();
      if (NormalAtkId != 0) hash ^= NormalAtkId.GetHashCode();
      if (DodgeId != 0) hash ^= DodgeId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SpecialSkillId != 0) hash ^= SpecialSkillId.GetHashCode();
      if (UltimateId != 0) hash ^= UltimateId.GetHashCode();
      if (AssistAIId != 0) hash ^= AssistAIId.GetHashCode();
      if (AssistNormalAtkId != 0) hash ^= AssistNormalAtkId.GetHashCode();
      if (AssistDodgeId != 0) hash ^= AssistDodgeId.GetHashCode();
      if (AssistSkillId != 0) hash ^= AssistSkillId.GetHashCode();
      if (AssistSpecialSkillId != 0) hash ^= AssistSpecialSkillId.GetHashCode();
      if (AssistUltimateId != 0) hash ^= AssistUltimateId.GetHashCode();
      if (TalentSkillId != 0) hash ^= TalentSkillId.GetHashCode();
      if (AssistSkillOnStageType != 0) hash ^= AssistSkillOnStageType.GetHashCode();
      if (AssistSkillAngle != 0) hash ^= AssistSkillAngle.GetHashCode();
      if (AssistSkillRadius != 0) hash ^= AssistSkillRadius.GetHashCode();
      if (AssistSkillOnStageOrientation != 0) hash ^= AssistSkillOnStageOrientation.GetHashCode();
      if (AssistUltimateOnStageType != 0) hash ^= AssistUltimateOnStageType.GetHashCode();
      if (AssistUltimateAngle != 0) hash ^= AssistUltimateAngle.GetHashCode();
      if (AssistUltimateRadius != 0) hash ^= AssistUltimateRadius.GetHashCode();
      if (AssistUltimateOnStageOrientation != 0) hash ^= AssistUltimateOnStageOrientation.GetHashCode();
      if (SwitchCD != 0) hash ^= SwitchCD.GetHashCode();
      if (EnergyConvRatio != 0) hash ^= EnergyConvRatio.GetHashCode();
      if (EnergyEfficiency != 0) hash ^= EnergyEfficiency.GetHashCode();
      if (FragmentsId != 0) hash ^= FragmentsId.GetHashCode();
      if (TransformQty != 0) hash ^= TransformQty.GetHashCode();
      if (RecruitmentQty != 0) hash ^= RecruitmentQty.GetHashCode();
      if (AttributeId.Length != 0) hash ^= AttributeId.GetHashCode();
      if (PresentsTraitId != 0) hash ^= PresentsTraitId.GetHashCode();
      hash ^= skillsUpgradeGroup_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Visible != false) {
        output.WriteRawTag(24);
        output.WriteBool(Visible);
      }
      if (Available != false) {
        output.WriteRawTag(32);
        output.WriteBool(Available);
      }
      if (Grade != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Grade);
      }
      if (DefaultSkinId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DefaultSkinId);
      }
      if (AdvanceSkinId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AdvanceSkinId);
      }
      if (AdvanceGroup != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AdvanceGroup);
      }
      if (AdvanceSkinUnlockLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AdvanceSkinUnlockLevel);
      }
      if (Faction != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Faction);
      }
      if (Weight != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Weight);
      }
      if (EET != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EET);
      }
      if (Class != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Class);
      }
      if (CharacterAttackType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CharacterAttackType);
      }
      if (SearchTargetType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SearchTargetType);
      }
      if (AtkSpd != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AtkSpd);
      }
      if (MovType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MovType);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(WalkSpd);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RunSpd);
      }
      if (SpRunSpd != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SpRunSpd);
      }
      if (TransSpd != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TransSpd);
      }
      if (WalkToRunDuration != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WalkToRunDuration);
      }
      if (DodgeToRunAccelerationOrNot != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DodgeToRunAccelerationOrNot);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MovAcc);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(RotSpd);
      }
      if (RotAcc != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RotAcc);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(VisionDeg);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(VisionRng);
      }
      if (VisionAttackRng != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(VisionAttackRng);
      }
      if (HearRng != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(HearRng);
      }
      if (HearAttackRng != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HearAttackRng);
      }
      if (RaiseGunRng != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(RaiseGunRng);
      }
      if (BulletType != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BulletType);
      }
      if (Ammo != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Ammo);
      }
      if (AIId != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(AIId);
      }
      if (NormalAtkId != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NormalAtkId);
      }
      if (DodgeId != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(DodgeId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SkillId);
      }
      if (SpecialSkillId != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(SpecialSkillId);
      }
      if (UltimateId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(UltimateId);
      }
      if (AssistAIId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(AssistAIId);
      }
      if (AssistNormalAtkId != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(AssistNormalAtkId);
      }
      if (AssistDodgeId != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(AssistDodgeId);
      }
      if (AssistSkillId != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(AssistSkillId);
      }
      if (AssistSpecialSkillId != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(AssistSpecialSkillId);
      }
      if (AssistUltimateId != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(AssistUltimateId);
      }
      if (TalentSkillId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(TalentSkillId);
      }
      if (AssistSkillOnStageType != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(AssistSkillOnStageType);
      }
      if (AssistSkillAngle != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AssistSkillAngle);
      }
      if (AssistSkillRadius != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(AssistSkillRadius);
      }
      if (AssistSkillOnStageOrientation != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(AssistSkillOnStageOrientation);
      }
      if (AssistUltimateOnStageType != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(AssistUltimateOnStageType);
      }
      if (AssistUltimateAngle != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(AssistUltimateAngle);
      }
      if (AssistUltimateRadius != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(AssistUltimateRadius);
      }
      if (AssistUltimateOnStageOrientation != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(AssistUltimateOnStageOrientation);
      }
      if (SwitchCD != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(SwitchCD);
      }
      if (EnergyConvRatio != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(EnergyConvRatio);
      }
      if (EnergyEfficiency != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(EnergyEfficiency);
      }
      if (FragmentsId != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(FragmentsId);
      }
      if (TransformQty != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(TransformQty);
      }
      if (RecruitmentQty != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(RecruitmentQty);
      }
      if (AttributeId.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(AttributeId);
      }
      if (PresentsTraitId != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(PresentsTraitId);
      }
      skillsUpgradeGroup_.WriteTo(output, _repeated_skillsUpgradeGroup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Visible != false) {
        output.WriteRawTag(24);
        output.WriteBool(Visible);
      }
      if (Available != false) {
        output.WriteRawTag(32);
        output.WriteBool(Available);
      }
      if (Grade != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Grade);
      }
      if (DefaultSkinId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DefaultSkinId);
      }
      if (AdvanceSkinId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(AdvanceSkinId);
      }
      if (AdvanceGroup != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(AdvanceGroup);
      }
      if (AdvanceSkinUnlockLevel != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(AdvanceSkinUnlockLevel);
      }
      if (Faction != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Faction);
      }
      if (Weight != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(Weight);
      }
      if (EET != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(EET);
      }
      if (Class != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Class);
      }
      if (CharacterAttackType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(CharacterAttackType);
      }
      if (SearchTargetType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(SearchTargetType);
      }
      if (AtkSpd != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AtkSpd);
      }
      if (MovType != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(MovType);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(WalkSpd);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RunSpd);
      }
      if (SpRunSpd != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(SpRunSpd);
      }
      if (TransSpd != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(TransSpd);
      }
      if (WalkToRunDuration != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(WalkToRunDuration);
      }
      if (DodgeToRunAccelerationOrNot != false) {
        output.WriteRawTag(184, 1);
        output.WriteBool(DodgeToRunAccelerationOrNot);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(MovAcc);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(RotSpd);
      }
      if (RotAcc != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(RotAcc);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(VisionDeg);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(VisionRng);
      }
      if (VisionAttackRng != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(VisionAttackRng);
      }
      if (HearRng != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(HearRng);
      }
      if (HearAttackRng != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(HearAttackRng);
      }
      if (RaiseGunRng != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(RaiseGunRng);
      }
      if (BulletType != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(BulletType);
      }
      if (Ammo != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(Ammo);
      }
      if (AIId != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(AIId);
      }
      if (NormalAtkId != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(NormalAtkId);
      }
      if (DodgeId != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(DodgeId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(SkillId);
      }
      if (SpecialSkillId != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(SpecialSkillId);
      }
      if (UltimateId != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(UltimateId);
      }
      if (AssistAIId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(AssistAIId);
      }
      if (AssistNormalAtkId != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(AssistNormalAtkId);
      }
      if (AssistDodgeId != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(AssistDodgeId);
      }
      if (AssistSkillId != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(AssistSkillId);
      }
      if (AssistSpecialSkillId != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(AssistSpecialSkillId);
      }
      if (AssistUltimateId != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(AssistUltimateId);
      }
      if (TalentSkillId != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(TalentSkillId);
      }
      if (AssistSkillOnStageType != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(AssistSkillOnStageType);
      }
      if (AssistSkillAngle != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(AssistSkillAngle);
      }
      if (AssistSkillRadius != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(AssistSkillRadius);
      }
      if (AssistSkillOnStageOrientation != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(AssistSkillOnStageOrientation);
      }
      if (AssistUltimateOnStageType != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(AssistUltimateOnStageType);
      }
      if (AssistUltimateAngle != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(AssistUltimateAngle);
      }
      if (AssistUltimateRadius != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(AssistUltimateRadius);
      }
      if (AssistUltimateOnStageOrientation != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(AssistUltimateOnStageOrientation);
      }
      if (SwitchCD != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(SwitchCD);
      }
      if (EnergyConvRatio != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(EnergyConvRatio);
      }
      if (EnergyEfficiency != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(EnergyEfficiency);
      }
      if (FragmentsId != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(FragmentsId);
      }
      if (TransformQty != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(TransformQty);
      }
      if (RecruitmentQty != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(RecruitmentQty);
      }
      if (AttributeId.Length != 0) {
        output.WriteRawTag(242, 3);
        output.WriteString(AttributeId);
      }
      if (PresentsTraitId != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(PresentsTraitId);
      }
      skillsUpgradeGroup_.WriteTo(ref output, _repeated_skillsUpgradeGroup_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Visible != false) {
        size += 1 + 1;
      }
      if (Available != false) {
        size += 1 + 1;
      }
      if (Grade != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Grade);
      }
      if (DefaultSkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefaultSkinId);
      }
      if (AdvanceSkinId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvanceSkinId);
      }
      if (AdvanceGroup != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvanceGroup);
      }
      if (AdvanceSkinUnlockLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdvanceSkinUnlockLevel);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (EET != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EET);
      }
      if (Class != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Class);
      }
      if (CharacterAttackType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharacterAttackType);
      }
      if (SearchTargetType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SearchTargetType);
      }
      if (AtkSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AtkSpd);
      }
      if (MovType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MovType);
      }
      if (WalkSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WalkSpd);
      }
      if (RunSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RunSpd);
      }
      if (SpRunSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpRunSpd);
      }
      if (TransSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransSpd);
      }
      if (WalkToRunDuration != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WalkToRunDuration);
      }
      if (DodgeToRunAccelerationOrNot != false) {
        size += 2 + 1;
      }
      if (MovAcc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MovAcc);
      }
      if (RotSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotSpd);
      }
      if (RotAcc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotAcc);
      }
      if (VisionDeg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionDeg);
      }
      if (VisionRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionRng);
      }
      if (VisionAttackRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionAttackRng);
      }
      if (HearRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HearRng);
      }
      if (HearAttackRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HearAttackRng);
      }
      if (RaiseGunRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RaiseGunRng);
      }
      if (BulletType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BulletType);
      }
      if (Ammo != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Ammo);
      }
      if (AIId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AIId);
      }
      if (NormalAtkId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalAtkId);
      }
      if (DodgeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DodgeId);
      }
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SpecialSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SpecialSkillId);
      }
      if (UltimateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltimateId);
      }
      if (AssistAIId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistAIId);
      }
      if (AssistNormalAtkId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistNormalAtkId);
      }
      if (AssistDodgeId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistDodgeId);
      }
      if (AssistSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSkillId);
      }
      if (AssistSpecialSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSpecialSkillId);
      }
      if (AssistUltimateId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistUltimateId);
      }
      if (TalentSkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TalentSkillId);
      }
      if (AssistSkillOnStageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSkillOnStageType);
      }
      if (AssistSkillAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSkillAngle);
      }
      if (AssistSkillRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSkillRadius);
      }
      if (AssistSkillOnStageOrientation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistSkillOnStageOrientation);
      }
      if (AssistUltimateOnStageType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistUltimateOnStageType);
      }
      if (AssistUltimateAngle != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistUltimateAngle);
      }
      if (AssistUltimateRadius != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistUltimateRadius);
      }
      if (AssistUltimateOnStageOrientation != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AssistUltimateOnStageOrientation);
      }
      if (SwitchCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SwitchCD);
      }
      if (EnergyConvRatio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergyConvRatio);
      }
      if (EnergyEfficiency != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergyEfficiency);
      }
      if (FragmentsId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FragmentsId);
      }
      if (TransformQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TransformQty);
      }
      if (RecruitmentQty != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RecruitmentQty);
      }
      if (AttributeId.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(AttributeId);
      }
      if (PresentsTraitId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PresentsTraitId);
      }
      size += skillsUpgradeGroup_.CalculateSize(_repeated_skillsUpgradeGroup_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Character other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Visible != false) {
        Visible = other.Visible;
      }
      if (other.Available != false) {
        Available = other.Available;
      }
      if (other.Grade != 0) {
        Grade = other.Grade;
      }
      if (other.DefaultSkinId != 0) {
        DefaultSkinId = other.DefaultSkinId;
      }
      if (other.AdvanceSkinId != 0) {
        AdvanceSkinId = other.AdvanceSkinId;
      }
      if (other.AdvanceGroup != 0) {
        AdvanceGroup = other.AdvanceGroup;
      }
      if (other.AdvanceSkinUnlockLevel != 0) {
        AdvanceSkinUnlockLevel = other.AdvanceSkinUnlockLevel;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.EET != 0) {
        EET = other.EET;
      }
      if (other.Class != 0) {
        Class = other.Class;
      }
      if (other.CharacterAttackType != 0) {
        CharacterAttackType = other.CharacterAttackType;
      }
      if (other.SearchTargetType != 0) {
        SearchTargetType = other.SearchTargetType;
      }
      if (other.AtkSpd != 0) {
        AtkSpd = other.AtkSpd;
      }
      if (other.MovType != 0) {
        MovType = other.MovType;
      }
      if (other.WalkSpd != 0) {
        WalkSpd = other.WalkSpd;
      }
      if (other.RunSpd != 0) {
        RunSpd = other.RunSpd;
      }
      if (other.SpRunSpd != 0) {
        SpRunSpd = other.SpRunSpd;
      }
      if (other.TransSpd != 0) {
        TransSpd = other.TransSpd;
      }
      if (other.WalkToRunDuration != 0) {
        WalkToRunDuration = other.WalkToRunDuration;
      }
      if (other.DodgeToRunAccelerationOrNot != false) {
        DodgeToRunAccelerationOrNot = other.DodgeToRunAccelerationOrNot;
      }
      if (other.MovAcc != 0) {
        MovAcc = other.MovAcc;
      }
      if (other.RotSpd != 0) {
        RotSpd = other.RotSpd;
      }
      if (other.RotAcc != 0) {
        RotAcc = other.RotAcc;
      }
      if (other.VisionDeg != 0) {
        VisionDeg = other.VisionDeg;
      }
      if (other.VisionRng != 0) {
        VisionRng = other.VisionRng;
      }
      if (other.VisionAttackRng != 0) {
        VisionAttackRng = other.VisionAttackRng;
      }
      if (other.HearRng != 0) {
        HearRng = other.HearRng;
      }
      if (other.HearAttackRng != 0) {
        HearAttackRng = other.HearAttackRng;
      }
      if (other.RaiseGunRng != 0) {
        RaiseGunRng = other.RaiseGunRng;
      }
      if (other.BulletType != 0) {
        BulletType = other.BulletType;
      }
      if (other.Ammo != 0) {
        Ammo = other.Ammo;
      }
      if (other.AIId != 0) {
        AIId = other.AIId;
      }
      if (other.NormalAtkId != 0) {
        NormalAtkId = other.NormalAtkId;
      }
      if (other.DodgeId != 0) {
        DodgeId = other.DodgeId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SpecialSkillId != 0) {
        SpecialSkillId = other.SpecialSkillId;
      }
      if (other.UltimateId != 0) {
        UltimateId = other.UltimateId;
      }
      if (other.AssistAIId != 0) {
        AssistAIId = other.AssistAIId;
      }
      if (other.AssistNormalAtkId != 0) {
        AssistNormalAtkId = other.AssistNormalAtkId;
      }
      if (other.AssistDodgeId != 0) {
        AssistDodgeId = other.AssistDodgeId;
      }
      if (other.AssistSkillId != 0) {
        AssistSkillId = other.AssistSkillId;
      }
      if (other.AssistSpecialSkillId != 0) {
        AssistSpecialSkillId = other.AssistSpecialSkillId;
      }
      if (other.AssistUltimateId != 0) {
        AssistUltimateId = other.AssistUltimateId;
      }
      if (other.TalentSkillId != 0) {
        TalentSkillId = other.TalentSkillId;
      }
      if (other.AssistSkillOnStageType != 0) {
        AssistSkillOnStageType = other.AssistSkillOnStageType;
      }
      if (other.AssistSkillAngle != 0) {
        AssistSkillAngle = other.AssistSkillAngle;
      }
      if (other.AssistSkillRadius != 0) {
        AssistSkillRadius = other.AssistSkillRadius;
      }
      if (other.AssistSkillOnStageOrientation != 0) {
        AssistSkillOnStageOrientation = other.AssistSkillOnStageOrientation;
      }
      if (other.AssistUltimateOnStageType != 0) {
        AssistUltimateOnStageType = other.AssistUltimateOnStageType;
      }
      if (other.AssistUltimateAngle != 0) {
        AssistUltimateAngle = other.AssistUltimateAngle;
      }
      if (other.AssistUltimateRadius != 0) {
        AssistUltimateRadius = other.AssistUltimateRadius;
      }
      if (other.AssistUltimateOnStageOrientation != 0) {
        AssistUltimateOnStageOrientation = other.AssistUltimateOnStageOrientation;
      }
      if (other.SwitchCD != 0) {
        SwitchCD = other.SwitchCD;
      }
      if (other.EnergyConvRatio != 0) {
        EnergyConvRatio = other.EnergyConvRatio;
      }
      if (other.EnergyEfficiency != 0) {
        EnergyEfficiency = other.EnergyEfficiency;
      }
      if (other.FragmentsId != 0) {
        FragmentsId = other.FragmentsId;
      }
      if (other.TransformQty != 0) {
        TransformQty = other.TransformQty;
      }
      if (other.RecruitmentQty != 0) {
        RecruitmentQty = other.RecruitmentQty;
      }
      if (other.AttributeId.Length != 0) {
        AttributeId = other.AttributeId;
      }
      if (other.PresentsTraitId != 0) {
        PresentsTraitId = other.PresentsTraitId;
      }
      skillsUpgradeGroup_.Add(other.skillsUpgradeGroup_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Visible = input.ReadBool();
            break;
          }
          case 32: {
            Available = input.ReadBool();
            break;
          }
          case 40: {
            Grade = input.ReadInt32();
            break;
          }
          case 48: {
            DefaultSkinId = input.ReadInt32();
            break;
          }
          case 56: {
            AdvanceSkinId = input.ReadInt32();
            break;
          }
          case 64: {
            AdvanceGroup = input.ReadInt32();
            break;
          }
          case 72: {
            AdvanceSkinUnlockLevel = input.ReadInt32();
            break;
          }
          case 80: {
            Faction = input.ReadInt32();
            break;
          }
          case 88: {
            Weight = input.ReadInt32();
            break;
          }
          case 96: {
            EET = input.ReadInt32();
            break;
          }
          case 104: {
            Class = input.ReadInt32();
            break;
          }
          case 112: {
            CharacterAttackType = input.ReadInt32();
            break;
          }
          case 120: {
            SearchTargetType = input.ReadInt32();
            break;
          }
          case 128: {
            AtkSpd = input.ReadInt32();
            break;
          }
          case 136: {
            MovType = input.ReadInt32();
            break;
          }
          case 144: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 152: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 160: {
            SpRunSpd = input.ReadInt32();
            break;
          }
          case 168: {
            TransSpd = input.ReadInt32();
            break;
          }
          case 176: {
            WalkToRunDuration = input.ReadInt32();
            break;
          }
          case 184: {
            DodgeToRunAccelerationOrNot = input.ReadBool();
            break;
          }
          case 192: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 200: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 208: {
            RotAcc = input.ReadInt32();
            break;
          }
          case 216: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 224: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 232: {
            VisionAttackRng = input.ReadInt32();
            break;
          }
          case 240: {
            HearRng = input.ReadInt32();
            break;
          }
          case 248: {
            HearAttackRng = input.ReadInt32();
            break;
          }
          case 256: {
            RaiseGunRng = input.ReadInt32();
            break;
          }
          case 264: {
            BulletType = input.ReadInt32();
            break;
          }
          case 272: {
            Ammo = input.ReadInt32();
            break;
          }
          case 280: {
            AIId = input.ReadInt32();
            break;
          }
          case 288: {
            NormalAtkId = input.ReadInt32();
            break;
          }
          case 296: {
            DodgeId = input.ReadInt32();
            break;
          }
          case 304: {
            SkillId = input.ReadInt32();
            break;
          }
          case 312: {
            SpecialSkillId = input.ReadInt32();
            break;
          }
          case 320: {
            UltimateId = input.ReadInt32();
            break;
          }
          case 328: {
            AssistAIId = input.ReadInt32();
            break;
          }
          case 336: {
            AssistNormalAtkId = input.ReadInt32();
            break;
          }
          case 344: {
            AssistDodgeId = input.ReadInt32();
            break;
          }
          case 352: {
            AssistSkillId = input.ReadInt32();
            break;
          }
          case 360: {
            AssistSpecialSkillId = input.ReadInt32();
            break;
          }
          case 368: {
            AssistUltimateId = input.ReadInt32();
            break;
          }
          case 376: {
            TalentSkillId = input.ReadInt32();
            break;
          }
          case 384: {
            AssistSkillOnStageType = input.ReadInt32();
            break;
          }
          case 392: {
            AssistSkillAngle = input.ReadInt32();
            break;
          }
          case 400: {
            AssistSkillRadius = input.ReadInt32();
            break;
          }
          case 408: {
            AssistSkillOnStageOrientation = input.ReadInt32();
            break;
          }
          case 416: {
            AssistUltimateOnStageType = input.ReadInt32();
            break;
          }
          case 424: {
            AssistUltimateAngle = input.ReadInt32();
            break;
          }
          case 432: {
            AssistUltimateRadius = input.ReadInt32();
            break;
          }
          case 440: {
            AssistUltimateOnStageOrientation = input.ReadInt32();
            break;
          }
          case 448: {
            SwitchCD = input.ReadInt32();
            break;
          }
          case 456: {
            EnergyConvRatio = input.ReadInt32();
            break;
          }
          case 464: {
            EnergyEfficiency = input.ReadInt32();
            break;
          }
          case 472: {
            FragmentsId = input.ReadInt32();
            break;
          }
          case 480: {
            TransformQty = input.ReadInt32();
            break;
          }
          case 488: {
            RecruitmentQty = input.ReadInt32();
            break;
          }
          case 498: {
            AttributeId = input.ReadString();
            break;
          }
          case 504: {
            PresentsTraitId = input.ReadInt32();
            break;
          }
          case 514:
          case 512: {
            skillsUpgradeGroup_.AddEntriesFrom(input, _repeated_skillsUpgradeGroup_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Visible = input.ReadBool();
            break;
          }
          case 32: {
            Available = input.ReadBool();
            break;
          }
          case 40: {
            Grade = input.ReadInt32();
            break;
          }
          case 48: {
            DefaultSkinId = input.ReadInt32();
            break;
          }
          case 56: {
            AdvanceSkinId = input.ReadInt32();
            break;
          }
          case 64: {
            AdvanceGroup = input.ReadInt32();
            break;
          }
          case 72: {
            AdvanceSkinUnlockLevel = input.ReadInt32();
            break;
          }
          case 80: {
            Faction = input.ReadInt32();
            break;
          }
          case 88: {
            Weight = input.ReadInt32();
            break;
          }
          case 96: {
            EET = input.ReadInt32();
            break;
          }
          case 104: {
            Class = input.ReadInt32();
            break;
          }
          case 112: {
            CharacterAttackType = input.ReadInt32();
            break;
          }
          case 120: {
            SearchTargetType = input.ReadInt32();
            break;
          }
          case 128: {
            AtkSpd = input.ReadInt32();
            break;
          }
          case 136: {
            MovType = input.ReadInt32();
            break;
          }
          case 144: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 152: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 160: {
            SpRunSpd = input.ReadInt32();
            break;
          }
          case 168: {
            TransSpd = input.ReadInt32();
            break;
          }
          case 176: {
            WalkToRunDuration = input.ReadInt32();
            break;
          }
          case 184: {
            DodgeToRunAccelerationOrNot = input.ReadBool();
            break;
          }
          case 192: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 200: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 208: {
            RotAcc = input.ReadInt32();
            break;
          }
          case 216: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 224: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 232: {
            VisionAttackRng = input.ReadInt32();
            break;
          }
          case 240: {
            HearRng = input.ReadInt32();
            break;
          }
          case 248: {
            HearAttackRng = input.ReadInt32();
            break;
          }
          case 256: {
            RaiseGunRng = input.ReadInt32();
            break;
          }
          case 264: {
            BulletType = input.ReadInt32();
            break;
          }
          case 272: {
            Ammo = input.ReadInt32();
            break;
          }
          case 280: {
            AIId = input.ReadInt32();
            break;
          }
          case 288: {
            NormalAtkId = input.ReadInt32();
            break;
          }
          case 296: {
            DodgeId = input.ReadInt32();
            break;
          }
          case 304: {
            SkillId = input.ReadInt32();
            break;
          }
          case 312: {
            SpecialSkillId = input.ReadInt32();
            break;
          }
          case 320: {
            UltimateId = input.ReadInt32();
            break;
          }
          case 328: {
            AssistAIId = input.ReadInt32();
            break;
          }
          case 336: {
            AssistNormalAtkId = input.ReadInt32();
            break;
          }
          case 344: {
            AssistDodgeId = input.ReadInt32();
            break;
          }
          case 352: {
            AssistSkillId = input.ReadInt32();
            break;
          }
          case 360: {
            AssistSpecialSkillId = input.ReadInt32();
            break;
          }
          case 368: {
            AssistUltimateId = input.ReadInt32();
            break;
          }
          case 376: {
            TalentSkillId = input.ReadInt32();
            break;
          }
          case 384: {
            AssistSkillOnStageType = input.ReadInt32();
            break;
          }
          case 392: {
            AssistSkillAngle = input.ReadInt32();
            break;
          }
          case 400: {
            AssistSkillRadius = input.ReadInt32();
            break;
          }
          case 408: {
            AssistSkillOnStageOrientation = input.ReadInt32();
            break;
          }
          case 416: {
            AssistUltimateOnStageType = input.ReadInt32();
            break;
          }
          case 424: {
            AssistUltimateAngle = input.ReadInt32();
            break;
          }
          case 432: {
            AssistUltimateRadius = input.ReadInt32();
            break;
          }
          case 440: {
            AssistUltimateOnStageOrientation = input.ReadInt32();
            break;
          }
          case 448: {
            SwitchCD = input.ReadInt32();
            break;
          }
          case 456: {
            EnergyConvRatio = input.ReadInt32();
            break;
          }
          case 464: {
            EnergyEfficiency = input.ReadInt32();
            break;
          }
          case 472: {
            FragmentsId = input.ReadInt32();
            break;
          }
          case 480: {
            TransformQty = input.ReadInt32();
            break;
          }
          case 488: {
            RecruitmentQty = input.ReadInt32();
            break;
          }
          case 498: {
            AttributeId = input.ReadString();
            break;
          }
          case 504: {
            PresentsTraitId = input.ReadInt32();
            break;
          }
          case 514:
          case 512: {
            skillsUpgradeGroup_.AddEntriesFrom(ref input, _repeated_skillsUpgradeGroup_codec);
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
