// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InfinityTowerDifficulty.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from InfinityTowerDifficulty.proto</summary>
  public static partial class InfinityTowerDifficultyReflection {

    #region Descriptor
    /// <summary>File descriptor for InfinityTowerDifficulty.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfinityTowerDifficultyReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch1JbmZpbml0eVRvd2VyRGlmZmljdWx0eS5wcm90byKzAQoXSW5maW5pdHlU",
            "b3dlckRpZmZpY3VsdHkSCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIQCgh0",
            "b3dlcl9pZBgDIAEoBRIaChJ1bmxvY2tfd29ybGRfY2xhc3MYBCABKAUSEwoL",
            "dW5sb2NrX3RpcHMYBSABKAkSFAoMaXNfY2hhbGxlbmdlGAYgASgIEhcKD3Jl",
            "Y29tbWVuZF9sZXZlbBgHIAEoBRIMCgRzb3J0GAggASgFQg6qAgtOb3ZhLkNs",
            "aWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.InfinityTowerDifficulty), global::Nova.Client.InfinityTowerDifficulty.Parser, new[]{ "Id", "Name", "TowerId", "UnlockWorldClass", "UnlockTips", "IsChallenge", "RecommendLevel", "Sort" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InfinityTowerDifficulty : pb::IMessage<InfinityTowerDifficulty>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfinityTowerDifficulty> _parser = new pb::MessageParser<InfinityTowerDifficulty>(() => new InfinityTowerDifficulty());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InfinityTowerDifficulty> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.InfinityTowerDifficultyReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerDifficulty() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerDifficulty(InfinityTowerDifficulty other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      towerId_ = other.towerId_;
      unlockWorldClass_ = other.unlockWorldClass_;
      unlockTips_ = other.unlockTips_;
      isChallenge_ = other.isChallenge_;
      recommendLevel_ = other.recommendLevel_;
      sort_ = other.sort_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerDifficulty Clone() {
      return new InfinityTowerDifficulty(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tower_id" field.</summary>
    public const int TowerIdFieldNumber = 3;
    private int towerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TowerId {
      get { return towerId_; }
      set {
        towerId_ = value;
      }
    }

    /// <summary>Field number for the "unlock_world_class" field.</summary>
    public const int UnlockWorldClassFieldNumber = 4;
    private int unlockWorldClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnlockWorldClass {
      get { return unlockWorldClass_; }
      set {
        unlockWorldClass_ = value;
      }
    }

    /// <summary>Field number for the "unlock_tips" field.</summary>
    public const int UnlockTipsFieldNumber = 5;
    private string unlockTips_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string UnlockTips {
      get { return unlockTips_; }
      set {
        unlockTips_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_challenge" field.</summary>
    public const int IsChallengeFieldNumber = 6;
    private bool isChallenge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsChallenge {
      get { return isChallenge_; }
      set {
        isChallenge_ = value;
      }
    }

    /// <summary>Field number for the "recommend_level" field.</summary>
    public const int RecommendLevelFieldNumber = 7;
    private int recommendLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecommendLevel {
      get { return recommendLevel_; }
      set {
        recommendLevel_ = value;
      }
    }

    /// <summary>Field number for the "sort" field.</summary>
    public const int SortFieldNumber = 8;
    private int sort_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Sort {
      get { return sort_; }
      set {
        sort_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InfinityTowerDifficulty);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InfinityTowerDifficulty other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (TowerId != other.TowerId) return false;
      if (UnlockWorldClass != other.UnlockWorldClass) return false;
      if (UnlockTips != other.UnlockTips) return false;
      if (IsChallenge != other.IsChallenge) return false;
      if (RecommendLevel != other.RecommendLevel) return false;
      if (Sort != other.Sort) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (TowerId != 0) hash ^= TowerId.GetHashCode();
      if (UnlockWorldClass != 0) hash ^= UnlockWorldClass.GetHashCode();
      if (UnlockTips.Length != 0) hash ^= UnlockTips.GetHashCode();
      if (IsChallenge != false) hash ^= IsChallenge.GetHashCode();
      if (RecommendLevel != 0) hash ^= RecommendLevel.GetHashCode();
      if (Sort != 0) hash ^= Sort.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TowerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TowerId);
      }
      if (UnlockWorldClass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnlockWorldClass);
      }
      if (UnlockTips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnlockTips);
      }
      if (IsChallenge != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsChallenge);
      }
      if (RecommendLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecommendLevel);
      }
      if (Sort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (TowerId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(TowerId);
      }
      if (UnlockWorldClass != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(UnlockWorldClass);
      }
      if (UnlockTips.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(UnlockTips);
      }
      if (IsChallenge != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsChallenge);
      }
      if (RecommendLevel != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecommendLevel);
      }
      if (Sort != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Sort);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (TowerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TowerId);
      }
      if (UnlockWorldClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockWorldClass);
      }
      if (UnlockTips.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(UnlockTips);
      }
      if (IsChallenge != false) {
        size += 1 + 1;
      }
      if (RecommendLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecommendLevel);
      }
      if (Sort != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sort);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InfinityTowerDifficulty other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.TowerId != 0) {
        TowerId = other.TowerId;
      }
      if (other.UnlockWorldClass != 0) {
        UnlockWorldClass = other.UnlockWorldClass;
      }
      if (other.UnlockTips.Length != 0) {
        UnlockTips = other.UnlockTips;
      }
      if (other.IsChallenge != false) {
        IsChallenge = other.IsChallenge;
      }
      if (other.RecommendLevel != 0) {
        RecommendLevel = other.RecommendLevel;
      }
      if (other.Sort != 0) {
        Sort = other.Sort;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            TowerId = input.ReadInt32();
            break;
          }
          case 32: {
            UnlockWorldClass = input.ReadInt32();
            break;
          }
          case 42: {
            UnlockTips = input.ReadString();
            break;
          }
          case 48: {
            IsChallenge = input.ReadBool();
            break;
          }
          case 56: {
            RecommendLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Sort = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            TowerId = input.ReadInt32();
            break;
          }
          case 32: {
            UnlockWorldClass = input.ReadInt32();
            break;
          }
          case 42: {
            UnlockTips = input.ReadString();
            break;
          }
          case 48: {
            IsChallenge = input.ReadBool();
            break;
          }
          case 56: {
            RecommendLevel = input.ReadInt32();
            break;
          }
          case 64: {
            Sort = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
