// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: MonsterActionBranch.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from MonsterActionBranch.proto</summary>
  public static partial class MonsterActionBranchReflection {

    #region Descriptor
    /// <summary>File descriptor for MonsterActionBranch.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonsterActionBranchReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChlNb25zdGVyQWN0aW9uQnJhbmNoLnByb3RvIqQFChNNb25zdGVyQWN0aW9u",
            "QnJhbmNoEgoKAmlkGAEgASgFEhAKCGdyb3VwX2lkGAIgASgFEhAKCHNraWxs",
            "X2lkGAMgASgFEhAKCHByaW9yaXR5GAQgASgFEg4KBndlaWdodBgFIAEoBRIM",
            "CgRyYXRlGAYgASgFEgsKA2NfZBgHIAEoBRIYChBpbml0aWFsX2NfZF9wb29s",
            "GAggAygFEhcKD21pbl9pbml0aWFsX2NfZBgJIAEoBRIXCg9tYXhfaW5pdGlh",
            "bF9jX2QYCiABKAUSFgoOc3RhcnRfY19kX3RpbWUYCyABKAUSEQoJZml4ZWRf",
            "Y19kGAwgASgIEhgKEHJlbGVhc2VfZGlzdGFuY2UYDSABKAUSFQoNcmVsZWFz",
            "ZV9hbmdsZRgOIAEoBRIWCg50cmFjZV9kdXJhdGlvbhgPIAEoBRIQCghhY3Rp",
            "dmF0ZRgQIAEoCBIeChZhY3RpdmVfY29uZGl0aW9uX3R5cGUxGBEgASgFEhUK",
            "DWFjdGl2ZV9wYXJhbTEYEiABKAkSFQoNYWN0aXZlX3BhcmFtMhgTIAEoCRIh",
            "ChlkZV9hY3RpdmVfY29uZGl0aW9uX3R5cGUxGBQgASgFEhgKEGRlX2FjdGl2",
            "ZV9wYXJhbTEYFSABKAkSGAoQZGVfYWN0aXZlX3BhcmFtMhgWIAEoCRIaChJm",
            "b2xsb3dfZXZlbnRfdHlwZTEYFyABKAUSGwoTZm9sbG93X2V2ZW50X3BhcmFt",
            "MRgYIAEoCRIaChJmb2xsb3dfZXZlbnRfdHlwZTIYGSABKAUSGwoTZm9sbG93",
            "X2V2ZW50X3BhcmFtMhgaIAEoCRIaChJmb2xsb3dfZXZlbnRfdHlwZTMYGyAB",
            "KAUSGwoTZm9sbG93X2V2ZW50X3BhcmFtMxgcIAEoCUIOqgILTm92YS5DbGll",
            "bnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.MonsterActionBranch), global::Nova.Client.MonsterActionBranch.Parser, new[]{ "Id", "GroupId", "SkillId", "Priority", "Weight", "Rate", "CD", "InitialCDPool", "MinInitialCD", "MaxInitialCD", "StartCDTime", "FixedCD", "ReleaseDistance", "ReleaseAngle", "TraceDuration", "Activate", "ActiveConditionType1", "ActiveParam1", "ActiveParam2", "DeActiveConditionType1", "DeActiveParam1", "DeActiveParam2", "FollowEventType1", "FollowEventParam1", "FollowEventType2", "FollowEventParam2", "FollowEventType3", "FollowEventParam3" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class MonsterActionBranch : pb::IMessage<MonsterActionBranch>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<MonsterActionBranch> _parser = new pb::MessageParser<MonsterActionBranch>(() => new MonsterActionBranch());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<MonsterActionBranch> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.MonsterActionBranchReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterActionBranch() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterActionBranch(MonsterActionBranch other) : this() {
      id_ = other.id_;
      groupId_ = other.groupId_;
      skillId_ = other.skillId_;
      priority_ = other.priority_;
      weight_ = other.weight_;
      rate_ = other.rate_;
      cD_ = other.cD_;
      initialCDPool_ = other.initialCDPool_.Clone();
      minInitialCD_ = other.minInitialCD_;
      maxInitialCD_ = other.maxInitialCD_;
      startCDTime_ = other.startCDTime_;
      fixedCD_ = other.fixedCD_;
      releaseDistance_ = other.releaseDistance_;
      releaseAngle_ = other.releaseAngle_;
      traceDuration_ = other.traceDuration_;
      activate_ = other.activate_;
      activeConditionType1_ = other.activeConditionType1_;
      activeParam1_ = other.activeParam1_;
      activeParam2_ = other.activeParam2_;
      deActiveConditionType1_ = other.deActiveConditionType1_;
      deActiveParam1_ = other.deActiveParam1_;
      deActiveParam2_ = other.deActiveParam2_;
      followEventType1_ = other.followEventType1_;
      followEventParam1_ = other.followEventParam1_;
      followEventType2_ = other.followEventType2_;
      followEventParam2_ = other.followEventParam2_;
      followEventType3_ = other.followEventType3_;
      followEventParam3_ = other.followEventParam3_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public MonsterActionBranch Clone() {
      return new MonsterActionBranch(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 3;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "priority" field.</summary>
    public const int PriorityFieldNumber = 4;
    private int priority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Priority {
      get { return priority_; }
      set {
        priority_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 5;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "rate" field.</summary>
    public const int RateFieldNumber = 6;
    private int rate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Rate {
      get { return rate_; }
      set {
        rate_ = value;
      }
    }

    /// <summary>Field number for the "c_d" field.</summary>
    public const int CDFieldNumber = 7;
    private int cD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "initial_c_d_pool" field.</summary>
    public const int InitialCDPoolFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_initialCDPool_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> initialCDPool_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> InitialCDPool {
      get { return initialCDPool_; }
    }

    /// <summary>Field number for the "min_initial_c_d" field.</summary>
    public const int MinInitialCDFieldNumber = 9;
    private int minInitialCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MinInitialCD {
      get { return minInitialCD_; }
      set {
        minInitialCD_ = value;
      }
    }

    /// <summary>Field number for the "max_initial_c_d" field.</summary>
    public const int MaxInitialCDFieldNumber = 10;
    private int maxInitialCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxInitialCD {
      get { return maxInitialCD_; }
      set {
        maxInitialCD_ = value;
      }
    }

    /// <summary>Field number for the "start_c_d_time" field.</summary>
    public const int StartCDTimeFieldNumber = 11;
    private int startCDTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int StartCDTime {
      get { return startCDTime_; }
      set {
        startCDTime_ = value;
      }
    }

    /// <summary>Field number for the "fixed_c_d" field.</summary>
    public const int FixedCDFieldNumber = 12;
    private bool fixedCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool FixedCD {
      get { return fixedCD_; }
      set {
        fixedCD_ = value;
      }
    }

    /// <summary>Field number for the "release_distance" field.</summary>
    public const int ReleaseDistanceFieldNumber = 13;
    private int releaseDistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReleaseDistance {
      get { return releaseDistance_; }
      set {
        releaseDistance_ = value;
      }
    }

    /// <summary>Field number for the "release_angle" field.</summary>
    public const int ReleaseAngleFieldNumber = 14;
    private int releaseAngle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReleaseAngle {
      get { return releaseAngle_; }
      set {
        releaseAngle_ = value;
      }
    }

    /// <summary>Field number for the "trace_duration" field.</summary>
    public const int TraceDurationFieldNumber = 15;
    private int traceDuration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TraceDuration {
      get { return traceDuration_; }
      set {
        traceDuration_ = value;
      }
    }

    /// <summary>Field number for the "activate" field.</summary>
    public const int ActivateFieldNumber = 16;
    private bool activate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Activate {
      get { return activate_; }
      set {
        activate_ = value;
      }
    }

    /// <summary>Field number for the "active_condition_type1" field.</summary>
    public const int ActiveConditionType1FieldNumber = 17;
    private int activeConditionType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveConditionType1 {
      get { return activeConditionType1_; }
      set {
        activeConditionType1_ = value;
      }
    }

    /// <summary>Field number for the "active_param1" field.</summary>
    public const int ActiveParam1FieldNumber = 18;
    private string activeParam1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveParam1 {
      get { return activeParam1_; }
      set {
        activeParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "active_param2" field.</summary>
    public const int ActiveParam2FieldNumber = 19;
    private string activeParam2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveParam2 {
      get { return activeParam2_; }
      set {
        activeParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "de_active_condition_type1" field.</summary>
    public const int DeActiveConditionType1FieldNumber = 20;
    private int deActiveConditionType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DeActiveConditionType1 {
      get { return deActiveConditionType1_; }
      set {
        deActiveConditionType1_ = value;
      }
    }

    /// <summary>Field number for the "de_active_param1" field.</summary>
    public const int DeActiveParam1FieldNumber = 21;
    private string deActiveParam1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeActiveParam1 {
      get { return deActiveParam1_; }
      set {
        deActiveParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "de_active_param2" field.</summary>
    public const int DeActiveParam2FieldNumber = 22;
    private string deActiveParam2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DeActiveParam2 {
      get { return deActiveParam2_; }
      set {
        deActiveParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "follow_event_type1" field.</summary>
    public const int FollowEventType1FieldNumber = 23;
    private int followEventType1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FollowEventType1 {
      get { return followEventType1_; }
      set {
        followEventType1_ = value;
      }
    }

    /// <summary>Field number for the "follow_event_param1" field.</summary>
    public const int FollowEventParam1FieldNumber = 24;
    private string followEventParam1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FollowEventParam1 {
      get { return followEventParam1_; }
      set {
        followEventParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "follow_event_type2" field.</summary>
    public const int FollowEventType2FieldNumber = 25;
    private int followEventType2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FollowEventType2 {
      get { return followEventType2_; }
      set {
        followEventType2_ = value;
      }
    }

    /// <summary>Field number for the "follow_event_param2" field.</summary>
    public const int FollowEventParam2FieldNumber = 26;
    private string followEventParam2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FollowEventParam2 {
      get { return followEventParam2_; }
      set {
        followEventParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "follow_event_type3" field.</summary>
    public const int FollowEventType3FieldNumber = 27;
    private int followEventType3_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FollowEventType3 {
      get { return followEventType3_; }
      set {
        followEventType3_ = value;
      }
    }

    /// <summary>Field number for the "follow_event_param3" field.</summary>
    public const int FollowEventParam3FieldNumber = 28;
    private string followEventParam3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string FollowEventParam3 {
      get { return followEventParam3_; }
      set {
        followEventParam3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as MonsterActionBranch);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(MonsterActionBranch other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GroupId != other.GroupId) return false;
      if (SkillId != other.SkillId) return false;
      if (Priority != other.Priority) return false;
      if (Weight != other.Weight) return false;
      if (Rate != other.Rate) return false;
      if (CD != other.CD) return false;
      if(!initialCDPool_.Equals(other.initialCDPool_)) return false;
      if (MinInitialCD != other.MinInitialCD) return false;
      if (MaxInitialCD != other.MaxInitialCD) return false;
      if (StartCDTime != other.StartCDTime) return false;
      if (FixedCD != other.FixedCD) return false;
      if (ReleaseDistance != other.ReleaseDistance) return false;
      if (ReleaseAngle != other.ReleaseAngle) return false;
      if (TraceDuration != other.TraceDuration) return false;
      if (Activate != other.Activate) return false;
      if (ActiveConditionType1 != other.ActiveConditionType1) return false;
      if (ActiveParam1 != other.ActiveParam1) return false;
      if (ActiveParam2 != other.ActiveParam2) return false;
      if (DeActiveConditionType1 != other.DeActiveConditionType1) return false;
      if (DeActiveParam1 != other.DeActiveParam1) return false;
      if (DeActiveParam2 != other.DeActiveParam2) return false;
      if (FollowEventType1 != other.FollowEventType1) return false;
      if (FollowEventParam1 != other.FollowEventParam1) return false;
      if (FollowEventType2 != other.FollowEventType2) return false;
      if (FollowEventParam2 != other.FollowEventParam2) return false;
      if (FollowEventType3 != other.FollowEventType3) return false;
      if (FollowEventParam3 != other.FollowEventParam3) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (Priority != 0) hash ^= Priority.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (Rate != 0) hash ^= Rate.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      hash ^= initialCDPool_.GetHashCode();
      if (MinInitialCD != 0) hash ^= MinInitialCD.GetHashCode();
      if (MaxInitialCD != 0) hash ^= MaxInitialCD.GetHashCode();
      if (StartCDTime != 0) hash ^= StartCDTime.GetHashCode();
      if (FixedCD != false) hash ^= FixedCD.GetHashCode();
      if (ReleaseDistance != 0) hash ^= ReleaseDistance.GetHashCode();
      if (ReleaseAngle != 0) hash ^= ReleaseAngle.GetHashCode();
      if (TraceDuration != 0) hash ^= TraceDuration.GetHashCode();
      if (Activate != false) hash ^= Activate.GetHashCode();
      if (ActiveConditionType1 != 0) hash ^= ActiveConditionType1.GetHashCode();
      if (ActiveParam1.Length != 0) hash ^= ActiveParam1.GetHashCode();
      if (ActiveParam2.Length != 0) hash ^= ActiveParam2.GetHashCode();
      if (DeActiveConditionType1 != 0) hash ^= DeActiveConditionType1.GetHashCode();
      if (DeActiveParam1.Length != 0) hash ^= DeActiveParam1.GetHashCode();
      if (DeActiveParam2.Length != 0) hash ^= DeActiveParam2.GetHashCode();
      if (FollowEventType1 != 0) hash ^= FollowEventType1.GetHashCode();
      if (FollowEventParam1.Length != 0) hash ^= FollowEventParam1.GetHashCode();
      if (FollowEventType2 != 0) hash ^= FollowEventType2.GetHashCode();
      if (FollowEventParam2.Length != 0) hash ^= FollowEventParam2.GetHashCode();
      if (FollowEventType3 != 0) hash ^= FollowEventType3.GetHashCode();
      if (FollowEventParam3.Length != 0) hash ^= FollowEventParam3.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (Weight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Weight);
      }
      if (Rate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rate);
      }
      if (CD != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CD);
      }
      initialCDPool_.WriteTo(output, _repeated_initialCDPool_codec);
      if (MinInitialCD != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinInitialCD);
      }
      if (MaxInitialCD != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxInitialCD);
      }
      if (StartCDTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StartCDTime);
      }
      if (FixedCD != false) {
        output.WriteRawTag(96);
        output.WriteBool(FixedCD);
      }
      if (ReleaseDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReleaseDistance);
      }
      if (ReleaseAngle != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ReleaseAngle);
      }
      if (TraceDuration != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TraceDuration);
      }
      if (Activate != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Activate);
      }
      if (ActiveConditionType1 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ActiveConditionType1);
      }
      if (ActiveParam1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ActiveParam1);
      }
      if (ActiveParam2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ActiveParam2);
      }
      if (DeActiveConditionType1 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeActiveConditionType1);
      }
      if (DeActiveParam1.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(DeActiveParam1);
      }
      if (DeActiveParam2.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(DeActiveParam2);
      }
      if (FollowEventType1 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FollowEventType1);
      }
      if (FollowEventParam1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(FollowEventParam1);
      }
      if (FollowEventType2 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(FollowEventType2);
      }
      if (FollowEventParam2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(FollowEventParam2);
      }
      if (FollowEventType3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(FollowEventType3);
      }
      if (FollowEventParam3.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(FollowEventParam3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (SkillId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(SkillId);
      }
      if (Priority != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Priority);
      }
      if (Weight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Weight);
      }
      if (Rate != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Rate);
      }
      if (CD != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(CD);
      }
      initialCDPool_.WriteTo(ref output, _repeated_initialCDPool_codec);
      if (MinInitialCD != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(MinInitialCD);
      }
      if (MaxInitialCD != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MaxInitialCD);
      }
      if (StartCDTime != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(StartCDTime);
      }
      if (FixedCD != false) {
        output.WriteRawTag(96);
        output.WriteBool(FixedCD);
      }
      if (ReleaseDistance != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ReleaseDistance);
      }
      if (ReleaseAngle != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ReleaseAngle);
      }
      if (TraceDuration != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(TraceDuration);
      }
      if (Activate != false) {
        output.WriteRawTag(128, 1);
        output.WriteBool(Activate);
      }
      if (ActiveConditionType1 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ActiveConditionType1);
      }
      if (ActiveParam1.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ActiveParam1);
      }
      if (ActiveParam2.Length != 0) {
        output.WriteRawTag(154, 1);
        output.WriteString(ActiveParam2);
      }
      if (DeActiveConditionType1 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DeActiveConditionType1);
      }
      if (DeActiveParam1.Length != 0) {
        output.WriteRawTag(170, 1);
        output.WriteString(DeActiveParam1);
      }
      if (DeActiveParam2.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(DeActiveParam2);
      }
      if (FollowEventType1 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(FollowEventType1);
      }
      if (FollowEventParam1.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(FollowEventParam1);
      }
      if (FollowEventType2 != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(FollowEventType2);
      }
      if (FollowEventParam2.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(FollowEventParam2);
      }
      if (FollowEventType3 != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(FollowEventType3);
      }
      if (FollowEventParam3.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(FollowEventParam3);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (SkillId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (Priority != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Priority);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Rate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rate);
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      size += initialCDPool_.CalculateSize(_repeated_initialCDPool_codec);
      if (MinInitialCD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MinInitialCD);
      }
      if (MaxInitialCD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxInitialCD);
      }
      if (StartCDTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(StartCDTime);
      }
      if (FixedCD != false) {
        size += 1 + 1;
      }
      if (ReleaseDistance != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaseDistance);
      }
      if (ReleaseAngle != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReleaseAngle);
      }
      if (TraceDuration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TraceDuration);
      }
      if (Activate != false) {
        size += 2 + 1;
      }
      if (ActiveConditionType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActiveConditionType1);
      }
      if (ActiveParam1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveParam1);
      }
      if (ActiveParam2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveParam2);
      }
      if (DeActiveConditionType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DeActiveConditionType1);
      }
      if (DeActiveParam1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeActiveParam1);
      }
      if (DeActiveParam2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(DeActiveParam2);
      }
      if (FollowEventType1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FollowEventType1);
      }
      if (FollowEventParam1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FollowEventParam1);
      }
      if (FollowEventType2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FollowEventType2);
      }
      if (FollowEventParam2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FollowEventParam2);
      }
      if (FollowEventType3 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FollowEventType3);
      }
      if (FollowEventParam3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(FollowEventParam3);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(MonsterActionBranch other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.Priority != 0) {
        Priority = other.Priority;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.Rate != 0) {
        Rate = other.Rate;
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      initialCDPool_.Add(other.initialCDPool_);
      if (other.MinInitialCD != 0) {
        MinInitialCD = other.MinInitialCD;
      }
      if (other.MaxInitialCD != 0) {
        MaxInitialCD = other.MaxInitialCD;
      }
      if (other.StartCDTime != 0) {
        StartCDTime = other.StartCDTime;
      }
      if (other.FixedCD != false) {
        FixedCD = other.FixedCD;
      }
      if (other.ReleaseDistance != 0) {
        ReleaseDistance = other.ReleaseDistance;
      }
      if (other.ReleaseAngle != 0) {
        ReleaseAngle = other.ReleaseAngle;
      }
      if (other.TraceDuration != 0) {
        TraceDuration = other.TraceDuration;
      }
      if (other.Activate != false) {
        Activate = other.Activate;
      }
      if (other.ActiveConditionType1 != 0) {
        ActiveConditionType1 = other.ActiveConditionType1;
      }
      if (other.ActiveParam1.Length != 0) {
        ActiveParam1 = other.ActiveParam1;
      }
      if (other.ActiveParam2.Length != 0) {
        ActiveParam2 = other.ActiveParam2;
      }
      if (other.DeActiveConditionType1 != 0) {
        DeActiveConditionType1 = other.DeActiveConditionType1;
      }
      if (other.DeActiveParam1.Length != 0) {
        DeActiveParam1 = other.DeActiveParam1;
      }
      if (other.DeActiveParam2.Length != 0) {
        DeActiveParam2 = other.DeActiveParam2;
      }
      if (other.FollowEventType1 != 0) {
        FollowEventType1 = other.FollowEventType1;
      }
      if (other.FollowEventParam1.Length != 0) {
        FollowEventParam1 = other.FollowEventParam1;
      }
      if (other.FollowEventType2 != 0) {
        FollowEventType2 = other.FollowEventType2;
      }
      if (other.FollowEventParam2.Length != 0) {
        FollowEventParam2 = other.FollowEventParam2;
      }
      if (other.FollowEventType3 != 0) {
        FollowEventType3 = other.FollowEventType3;
      }
      if (other.FollowEventParam3.Length != 0) {
        FollowEventParam3 = other.FollowEventParam3;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 40: {
            Weight = input.ReadInt32();
            break;
          }
          case 48: {
            Rate = input.ReadInt32();
            break;
          }
          case 56: {
            CD = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            initialCDPool_.AddEntriesFrom(input, _repeated_initialCDPool_codec);
            break;
          }
          case 72: {
            MinInitialCD = input.ReadInt32();
            break;
          }
          case 80: {
            MaxInitialCD = input.ReadInt32();
            break;
          }
          case 88: {
            StartCDTime = input.ReadInt32();
            break;
          }
          case 96: {
            FixedCD = input.ReadBool();
            break;
          }
          case 104: {
            ReleaseDistance = input.ReadInt32();
            break;
          }
          case 112: {
            ReleaseAngle = input.ReadInt32();
            break;
          }
          case 120: {
            TraceDuration = input.ReadInt32();
            break;
          }
          case 128: {
            Activate = input.ReadBool();
            break;
          }
          case 136: {
            ActiveConditionType1 = input.ReadInt32();
            break;
          }
          case 146: {
            ActiveParam1 = input.ReadString();
            break;
          }
          case 154: {
            ActiveParam2 = input.ReadString();
            break;
          }
          case 160: {
            DeActiveConditionType1 = input.ReadInt32();
            break;
          }
          case 170: {
            DeActiveParam1 = input.ReadString();
            break;
          }
          case 178: {
            DeActiveParam2 = input.ReadString();
            break;
          }
          case 184: {
            FollowEventType1 = input.ReadInt32();
            break;
          }
          case 194: {
            FollowEventParam1 = input.ReadString();
            break;
          }
          case 200: {
            FollowEventType2 = input.ReadInt32();
            break;
          }
          case 210: {
            FollowEventParam2 = input.ReadString();
            break;
          }
          case 216: {
            FollowEventType3 = input.ReadInt32();
            break;
          }
          case 226: {
            FollowEventParam3 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            SkillId = input.ReadInt32();
            break;
          }
          case 32: {
            Priority = input.ReadInt32();
            break;
          }
          case 40: {
            Weight = input.ReadInt32();
            break;
          }
          case 48: {
            Rate = input.ReadInt32();
            break;
          }
          case 56: {
            CD = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            initialCDPool_.AddEntriesFrom(ref input, _repeated_initialCDPool_codec);
            break;
          }
          case 72: {
            MinInitialCD = input.ReadInt32();
            break;
          }
          case 80: {
            MaxInitialCD = input.ReadInt32();
            break;
          }
          case 88: {
            StartCDTime = input.ReadInt32();
            break;
          }
          case 96: {
            FixedCD = input.ReadBool();
            break;
          }
          case 104: {
            ReleaseDistance = input.ReadInt32();
            break;
          }
          case 112: {
            ReleaseAngle = input.ReadInt32();
            break;
          }
          case 120: {
            TraceDuration = input.ReadInt32();
            break;
          }
          case 128: {
            Activate = input.ReadBool();
            break;
          }
          case 136: {
            ActiveConditionType1 = input.ReadInt32();
            break;
          }
          case 146: {
            ActiveParam1 = input.ReadString();
            break;
          }
          case 154: {
            ActiveParam2 = input.ReadString();
            break;
          }
          case 160: {
            DeActiveConditionType1 = input.ReadInt32();
            break;
          }
          case 170: {
            DeActiveParam1 = input.ReadString();
            break;
          }
          case 178: {
            DeActiveParam2 = input.ReadString();
            break;
          }
          case 184: {
            FollowEventType1 = input.ReadInt32();
            break;
          }
          case 194: {
            FollowEventParam1 = input.ReadString();
            break;
          }
          case 200: {
            FollowEventType2 = input.ReadInt32();
            break;
          }
          case 210: {
            FollowEventParam2 = input.ReadString();
            break;
          }
          case 216: {
            FollowEventType3 = input.ReadInt32();
            break;
          }
          case 226: {
            FollowEventParam3 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
