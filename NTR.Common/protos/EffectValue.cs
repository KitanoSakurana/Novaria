// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: EffectValue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from EffectValue.proto</summary>
  public static partial class EffectValueReflection {

    #region Descriptor
    /// <summary>File descriptor for EffectValue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static EffectValueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFFZmZlY3RWYWx1ZS5wcm90byKhAwoLRWZmZWN0VmFsdWUSCgoCaWQYASAB",
            "KAUSDAoEbmFtZRgCIAEoCRILCgN0YWcYAyABKAkSGQoRdGFrZV9lZmZlY3Rf",
            "bGltaXQYBCABKAUSDgoGcmVtb3ZlGAUgASgIEgsKA2NfZBgGIAEoBRITCgtl",
            "ZmZlY3RfcmF0ZRgHIAEoBRITCgtlZmZlY3RfdHlwZRgIIAEoBRIhChllZmZl",
            "Y3RfdHlwZV9maXJzdF9zdWJ0eXBlGAkgASgFEiIKGmVmZmVjdF90eXBlX3Nl",
            "Y29uZF9zdWJ0eXBlGAogASgFEhoKEmVmZmVjdF90eXBlX3BhcmFtMRgLIAEo",
            "CRIaChJlZmZlY3RfdHlwZV9wYXJhbTIYDCABKAkSGgoSZWZmZWN0X3R5cGVf",
            "cGFyYW0zGA0gASgJEhoKEmVmZmVjdF90eXBlX3BhcmFtNBgOIAEoCRIaChJl",
            "ZmZlY3RfdHlwZV9wYXJhbTUYDyABKAkSGgoSZWZmZWN0X3R5cGVfcGFyYW02",
            "GBAgASgJEhoKEmVmZmVjdF90eXBlX3BhcmFtNxgRIAEoCUIOqgILTm92YS5D",
            "bGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.EffectValue), global::Nova.Client.EffectValue.Parser, new[]{ "Id", "Name", "Tag", "TakeEffectLimit", "Remove", "CD", "EffectRate", "EffectType", "EffectTypeFirstSubtype", "EffectTypeSecondSubtype", "EffectTypeParam1", "EffectTypeParam2", "EffectTypeParam3", "EffectTypeParam4", "EffectTypeParam5", "EffectTypeParam6", "EffectTypeParam7" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class EffectValue : pb::IMessage<EffectValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<EffectValue> _parser = new pb::MessageParser<EffectValue>(() => new EffectValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<EffectValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.EffectValueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EffectValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EffectValue(EffectValue other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      tag_ = other.tag_;
      takeEffectLimit_ = other.takeEffectLimit_;
      remove_ = other.remove_;
      cD_ = other.cD_;
      effectRate_ = other.effectRate_;
      effectType_ = other.effectType_;
      effectTypeFirstSubtype_ = other.effectTypeFirstSubtype_;
      effectTypeSecondSubtype_ = other.effectTypeSecondSubtype_;
      effectTypeParam1_ = other.effectTypeParam1_;
      effectTypeParam2_ = other.effectTypeParam2_;
      effectTypeParam3_ = other.effectTypeParam3_;
      effectTypeParam4_ = other.effectTypeParam4_;
      effectTypeParam5_ = other.effectTypeParam5_;
      effectTypeParam6_ = other.effectTypeParam6_;
      effectTypeParam7_ = other.effectTypeParam7_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public EffectValue Clone() {
      return new EffectValue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag" field.</summary>
    public const int TagFieldNumber = 3;
    private string tag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag {
      get { return tag_; }
      set {
        tag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "take_effect_limit" field.</summary>
    public const int TakeEffectLimitFieldNumber = 4;
    private int takeEffectLimit_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TakeEffectLimit {
      get { return takeEffectLimit_; }
      set {
        takeEffectLimit_ = value;
      }
    }

    /// <summary>Field number for the "remove" field.</summary>
    public const int RemoveFieldNumber = 5;
    private bool remove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Remove {
      get { return remove_; }
      set {
        remove_ = value;
      }
    }

    /// <summary>Field number for the "c_d" field.</summary>
    public const int CDFieldNumber = 6;
    private int cD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CD {
      get { return cD_; }
      set {
        cD_ = value;
      }
    }

    /// <summary>Field number for the "effect_rate" field.</summary>
    public const int EffectRateFieldNumber = 7;
    private int effectRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectRate {
      get { return effectRate_; }
      set {
        effectRate_ = value;
      }
    }

    /// <summary>Field number for the "effect_type" field.</summary>
    public const int EffectTypeFieldNumber = 8;
    private int effectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "effect_type_first_subtype" field.</summary>
    public const int EffectTypeFirstSubtypeFieldNumber = 9;
    private int effectTypeFirstSubtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectTypeFirstSubtype {
      get { return effectTypeFirstSubtype_; }
      set {
        effectTypeFirstSubtype_ = value;
      }
    }

    /// <summary>Field number for the "effect_type_second_subtype" field.</summary>
    public const int EffectTypeSecondSubtypeFieldNumber = 10;
    private int effectTypeSecondSubtype_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectTypeSecondSubtype {
      get { return effectTypeSecondSubtype_; }
      set {
        effectTypeSecondSubtype_ = value;
      }
    }

    /// <summary>Field number for the "effect_type_param1" field.</summary>
    public const int EffectTypeParam1FieldNumber = 11;
    private string effectTypeParam1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam1 {
      get { return effectTypeParam1_; }
      set {
        effectTypeParam1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param2" field.</summary>
    public const int EffectTypeParam2FieldNumber = 12;
    private string effectTypeParam2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam2 {
      get { return effectTypeParam2_; }
      set {
        effectTypeParam2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param3" field.</summary>
    public const int EffectTypeParam3FieldNumber = 13;
    private string effectTypeParam3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam3 {
      get { return effectTypeParam3_; }
      set {
        effectTypeParam3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param4" field.</summary>
    public const int EffectTypeParam4FieldNumber = 14;
    private string effectTypeParam4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam4 {
      get { return effectTypeParam4_; }
      set {
        effectTypeParam4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param5" field.</summary>
    public const int EffectTypeParam5FieldNumber = 15;
    private string effectTypeParam5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam5 {
      get { return effectTypeParam5_; }
      set {
        effectTypeParam5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param6" field.</summary>
    public const int EffectTypeParam6FieldNumber = 16;
    private string effectTypeParam6_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam6 {
      get { return effectTypeParam6_; }
      set {
        effectTypeParam6_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "effect_type_param7" field.</summary>
    public const int EffectTypeParam7FieldNumber = 17;
    private string effectTypeParam7_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string EffectTypeParam7 {
      get { return effectTypeParam7_; }
      set {
        effectTypeParam7_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as EffectValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(EffectValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Tag != other.Tag) return false;
      if (TakeEffectLimit != other.TakeEffectLimit) return false;
      if (Remove != other.Remove) return false;
      if (CD != other.CD) return false;
      if (EffectRate != other.EffectRate) return false;
      if (EffectType != other.EffectType) return false;
      if (EffectTypeFirstSubtype != other.EffectTypeFirstSubtype) return false;
      if (EffectTypeSecondSubtype != other.EffectTypeSecondSubtype) return false;
      if (EffectTypeParam1 != other.EffectTypeParam1) return false;
      if (EffectTypeParam2 != other.EffectTypeParam2) return false;
      if (EffectTypeParam3 != other.EffectTypeParam3) return false;
      if (EffectTypeParam4 != other.EffectTypeParam4) return false;
      if (EffectTypeParam5 != other.EffectTypeParam5) return false;
      if (EffectTypeParam6 != other.EffectTypeParam6) return false;
      if (EffectTypeParam7 != other.EffectTypeParam7) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Tag.Length != 0) hash ^= Tag.GetHashCode();
      if (TakeEffectLimit != 0) hash ^= TakeEffectLimit.GetHashCode();
      if (Remove != false) hash ^= Remove.GetHashCode();
      if (CD != 0) hash ^= CD.GetHashCode();
      if (EffectRate != 0) hash ^= EffectRate.GetHashCode();
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (EffectTypeFirstSubtype != 0) hash ^= EffectTypeFirstSubtype.GetHashCode();
      if (EffectTypeSecondSubtype != 0) hash ^= EffectTypeSecondSubtype.GetHashCode();
      if (EffectTypeParam1.Length != 0) hash ^= EffectTypeParam1.GetHashCode();
      if (EffectTypeParam2.Length != 0) hash ^= EffectTypeParam2.GetHashCode();
      if (EffectTypeParam3.Length != 0) hash ^= EffectTypeParam3.GetHashCode();
      if (EffectTypeParam4.Length != 0) hash ^= EffectTypeParam4.GetHashCode();
      if (EffectTypeParam5.Length != 0) hash ^= EffectTypeParam5.GetHashCode();
      if (EffectTypeParam6.Length != 0) hash ^= EffectTypeParam6.GetHashCode();
      if (EffectTypeParam7.Length != 0) hash ^= EffectTypeParam7.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tag);
      }
      if (TakeEffectLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TakeEffectLimit);
      }
      if (Remove != false) {
        output.WriteRawTag(40);
        output.WriteBool(Remove);
      }
      if (CD != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CD);
      }
      if (EffectRate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EffectRate);
      }
      if (EffectType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EffectType);
      }
      if (EffectTypeFirstSubtype != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EffectTypeFirstSubtype);
      }
      if (EffectTypeSecondSubtype != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EffectTypeSecondSubtype);
      }
      if (EffectTypeParam1.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EffectTypeParam1);
      }
      if (EffectTypeParam2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(EffectTypeParam2);
      }
      if (EffectTypeParam3.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(EffectTypeParam3);
      }
      if (EffectTypeParam4.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EffectTypeParam4);
      }
      if (EffectTypeParam5.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(EffectTypeParam5);
      }
      if (EffectTypeParam6.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(EffectTypeParam6);
      }
      if (EffectTypeParam7.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EffectTypeParam7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Tag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Tag);
      }
      if (TakeEffectLimit != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(TakeEffectLimit);
      }
      if (Remove != false) {
        output.WriteRawTag(40);
        output.WriteBool(Remove);
      }
      if (CD != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(CD);
      }
      if (EffectRate != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(EffectRate);
      }
      if (EffectType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(EffectType);
      }
      if (EffectTypeFirstSubtype != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EffectTypeFirstSubtype);
      }
      if (EffectTypeSecondSubtype != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(EffectTypeSecondSubtype);
      }
      if (EffectTypeParam1.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(EffectTypeParam1);
      }
      if (EffectTypeParam2.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(EffectTypeParam2);
      }
      if (EffectTypeParam3.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(EffectTypeParam3);
      }
      if (EffectTypeParam4.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(EffectTypeParam4);
      }
      if (EffectTypeParam5.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(EffectTypeParam5);
      }
      if (EffectTypeParam6.Length != 0) {
        output.WriteRawTag(130, 1);
        output.WriteString(EffectTypeParam6);
      }
      if (EffectTypeParam7.Length != 0) {
        output.WriteRawTag(138, 1);
        output.WriteString(EffectTypeParam7);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Tag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Tag);
      }
      if (TakeEffectLimit != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TakeEffectLimit);
      }
      if (Remove != false) {
        size += 1 + 1;
      }
      if (CD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CD);
      }
      if (EffectRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectRate);
      }
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectType);
      }
      if (EffectTypeFirstSubtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectTypeFirstSubtype);
      }
      if (EffectTypeSecondSubtype != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectTypeSecondSubtype);
      }
      if (EffectTypeParam1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam1);
      }
      if (EffectTypeParam2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam2);
      }
      if (EffectTypeParam3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam3);
      }
      if (EffectTypeParam4.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam4);
      }
      if (EffectTypeParam5.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam5);
      }
      if (EffectTypeParam6.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam6);
      }
      if (EffectTypeParam7.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(EffectTypeParam7);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(EffectValue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Tag.Length != 0) {
        Tag = other.Tag;
      }
      if (other.TakeEffectLimit != 0) {
        TakeEffectLimit = other.TakeEffectLimit;
      }
      if (other.Remove != false) {
        Remove = other.Remove;
      }
      if (other.CD != 0) {
        CD = other.CD;
      }
      if (other.EffectRate != 0) {
        EffectRate = other.EffectRate;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.EffectTypeFirstSubtype != 0) {
        EffectTypeFirstSubtype = other.EffectTypeFirstSubtype;
      }
      if (other.EffectTypeSecondSubtype != 0) {
        EffectTypeSecondSubtype = other.EffectTypeSecondSubtype;
      }
      if (other.EffectTypeParam1.Length != 0) {
        EffectTypeParam1 = other.EffectTypeParam1;
      }
      if (other.EffectTypeParam2.Length != 0) {
        EffectTypeParam2 = other.EffectTypeParam2;
      }
      if (other.EffectTypeParam3.Length != 0) {
        EffectTypeParam3 = other.EffectTypeParam3;
      }
      if (other.EffectTypeParam4.Length != 0) {
        EffectTypeParam4 = other.EffectTypeParam4;
      }
      if (other.EffectTypeParam5.Length != 0) {
        EffectTypeParam5 = other.EffectTypeParam5;
      }
      if (other.EffectTypeParam6.Length != 0) {
        EffectTypeParam6 = other.EffectTypeParam6;
      }
      if (other.EffectTypeParam7.Length != 0) {
        EffectTypeParam7 = other.EffectTypeParam7;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Tag = input.ReadString();
            break;
          }
          case 32: {
            TakeEffectLimit = input.ReadInt32();
            break;
          }
          case 40: {
            Remove = input.ReadBool();
            break;
          }
          case 48: {
            CD = input.ReadInt32();
            break;
          }
          case 56: {
            EffectRate = input.ReadInt32();
            break;
          }
          case 64: {
            EffectType = input.ReadInt32();
            break;
          }
          case 72: {
            EffectTypeFirstSubtype = input.ReadInt32();
            break;
          }
          case 80: {
            EffectTypeSecondSubtype = input.ReadInt32();
            break;
          }
          case 90: {
            EffectTypeParam1 = input.ReadString();
            break;
          }
          case 98: {
            EffectTypeParam2 = input.ReadString();
            break;
          }
          case 106: {
            EffectTypeParam3 = input.ReadString();
            break;
          }
          case 114: {
            EffectTypeParam4 = input.ReadString();
            break;
          }
          case 122: {
            EffectTypeParam5 = input.ReadString();
            break;
          }
          case 130: {
            EffectTypeParam6 = input.ReadString();
            break;
          }
          case 138: {
            EffectTypeParam7 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Tag = input.ReadString();
            break;
          }
          case 32: {
            TakeEffectLimit = input.ReadInt32();
            break;
          }
          case 40: {
            Remove = input.ReadBool();
            break;
          }
          case 48: {
            CD = input.ReadInt32();
            break;
          }
          case 56: {
            EffectRate = input.ReadInt32();
            break;
          }
          case 64: {
            EffectType = input.ReadInt32();
            break;
          }
          case 72: {
            EffectTypeFirstSubtype = input.ReadInt32();
            break;
          }
          case 80: {
            EffectTypeSecondSubtype = input.ReadInt32();
            break;
          }
          case 90: {
            EffectTypeParam1 = input.ReadString();
            break;
          }
          case 98: {
            EffectTypeParam2 = input.ReadString();
            break;
          }
          case 106: {
            EffectTypeParam3 = input.ReadString();
            break;
          }
          case 114: {
            EffectTypeParam4 = input.ReadString();
            break;
          }
          case 122: {
            EffectTypeParam5 = input.ReadString();
            break;
          }
          case 130: {
            EffectTypeParam6 = input.ReadString();
            break;
          }
          case 138: {
            EffectTypeParam7 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
