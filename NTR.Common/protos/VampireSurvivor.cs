// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VampireSurvivor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from VampireSurvivor.proto</summary>
  public static partial class VampireSurvivorReflection {

    #region Descriptor
    /// <summary>File descriptor for VampireSurvivor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VampireSurvivorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVWYW1waXJlU3Vydml2b3IucHJvdG8i9gUKD1ZhbXBpcmVTdXJ2aXZvchIK",
            "CgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEgwKBGRlc2MYAyABKAkSDQoFZV9l",
            "X3QYBCADKAUSEQoJbm90X2VfZV90GAUgAygFEhcKD3N1Z2dlc3RlZF9wb3dl",
            "chgGIAEoBRIcChRyZWNvbW1lbmRfYnVpbGRfcmFuaxgHIAEoBRIMCgR0eXBl",
            "GAggASgFEhQKDHByZV9sZXZlbF9pZBgJIAEoBRIYChBuZWVkX3dvcmxkX2Ns",
            "YXNzGAogASgFEhwKFGZpcnN0X3F1ZXN0X2dyb3VwX2lkGAsgASgFEhYKDmxl",
            "dmVsX2dyb3VwX2lkGAwgASgFEhAKCGZsb29yX2lkGA0gASgFEhUKDW5vcm1h",
            "bF9zY29yZTEYDiABKAUSFAoMZWxpdGVfc2NvcmUxGA8gASgFEhMKC2Jvc3Nf",
            "c2NvcmUxGBAgASgFEhMKC3RpbWVfc2NvcmUxGBEgASgFEhMKC3RpbWVfbGlt",
            "aXQxGBIgASgFEhUKDW5vcm1hbF9zY29yZTIYEyABKAUSFAoMZWxpdGVfc2Nv",
            "cmUyGBQgASgFEhMKC2Jvc3Nfc2NvcmUyGBUgASgFEhMKC3RpbWVfc2NvcmUy",
            "GBYgASgFEhMKC3RpbWVfbGltaXQyGBcgASgFEhQKDGVfZV90X3Njb3JlMRgY",
            "IAMoBRIUCgxlX2VfdF9zY29yZTIYGSADKAUSJAocZl9oX3ByZXZpZXdfbW9u",
            "c3Rlcl9ncm91cF9pZBgaIAEoBRIkChxzX2hfcHJldmlld19tb25zdGVyX2dy",
            "b3VwX2lkGBsgASgFEhUKDWNvdmVyX2VwaXNvZGUYHCABKAkSDwoHZXBpc29k",
            "ZRgdIAEoCRIQCghlcGlzb2RlMhgeIAEoCRIYChBmYXRlX2NhcmRfYnVuZGxl",
            "GB8gAygFEhgKEHNwZWNpYV9mYXRlX2NhcmQYICABKAkSHgoWc3BlY2lhX2Zh",
            "dGVfY2FyZF9wYXJhbRghIAEoCUIOqgILTm92YS5DbGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.VampireSurvivor), global::Nova.Client.VampireSurvivor.Parser, new[]{ "Id", "Name", "Desc", "EET", "NotEET", "SuggestedPower", "RecommendBuildRank", "Type", "PreLevelId", "NeedWorldClass", "FirstQuestGroupId", "LevelGroupId", "FloorId", "NormalScore1", "EliteScore1", "BossScore1", "TimeScore1", "TimeLimit1", "NormalScore2", "EliteScore2", "BossScore2", "TimeScore2", "TimeLimit2", "EETScore1", "EETScore2", "FHPreviewMonsterGroupId", "SHPreviewMonsterGroupId", "CoverEpisode", "Episode", "Episode2", "FateCardBundle", "SpeciaFateCard", "SpeciaFateCardParam" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class VampireSurvivor : pb::IMessage<VampireSurvivor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VampireSurvivor> _parser = new pb::MessageParser<VampireSurvivor>(() => new VampireSurvivor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VampireSurvivor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.VampireSurvivorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireSurvivor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireSurvivor(VampireSurvivor other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      desc_ = other.desc_;
      eET_ = other.eET_.Clone();
      notEET_ = other.notEET_.Clone();
      suggestedPower_ = other.suggestedPower_;
      recommendBuildRank_ = other.recommendBuildRank_;
      type_ = other.type_;
      preLevelId_ = other.preLevelId_;
      needWorldClass_ = other.needWorldClass_;
      firstQuestGroupId_ = other.firstQuestGroupId_;
      levelGroupId_ = other.levelGroupId_;
      floorId_ = other.floorId_;
      normalScore1_ = other.normalScore1_;
      eliteScore1_ = other.eliteScore1_;
      bossScore1_ = other.bossScore1_;
      timeScore1_ = other.timeScore1_;
      timeLimit1_ = other.timeLimit1_;
      normalScore2_ = other.normalScore2_;
      eliteScore2_ = other.eliteScore2_;
      bossScore2_ = other.bossScore2_;
      timeScore2_ = other.timeScore2_;
      timeLimit2_ = other.timeLimit2_;
      eETScore1_ = other.eETScore1_.Clone();
      eETScore2_ = other.eETScore2_.Clone();
      fHPreviewMonsterGroupId_ = other.fHPreviewMonsterGroupId_;
      sHPreviewMonsterGroupId_ = other.sHPreviewMonsterGroupId_;
      coverEpisode_ = other.coverEpisode_;
      episode_ = other.episode_;
      episode2_ = other.episode2_;
      fateCardBundle_ = other.fateCardBundle_.Clone();
      speciaFateCard_ = other.speciaFateCard_;
      speciaFateCardParam_ = other.speciaFateCardParam_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireSurvivor Clone() {
      return new VampireSurvivor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "e_e_t" field.</summary>
    public const int EETFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_eET_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> eET_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> EET {
      get { return eET_; }
    }

    /// <summary>Field number for the "not_e_e_t" field.</summary>
    public const int NotEETFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_notEET_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> notEET_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> NotEET {
      get { return notEET_; }
    }

    /// <summary>Field number for the "suggested_power" field.</summary>
    public const int SuggestedPowerFieldNumber = 6;
    private int suggestedPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SuggestedPower {
      get { return suggestedPower_; }
      set {
        suggestedPower_ = value;
      }
    }

    /// <summary>Field number for the "recommend_build_rank" field.</summary>
    public const int RecommendBuildRankFieldNumber = 7;
    private int recommendBuildRank_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RecommendBuildRank {
      get { return recommendBuildRank_; }
      set {
        recommendBuildRank_ = value;
      }
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 8;
    private int type_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "pre_level_id" field.</summary>
    public const int PreLevelIdFieldNumber = 9;
    private int preLevelId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PreLevelId {
      get { return preLevelId_; }
      set {
        preLevelId_ = value;
      }
    }

    /// <summary>Field number for the "need_world_class" field.</summary>
    public const int NeedWorldClassFieldNumber = 10;
    private int needWorldClass_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NeedWorldClass {
      get { return needWorldClass_; }
      set {
        needWorldClass_ = value;
      }
    }

    /// <summary>Field number for the "first_quest_group_id" field.</summary>
    public const int FirstQuestGroupIdFieldNumber = 11;
    private int firstQuestGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirstQuestGroupId {
      get { return firstQuestGroupId_; }
      set {
        firstQuestGroupId_ = value;
      }
    }

    /// <summary>Field number for the "level_group_id" field.</summary>
    public const int LevelGroupIdFieldNumber = 12;
    private int levelGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelGroupId {
      get { return levelGroupId_; }
      set {
        levelGroupId_ = value;
      }
    }

    /// <summary>Field number for the "floor_id" field.</summary>
    public const int FloorIdFieldNumber = 13;
    private int floorId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FloorId {
      get { return floorId_; }
      set {
        floorId_ = value;
      }
    }

    /// <summary>Field number for the "normal_score1" field.</summary>
    public const int NormalScore1FieldNumber = 14;
    private int normalScore1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalScore1 {
      get { return normalScore1_; }
      set {
        normalScore1_ = value;
      }
    }

    /// <summary>Field number for the "elite_score1" field.</summary>
    public const int EliteScore1FieldNumber = 15;
    private int eliteScore1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EliteScore1 {
      get { return eliteScore1_; }
      set {
        eliteScore1_ = value;
      }
    }

    /// <summary>Field number for the "boss_score1" field.</summary>
    public const int BossScore1FieldNumber = 16;
    private int bossScore1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BossScore1 {
      get { return bossScore1_; }
      set {
        bossScore1_ = value;
      }
    }

    /// <summary>Field number for the "time_score1" field.</summary>
    public const int TimeScore1FieldNumber = 17;
    private int timeScore1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeScore1 {
      get { return timeScore1_; }
      set {
        timeScore1_ = value;
      }
    }

    /// <summary>Field number for the "time_limit1" field.</summary>
    public const int TimeLimit1FieldNumber = 18;
    private int timeLimit1_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeLimit1 {
      get { return timeLimit1_; }
      set {
        timeLimit1_ = value;
      }
    }

    /// <summary>Field number for the "normal_score2" field.</summary>
    public const int NormalScore2FieldNumber = 19;
    private int normalScore2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalScore2 {
      get { return normalScore2_; }
      set {
        normalScore2_ = value;
      }
    }

    /// <summary>Field number for the "elite_score2" field.</summary>
    public const int EliteScore2FieldNumber = 20;
    private int eliteScore2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EliteScore2 {
      get { return eliteScore2_; }
      set {
        eliteScore2_ = value;
      }
    }

    /// <summary>Field number for the "boss_score2" field.</summary>
    public const int BossScore2FieldNumber = 21;
    private int bossScore2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BossScore2 {
      get { return bossScore2_; }
      set {
        bossScore2_ = value;
      }
    }

    /// <summary>Field number for the "time_score2" field.</summary>
    public const int TimeScore2FieldNumber = 22;
    private int timeScore2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeScore2 {
      get { return timeScore2_; }
      set {
        timeScore2_ = value;
      }
    }

    /// <summary>Field number for the "time_limit2" field.</summary>
    public const int TimeLimit2FieldNumber = 23;
    private int timeLimit2_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeLimit2 {
      get { return timeLimit2_; }
      set {
        timeLimit2_ = value;
      }
    }

    /// <summary>Field number for the "e_e_t_score1" field.</summary>
    public const int EETScore1FieldNumber = 24;
    private static readonly pb::FieldCodec<int> _repeated_eETScore1_codec
        = pb::FieldCodec.ForInt32(194);
    private readonly pbc::RepeatedField<int> eETScore1_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> EETScore1 {
      get { return eETScore1_; }
    }

    /// <summary>Field number for the "e_e_t_score2" field.</summary>
    public const int EETScore2FieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_eETScore2_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> eETScore2_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> EETScore2 {
      get { return eETScore2_; }
    }

    /// <summary>Field number for the "f_h_preview_monster_group_id" field.</summary>
    public const int FHPreviewMonsterGroupIdFieldNumber = 26;
    private int fHPreviewMonsterGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FHPreviewMonsterGroupId {
      get { return fHPreviewMonsterGroupId_; }
      set {
        fHPreviewMonsterGroupId_ = value;
      }
    }

    /// <summary>Field number for the "s_h_preview_monster_group_id" field.</summary>
    public const int SHPreviewMonsterGroupIdFieldNumber = 27;
    private int sHPreviewMonsterGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SHPreviewMonsterGroupId {
      get { return sHPreviewMonsterGroupId_; }
      set {
        sHPreviewMonsterGroupId_ = value;
      }
    }

    /// <summary>Field number for the "cover_episode" field.</summary>
    public const int CoverEpisodeFieldNumber = 28;
    private string coverEpisode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string CoverEpisode {
      get { return coverEpisode_; }
      set {
        coverEpisode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "episode" field.</summary>
    public const int EpisodeFieldNumber = 29;
    private string episode_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Episode {
      get { return episode_; }
      set {
        episode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "episode2" field.</summary>
    public const int Episode2FieldNumber = 30;
    private string episode2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Episode2 {
      get { return episode2_; }
      set {
        episode2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "fate_card_bundle" field.</summary>
    public const int FateCardBundleFieldNumber = 31;
    private static readonly pb::FieldCodec<int> _repeated_fateCardBundle_codec
        = pb::FieldCodec.ForInt32(250);
    private readonly pbc::RepeatedField<int> fateCardBundle_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> FateCardBundle {
      get { return fateCardBundle_; }
    }

    /// <summary>Field number for the "specia_fate_card" field.</summary>
    public const int SpeciaFateCardFieldNumber = 32;
    private string speciaFateCard_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciaFateCard {
      get { return speciaFateCard_; }
      set {
        speciaFateCard_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "specia_fate_card_param" field.</summary>
    public const int SpeciaFateCardParamFieldNumber = 33;
    private string speciaFateCardParam_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpeciaFateCardParam {
      get { return speciaFateCardParam_; }
      set {
        speciaFateCardParam_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VampireSurvivor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VampireSurvivor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if(!eET_.Equals(other.eET_)) return false;
      if(!notEET_.Equals(other.notEET_)) return false;
      if (SuggestedPower != other.SuggestedPower) return false;
      if (RecommendBuildRank != other.RecommendBuildRank) return false;
      if (Type != other.Type) return false;
      if (PreLevelId != other.PreLevelId) return false;
      if (NeedWorldClass != other.NeedWorldClass) return false;
      if (FirstQuestGroupId != other.FirstQuestGroupId) return false;
      if (LevelGroupId != other.LevelGroupId) return false;
      if (FloorId != other.FloorId) return false;
      if (NormalScore1 != other.NormalScore1) return false;
      if (EliteScore1 != other.EliteScore1) return false;
      if (BossScore1 != other.BossScore1) return false;
      if (TimeScore1 != other.TimeScore1) return false;
      if (TimeLimit1 != other.TimeLimit1) return false;
      if (NormalScore2 != other.NormalScore2) return false;
      if (EliteScore2 != other.EliteScore2) return false;
      if (BossScore2 != other.BossScore2) return false;
      if (TimeScore2 != other.TimeScore2) return false;
      if (TimeLimit2 != other.TimeLimit2) return false;
      if(!eETScore1_.Equals(other.eETScore1_)) return false;
      if(!eETScore2_.Equals(other.eETScore2_)) return false;
      if (FHPreviewMonsterGroupId != other.FHPreviewMonsterGroupId) return false;
      if (SHPreviewMonsterGroupId != other.SHPreviewMonsterGroupId) return false;
      if (CoverEpisode != other.CoverEpisode) return false;
      if (Episode != other.Episode) return false;
      if (Episode2 != other.Episode2) return false;
      if(!fateCardBundle_.Equals(other.fateCardBundle_)) return false;
      if (SpeciaFateCard != other.SpeciaFateCard) return false;
      if (SpeciaFateCardParam != other.SpeciaFateCardParam) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      hash ^= eET_.GetHashCode();
      hash ^= notEET_.GetHashCode();
      if (SuggestedPower != 0) hash ^= SuggestedPower.GetHashCode();
      if (RecommendBuildRank != 0) hash ^= RecommendBuildRank.GetHashCode();
      if (Type != 0) hash ^= Type.GetHashCode();
      if (PreLevelId != 0) hash ^= PreLevelId.GetHashCode();
      if (NeedWorldClass != 0) hash ^= NeedWorldClass.GetHashCode();
      if (FirstQuestGroupId != 0) hash ^= FirstQuestGroupId.GetHashCode();
      if (LevelGroupId != 0) hash ^= LevelGroupId.GetHashCode();
      if (FloorId != 0) hash ^= FloorId.GetHashCode();
      if (NormalScore1 != 0) hash ^= NormalScore1.GetHashCode();
      if (EliteScore1 != 0) hash ^= EliteScore1.GetHashCode();
      if (BossScore1 != 0) hash ^= BossScore1.GetHashCode();
      if (TimeScore1 != 0) hash ^= TimeScore1.GetHashCode();
      if (TimeLimit1 != 0) hash ^= TimeLimit1.GetHashCode();
      if (NormalScore2 != 0) hash ^= NormalScore2.GetHashCode();
      if (EliteScore2 != 0) hash ^= EliteScore2.GetHashCode();
      if (BossScore2 != 0) hash ^= BossScore2.GetHashCode();
      if (TimeScore2 != 0) hash ^= TimeScore2.GetHashCode();
      if (TimeLimit2 != 0) hash ^= TimeLimit2.GetHashCode();
      hash ^= eETScore1_.GetHashCode();
      hash ^= eETScore2_.GetHashCode();
      if (FHPreviewMonsterGroupId != 0) hash ^= FHPreviewMonsterGroupId.GetHashCode();
      if (SHPreviewMonsterGroupId != 0) hash ^= SHPreviewMonsterGroupId.GetHashCode();
      if (CoverEpisode.Length != 0) hash ^= CoverEpisode.GetHashCode();
      if (Episode.Length != 0) hash ^= Episode.GetHashCode();
      if (Episode2.Length != 0) hash ^= Episode2.GetHashCode();
      hash ^= fateCardBundle_.GetHashCode();
      if (SpeciaFateCard.Length != 0) hash ^= SpeciaFateCard.GetHashCode();
      if (SpeciaFateCardParam.Length != 0) hash ^= SpeciaFateCardParam.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      eET_.WriteTo(output, _repeated_eET_codec);
      notEET_.WriteTo(output, _repeated_notEET_codec);
      if (SuggestedPower != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SuggestedPower);
      }
      if (RecommendBuildRank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecommendBuildRank);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (PreLevelId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PreLevelId);
      }
      if (NeedWorldClass != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NeedWorldClass);
      }
      if (FirstQuestGroupId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FirstQuestGroupId);
      }
      if (LevelGroupId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LevelGroupId);
      }
      if (FloorId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FloorId);
      }
      if (NormalScore1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NormalScore1);
      }
      if (EliteScore1 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EliteScore1);
      }
      if (BossScore1 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BossScore1);
      }
      if (TimeScore1 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TimeScore1);
      }
      if (TimeLimit1 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TimeLimit1);
      }
      if (NormalScore2 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NormalScore2);
      }
      if (EliteScore2 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EliteScore2);
      }
      if (BossScore2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BossScore2);
      }
      if (TimeScore2 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TimeScore2);
      }
      if (TimeLimit2 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TimeLimit2);
      }
      eETScore1_.WriteTo(output, _repeated_eETScore1_codec);
      eETScore2_.WriteTo(output, _repeated_eETScore2_codec);
      if (FHPreviewMonsterGroupId != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(FHPreviewMonsterGroupId);
      }
      if (SHPreviewMonsterGroupId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SHPreviewMonsterGroupId);
      }
      if (CoverEpisode.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(CoverEpisode);
      }
      if (Episode.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Episode);
      }
      if (Episode2.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Episode2);
      }
      fateCardBundle_.WriteTo(output, _repeated_fateCardBundle_codec);
      if (SpeciaFateCard.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SpeciaFateCard);
      }
      if (SpeciaFateCardParam.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(SpeciaFateCardParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      eET_.WriteTo(ref output, _repeated_eET_codec);
      notEET_.WriteTo(ref output, _repeated_notEET_codec);
      if (SuggestedPower != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(SuggestedPower);
      }
      if (RecommendBuildRank != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(RecommendBuildRank);
      }
      if (Type != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(Type);
      }
      if (PreLevelId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(PreLevelId);
      }
      if (NeedWorldClass != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(NeedWorldClass);
      }
      if (FirstQuestGroupId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FirstQuestGroupId);
      }
      if (LevelGroupId != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(LevelGroupId);
      }
      if (FloorId != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(FloorId);
      }
      if (NormalScore1 != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(NormalScore1);
      }
      if (EliteScore1 != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(EliteScore1);
      }
      if (BossScore1 != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(BossScore1);
      }
      if (TimeScore1 != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(TimeScore1);
      }
      if (TimeLimit1 != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(TimeLimit1);
      }
      if (NormalScore2 != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NormalScore2);
      }
      if (EliteScore2 != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EliteScore2);
      }
      if (BossScore2 != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(BossScore2);
      }
      if (TimeScore2 != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(TimeScore2);
      }
      if (TimeLimit2 != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(TimeLimit2);
      }
      eETScore1_.WriteTo(ref output, _repeated_eETScore1_codec);
      eETScore2_.WriteTo(ref output, _repeated_eETScore2_codec);
      if (FHPreviewMonsterGroupId != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(FHPreviewMonsterGroupId);
      }
      if (SHPreviewMonsterGroupId != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(SHPreviewMonsterGroupId);
      }
      if (CoverEpisode.Length != 0) {
        output.WriteRawTag(226, 1);
        output.WriteString(CoverEpisode);
      }
      if (Episode.Length != 0) {
        output.WriteRawTag(234, 1);
        output.WriteString(Episode);
      }
      if (Episode2.Length != 0) {
        output.WriteRawTag(242, 1);
        output.WriteString(Episode2);
      }
      fateCardBundle_.WriteTo(ref output, _repeated_fateCardBundle_codec);
      if (SpeciaFateCard.Length != 0) {
        output.WriteRawTag(130, 2);
        output.WriteString(SpeciaFateCard);
      }
      if (SpeciaFateCardParam.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(SpeciaFateCardParam);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      size += eET_.CalculateSize(_repeated_eET_codec);
      size += notEET_.CalculateSize(_repeated_notEET_codec);
      if (SuggestedPower != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SuggestedPower);
      }
      if (RecommendBuildRank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RecommendBuildRank);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Type);
      }
      if (PreLevelId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PreLevelId);
      }
      if (NeedWorldClass != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NeedWorldClass);
      }
      if (FirstQuestGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstQuestGroupId);
      }
      if (LevelGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelGroupId);
      }
      if (FloorId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FloorId);
      }
      if (NormalScore1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalScore1);
      }
      if (EliteScore1 != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EliteScore1);
      }
      if (BossScore1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BossScore1);
      }
      if (TimeScore1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeScore1);
      }
      if (TimeLimit1 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeLimit1);
      }
      if (NormalScore2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalScore2);
      }
      if (EliteScore2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EliteScore2);
      }
      if (BossScore2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BossScore2);
      }
      if (TimeScore2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeScore2);
      }
      if (TimeLimit2 != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TimeLimit2);
      }
      size += eETScore1_.CalculateSize(_repeated_eETScore1_codec);
      size += eETScore2_.CalculateSize(_repeated_eETScore2_codec);
      if (FHPreviewMonsterGroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FHPreviewMonsterGroupId);
      }
      if (SHPreviewMonsterGroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SHPreviewMonsterGroupId);
      }
      if (CoverEpisode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(CoverEpisode);
      }
      if (Episode.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Episode);
      }
      if (Episode2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Episode2);
      }
      size += fateCardBundle_.CalculateSize(_repeated_fateCardBundle_codec);
      if (SpeciaFateCard.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpeciaFateCard);
      }
      if (SpeciaFateCardParam.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SpeciaFateCardParam);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VampireSurvivor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      eET_.Add(other.eET_);
      notEET_.Add(other.notEET_);
      if (other.SuggestedPower != 0) {
        SuggestedPower = other.SuggestedPower;
      }
      if (other.RecommendBuildRank != 0) {
        RecommendBuildRank = other.RecommendBuildRank;
      }
      if (other.Type != 0) {
        Type = other.Type;
      }
      if (other.PreLevelId != 0) {
        PreLevelId = other.PreLevelId;
      }
      if (other.NeedWorldClass != 0) {
        NeedWorldClass = other.NeedWorldClass;
      }
      if (other.FirstQuestGroupId != 0) {
        FirstQuestGroupId = other.FirstQuestGroupId;
      }
      if (other.LevelGroupId != 0) {
        LevelGroupId = other.LevelGroupId;
      }
      if (other.FloorId != 0) {
        FloorId = other.FloorId;
      }
      if (other.NormalScore1 != 0) {
        NormalScore1 = other.NormalScore1;
      }
      if (other.EliteScore1 != 0) {
        EliteScore1 = other.EliteScore1;
      }
      if (other.BossScore1 != 0) {
        BossScore1 = other.BossScore1;
      }
      if (other.TimeScore1 != 0) {
        TimeScore1 = other.TimeScore1;
      }
      if (other.TimeLimit1 != 0) {
        TimeLimit1 = other.TimeLimit1;
      }
      if (other.NormalScore2 != 0) {
        NormalScore2 = other.NormalScore2;
      }
      if (other.EliteScore2 != 0) {
        EliteScore2 = other.EliteScore2;
      }
      if (other.BossScore2 != 0) {
        BossScore2 = other.BossScore2;
      }
      if (other.TimeScore2 != 0) {
        TimeScore2 = other.TimeScore2;
      }
      if (other.TimeLimit2 != 0) {
        TimeLimit2 = other.TimeLimit2;
      }
      eETScore1_.Add(other.eETScore1_);
      eETScore2_.Add(other.eETScore2_);
      if (other.FHPreviewMonsterGroupId != 0) {
        FHPreviewMonsterGroupId = other.FHPreviewMonsterGroupId;
      }
      if (other.SHPreviewMonsterGroupId != 0) {
        SHPreviewMonsterGroupId = other.SHPreviewMonsterGroupId;
      }
      if (other.CoverEpisode.Length != 0) {
        CoverEpisode = other.CoverEpisode;
      }
      if (other.Episode.Length != 0) {
        Episode = other.Episode;
      }
      if (other.Episode2.Length != 0) {
        Episode2 = other.Episode2;
      }
      fateCardBundle_.Add(other.fateCardBundle_);
      if (other.SpeciaFateCard.Length != 0) {
        SpeciaFateCard = other.SpeciaFateCard;
      }
      if (other.SpeciaFateCardParam.Length != 0) {
        SpeciaFateCardParam = other.SpeciaFateCardParam;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            eET_.AddEntriesFrom(input, _repeated_eET_codec);
            break;
          }
          case 42:
          case 40: {
            notEET_.AddEntriesFrom(input, _repeated_notEET_codec);
            break;
          }
          case 48: {
            SuggestedPower = input.ReadInt32();
            break;
          }
          case 56: {
            RecommendBuildRank = input.ReadInt32();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 72: {
            PreLevelId = input.ReadInt32();
            break;
          }
          case 80: {
            NeedWorldClass = input.ReadInt32();
            break;
          }
          case 88: {
            FirstQuestGroupId = input.ReadInt32();
            break;
          }
          case 96: {
            LevelGroupId = input.ReadInt32();
            break;
          }
          case 104: {
            FloorId = input.ReadInt32();
            break;
          }
          case 112: {
            NormalScore1 = input.ReadInt32();
            break;
          }
          case 120: {
            EliteScore1 = input.ReadInt32();
            break;
          }
          case 128: {
            BossScore1 = input.ReadInt32();
            break;
          }
          case 136: {
            TimeScore1 = input.ReadInt32();
            break;
          }
          case 144: {
            TimeLimit1 = input.ReadInt32();
            break;
          }
          case 152: {
            NormalScore2 = input.ReadInt32();
            break;
          }
          case 160: {
            EliteScore2 = input.ReadInt32();
            break;
          }
          case 168: {
            BossScore2 = input.ReadInt32();
            break;
          }
          case 176: {
            TimeScore2 = input.ReadInt32();
            break;
          }
          case 184: {
            TimeLimit2 = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            eETScore1_.AddEntriesFrom(input, _repeated_eETScore1_codec);
            break;
          }
          case 202:
          case 200: {
            eETScore2_.AddEntriesFrom(input, _repeated_eETScore2_codec);
            break;
          }
          case 208: {
            FHPreviewMonsterGroupId = input.ReadInt32();
            break;
          }
          case 216: {
            SHPreviewMonsterGroupId = input.ReadInt32();
            break;
          }
          case 226: {
            CoverEpisode = input.ReadString();
            break;
          }
          case 234: {
            Episode = input.ReadString();
            break;
          }
          case 242: {
            Episode2 = input.ReadString();
            break;
          }
          case 250:
          case 248: {
            fateCardBundle_.AddEntriesFrom(input, _repeated_fateCardBundle_codec);
            break;
          }
          case 258: {
            SpeciaFateCard = input.ReadString();
            break;
          }
          case 266: {
            SpeciaFateCardParam = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34:
          case 32: {
            eET_.AddEntriesFrom(ref input, _repeated_eET_codec);
            break;
          }
          case 42:
          case 40: {
            notEET_.AddEntriesFrom(ref input, _repeated_notEET_codec);
            break;
          }
          case 48: {
            SuggestedPower = input.ReadInt32();
            break;
          }
          case 56: {
            RecommendBuildRank = input.ReadInt32();
            break;
          }
          case 64: {
            Type = input.ReadInt32();
            break;
          }
          case 72: {
            PreLevelId = input.ReadInt32();
            break;
          }
          case 80: {
            NeedWorldClass = input.ReadInt32();
            break;
          }
          case 88: {
            FirstQuestGroupId = input.ReadInt32();
            break;
          }
          case 96: {
            LevelGroupId = input.ReadInt32();
            break;
          }
          case 104: {
            FloorId = input.ReadInt32();
            break;
          }
          case 112: {
            NormalScore1 = input.ReadInt32();
            break;
          }
          case 120: {
            EliteScore1 = input.ReadInt32();
            break;
          }
          case 128: {
            BossScore1 = input.ReadInt32();
            break;
          }
          case 136: {
            TimeScore1 = input.ReadInt32();
            break;
          }
          case 144: {
            TimeLimit1 = input.ReadInt32();
            break;
          }
          case 152: {
            NormalScore2 = input.ReadInt32();
            break;
          }
          case 160: {
            EliteScore2 = input.ReadInt32();
            break;
          }
          case 168: {
            BossScore2 = input.ReadInt32();
            break;
          }
          case 176: {
            TimeScore2 = input.ReadInt32();
            break;
          }
          case 184: {
            TimeLimit2 = input.ReadInt32();
            break;
          }
          case 194:
          case 192: {
            eETScore1_.AddEntriesFrom(ref input, _repeated_eETScore1_codec);
            break;
          }
          case 202:
          case 200: {
            eETScore2_.AddEntriesFrom(ref input, _repeated_eETScore2_codec);
            break;
          }
          case 208: {
            FHPreviewMonsterGroupId = input.ReadInt32();
            break;
          }
          case 216: {
            SHPreviewMonsterGroupId = input.ReadInt32();
            break;
          }
          case 226: {
            CoverEpisode = input.ReadString();
            break;
          }
          case 234: {
            Episode = input.ReadString();
            break;
          }
          case 242: {
            Episode2 = input.ReadString();
            break;
          }
          case 250:
          case 248: {
            fateCardBundle_.AddEntriesFrom(ref input, _repeated_fateCardBundle_codec);
            break;
          }
          case 258: {
            SpeciaFateCard = input.ReadString();
            break;
          }
          case 266: {
            SpeciaFateCardParam = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
