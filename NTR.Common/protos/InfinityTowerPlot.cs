// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InfinityTowerPlot.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from InfinityTowerPlot.proto</summary>
  public static partial class InfinityTowerPlotReflection {

    #region Descriptor
    /// <summary>File descriptor for InfinityTowerPlot.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfinityTowerPlotReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdJbmZpbml0eVRvd2VyUGxvdC5wcm90byLIAQoRSW5maW5pdHlUb3dlclBs",
            "b3QSCgoCaWQYASABKAUSDAoEbmFtZRgCIAEoCRIMCgRkZXNjGAMgASgJEhAK",
            "CHBsb3Rfc3VtGAQgASgJEg8KB3Bsb3RfaWQYBSABKAUSDgoGYXZnX2lkGAYg",
            "ASgJEhMKC3VubG9ja19jb25kGAcgASgFEhIKCmNvbmRfcGFyYW0YCCADKAUS",
            "FgoOcmV3YXJkX2l0ZW1faWQYCSABKAUSFwoPcmV3YXJkX2l0ZW1fcXR5GAog",
            "ASgFQg6qAgtOb3ZhLkNsaWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.InfinityTowerPlot), global::Nova.Client.InfinityTowerPlot.Parser, new[]{ "Id", "Name", "Desc", "PlotSum", "PlotId", "AvgId", "UnlockCond", "CondParam", "RewardItemId", "RewardItemQty" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InfinityTowerPlot : pb::IMessage<InfinityTowerPlot>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfinityTowerPlot> _parser = new pb::MessageParser<InfinityTowerPlot>(() => new InfinityTowerPlot());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InfinityTowerPlot> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.InfinityTowerPlotReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerPlot() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerPlot(InfinityTowerPlot other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      desc_ = other.desc_;
      plotSum_ = other.plotSum_;
      plotId_ = other.plotId_;
      avgId_ = other.avgId_;
      unlockCond_ = other.unlockCond_;
      condParam_ = other.condParam_.Clone();
      rewardItemId_ = other.rewardItemId_;
      rewardItemQty_ = other.rewardItemQty_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerPlot Clone() {
      return new InfinityTowerPlot(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plot_sum" field.</summary>
    public const int PlotSumFieldNumber = 4;
    private string plotSum_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PlotSum {
      get { return plotSum_; }
      set {
        plotSum_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "plot_id" field.</summary>
    public const int PlotIdFieldNumber = 5;
    private int plotId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PlotId {
      get { return plotId_; }
      set {
        plotId_ = value;
      }
    }

    /// <summary>Field number for the "avg_id" field.</summary>
    public const int AvgIdFieldNumber = 6;
    private string avgId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AvgId {
      get { return avgId_; }
      set {
        avgId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "unlock_cond" field.</summary>
    public const int UnlockCondFieldNumber = 7;
    private int unlockCond_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UnlockCond {
      get { return unlockCond_; }
      set {
        unlockCond_ = value;
      }
    }

    /// <summary>Field number for the "cond_param" field.</summary>
    public const int CondParamFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_condParam_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> condParam_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> CondParam {
      get { return condParam_; }
    }

    /// <summary>Field number for the "reward_item_id" field.</summary>
    public const int RewardItemIdFieldNumber = 9;
    private int rewardItemId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardItemId {
      get { return rewardItemId_; }
      set {
        rewardItemId_ = value;
      }
    }

    /// <summary>Field number for the "reward_item_qty" field.</summary>
    public const int RewardItemQtyFieldNumber = 10;
    private int rewardItemQty_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RewardItemQty {
      get { return rewardItemQty_; }
      set {
        rewardItemQty_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InfinityTowerPlot);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InfinityTowerPlot other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (PlotSum != other.PlotSum) return false;
      if (PlotId != other.PlotId) return false;
      if (AvgId != other.AvgId) return false;
      if (UnlockCond != other.UnlockCond) return false;
      if(!condParam_.Equals(other.condParam_)) return false;
      if (RewardItemId != other.RewardItemId) return false;
      if (RewardItemQty != other.RewardItemQty) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (PlotSum.Length != 0) hash ^= PlotSum.GetHashCode();
      if (PlotId != 0) hash ^= PlotId.GetHashCode();
      if (AvgId.Length != 0) hash ^= AvgId.GetHashCode();
      if (UnlockCond != 0) hash ^= UnlockCond.GetHashCode();
      hash ^= condParam_.GetHashCode();
      if (RewardItemId != 0) hash ^= RewardItemId.GetHashCode();
      if (RewardItemQty != 0) hash ^= RewardItemQty.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (PlotSum.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlotSum);
      }
      if (PlotId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlotId);
      }
      if (AvgId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvgId);
      }
      if (UnlockCond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnlockCond);
      }
      condParam_.WriteTo(output, _repeated_condParam_codec);
      if (RewardItemId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RewardItemId);
      }
      if (RewardItemQty != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RewardItemQty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (PlotSum.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PlotSum);
      }
      if (PlotId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(PlotId);
      }
      if (AvgId.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(AvgId);
      }
      if (UnlockCond != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(UnlockCond);
      }
      condParam_.WriteTo(ref output, _repeated_condParam_codec);
      if (RewardItemId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RewardItemId);
      }
      if (RewardItemQty != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(RewardItemQty);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (PlotSum.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PlotSum);
      }
      if (PlotId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PlotId);
      }
      if (AvgId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AvgId);
      }
      if (UnlockCond != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UnlockCond);
      }
      size += condParam_.CalculateSize(_repeated_condParam_codec);
      if (RewardItemId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardItemId);
      }
      if (RewardItemQty != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RewardItemQty);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InfinityTowerPlot other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.PlotSum.Length != 0) {
        PlotSum = other.PlotSum;
      }
      if (other.PlotId != 0) {
        PlotId = other.PlotId;
      }
      if (other.AvgId.Length != 0) {
        AvgId = other.AvgId;
      }
      if (other.UnlockCond != 0) {
        UnlockCond = other.UnlockCond;
      }
      condParam_.Add(other.condParam_);
      if (other.RewardItemId != 0) {
        RewardItemId = other.RewardItemId;
      }
      if (other.RewardItemQty != 0) {
        RewardItemQty = other.RewardItemQty;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            PlotSum = input.ReadString();
            break;
          }
          case 40: {
            PlotId = input.ReadInt32();
            break;
          }
          case 50: {
            AvgId = input.ReadString();
            break;
          }
          case 56: {
            UnlockCond = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            condParam_.AddEntriesFrom(input, _repeated_condParam_codec);
            break;
          }
          case 72: {
            RewardItemId = input.ReadInt32();
            break;
          }
          case 80: {
            RewardItemQty = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            PlotSum = input.ReadString();
            break;
          }
          case 40: {
            PlotId = input.ReadInt32();
            break;
          }
          case 50: {
            AvgId = input.ReadString();
            break;
          }
          case 56: {
            UnlockCond = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            condParam_.AddEntriesFrom(ref input, _repeated_condParam_codec);
            break;
          }
          case 72: {
            RewardItemId = input.ReadInt32();
            break;
          }
          case 80: {
            RewardItemQty = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
