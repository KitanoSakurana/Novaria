// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: HitDamage.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from HitDamage.proto</summary>
  public static partial class HitDamageReflection {

    #region Descriptor
    /// <summary>File descriptor for HitDamage.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static HitDamageReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9IaXREYW1hZ2UucHJvdG8i0AQKCUhpdERhbWFnZRIKCgJpZBgBIAEoBRIX",
            "Cg9sZXZlbF90eXBlX2RhdGEYAiABKAUSEgoKbGV2ZWxfZGF0YRgDIAEoBRIX",
            "Cg9tYWluX29yX3N1cHBvcnQYBCABKAUSFgoOaGl0ZGFtYWdlX2luZm8YBSAB",
            "KAkSFQoNZGlzdGFuY2VfdHlwZRgGIAEoBRITCgtzb3VyY2VfdHlwZRgHIAEo",
            "BRITCgtkYW1hZ2VfdHlwZRgIIAEoBRITCgtlZmZlY3RfdHlwZRgJIAEoBRIU",
            "CgxlbGVtZW50X3R5cGUYCiABKAUSEgoKZGFtYWdlX3RhZxgLIAMoBRIZChFk",
            "YW1hZ2VfYm9udXNfdHlwZRgMIAEoBRIbChNza2lsbF9wZXJjZW50X2FtZW5k",
            "GA0gAygFEhcKD3NraWxsX2Fic19hbWVuZBgOIAMoBRIZChFhZGRpdGlvbmFs",
            "X3NvdXJjZRgPIAEoBRIXCg9hZGRpdGlvbmFsX3R5cGUYECABKAUSGgoSYWRk",
            "aXRpb25hbF9wZXJjZW50GBEgAygFEhUKDWVuZXJneV9jaGFyZ2UYEiABKAUS",
            "HAoUdGFsZW50X3BlcmNlbnRfYW1lbmQYEyADKAUSGAoQdGFsZW50X2Fic19h",
            "bWVuZBgUIAMoBRIVCg1pc19kZW5zZV90eXBlGBUgASgIEhYKDnBlcmtfaW50",
            "ZW5zaXR5GBYgAygFEhAKCHNraWxsX2lkGBcgASgFEhcKD3NraWxsX3Nsb3Rf",
            "dHlwZRgYIAEoBRIPCgdwZXJrX2lkGBkgASgFQg6qAgtOb3ZhLkNsaWVudGIG",
            "cHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.HitDamage), global::Nova.Client.HitDamage.Parser, new[]{ "Id", "LevelTypeData", "LevelData", "MainOrSupport", "HitdamageInfo", "DistanceType", "SourceType", "DamageType", "EffectType", "ElementType", "DamageTag", "DamageBonusType", "SkillPercentAmend", "SkillAbsAmend", "AdditionalSource", "AdditionalType", "AdditionalPercent", "EnergyCharge", "TalentPercentAmend", "TalentAbsAmend", "IsDenseType", "PerkIntensity", "SkillId", "SkillSlotType", "PerkId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class HitDamage : pb::IMessage<HitDamage>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<HitDamage> _parser = new pb::MessageParser<HitDamage>(() => new HitDamage());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<HitDamage> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.HitDamageReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HitDamage() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HitDamage(HitDamage other) : this() {
      id_ = other.id_;
      levelTypeData_ = other.levelTypeData_;
      levelData_ = other.levelData_;
      mainOrSupport_ = other.mainOrSupport_;
      hitdamageInfo_ = other.hitdamageInfo_;
      distanceType_ = other.distanceType_;
      sourceType_ = other.sourceType_;
      damageType_ = other.damageType_;
      effectType_ = other.effectType_;
      elementType_ = other.elementType_;
      damageTag_ = other.damageTag_.Clone();
      damageBonusType_ = other.damageBonusType_;
      skillPercentAmend_ = other.skillPercentAmend_.Clone();
      skillAbsAmend_ = other.skillAbsAmend_.Clone();
      additionalSource_ = other.additionalSource_;
      additionalType_ = other.additionalType_;
      additionalPercent_ = other.additionalPercent_.Clone();
      energyCharge_ = other.energyCharge_;
      talentPercentAmend_ = other.talentPercentAmend_.Clone();
      talentAbsAmend_ = other.talentAbsAmend_.Clone();
      isDenseType_ = other.isDenseType_;
      perkIntensity_ = other.perkIntensity_.Clone();
      skillId_ = other.skillId_;
      skillSlotType_ = other.skillSlotType_;
      perkId_ = other.perkId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public HitDamage Clone() {
      return new HitDamage(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "level_type_data" field.</summary>
    public const int LevelTypeDataFieldNumber = 2;
    private int levelTypeData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelTypeData {
      get { return levelTypeData_; }
      set {
        levelTypeData_ = value;
      }
    }

    /// <summary>Field number for the "level_data" field.</summary>
    public const int LevelDataFieldNumber = 3;
    private int levelData_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelData {
      get { return levelData_; }
      set {
        levelData_ = value;
      }
    }

    /// <summary>Field number for the "main_or_support" field.</summary>
    public const int MainOrSupportFieldNumber = 4;
    private int mainOrSupport_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MainOrSupport {
      get { return mainOrSupport_; }
      set {
        mainOrSupport_ = value;
      }
    }

    /// <summary>Field number for the "hitdamage_info" field.</summary>
    public const int HitdamageInfoFieldNumber = 5;
    private string hitdamageInfo_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HitdamageInfo {
      get { return hitdamageInfo_; }
      set {
        hitdamageInfo_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "distance_type" field.</summary>
    public const int DistanceTypeFieldNumber = 6;
    private int distanceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DistanceType {
      get { return distanceType_; }
      set {
        distanceType_ = value;
      }
    }

    /// <summary>Field number for the "source_type" field.</summary>
    public const int SourceTypeFieldNumber = 7;
    private int sourceType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SourceType {
      get { return sourceType_; }
      set {
        sourceType_ = value;
      }
    }

    /// <summary>Field number for the "damage_type" field.</summary>
    public const int DamageTypeFieldNumber = 8;
    private int damageType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageType {
      get { return damageType_; }
      set {
        damageType_ = value;
      }
    }

    /// <summary>Field number for the "effect_type" field.</summary>
    public const int EffectTypeFieldNumber = 9;
    private int effectType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectType {
      get { return effectType_; }
      set {
        effectType_ = value;
      }
    }

    /// <summary>Field number for the "element_type" field.</summary>
    public const int ElementTypeFieldNumber = 10;
    private int elementType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ElementType {
      get { return elementType_; }
      set {
        elementType_ = value;
      }
    }

    /// <summary>Field number for the "damage_tag" field.</summary>
    public const int DamageTagFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_damageTag_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> damageTag_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> DamageTag {
      get { return damageTag_; }
    }

    /// <summary>Field number for the "damage_bonus_type" field.</summary>
    public const int DamageBonusTypeFieldNumber = 12;
    private int damageBonusType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DamageBonusType {
      get { return damageBonusType_; }
      set {
        damageBonusType_ = value;
      }
    }

    /// <summary>Field number for the "skill_percent_amend" field.</summary>
    public const int SkillPercentAmendFieldNumber = 13;
    private static readonly pb::FieldCodec<int> _repeated_skillPercentAmend_codec
        = pb::FieldCodec.ForInt32(106);
    private readonly pbc::RepeatedField<int> skillPercentAmend_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SkillPercentAmend {
      get { return skillPercentAmend_; }
    }

    /// <summary>Field number for the "skill_abs_amend" field.</summary>
    public const int SkillAbsAmendFieldNumber = 14;
    private static readonly pb::FieldCodec<int> _repeated_skillAbsAmend_codec
        = pb::FieldCodec.ForInt32(114);
    private readonly pbc::RepeatedField<int> skillAbsAmend_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SkillAbsAmend {
      get { return skillAbsAmend_; }
    }

    /// <summary>Field number for the "additional_source" field.</summary>
    public const int AdditionalSourceFieldNumber = 15;
    private int additionalSource_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdditionalSource {
      get { return additionalSource_; }
      set {
        additionalSource_ = value;
      }
    }

    /// <summary>Field number for the "additional_type" field.</summary>
    public const int AdditionalTypeFieldNumber = 16;
    private int additionalType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AdditionalType {
      get { return additionalType_; }
      set {
        additionalType_ = value;
      }
    }

    /// <summary>Field number for the "additional_percent" field.</summary>
    public const int AdditionalPercentFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_additionalPercent_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> additionalPercent_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> AdditionalPercent {
      get { return additionalPercent_; }
    }

    /// <summary>Field number for the "energy_charge" field.</summary>
    public const int EnergyChargeFieldNumber = 18;
    private int energyCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnergyCharge {
      get { return energyCharge_; }
      set {
        energyCharge_ = value;
      }
    }

    /// <summary>Field number for the "talent_percent_amend" field.</summary>
    public const int TalentPercentAmendFieldNumber = 19;
    private static readonly pb::FieldCodec<int> _repeated_talentPercentAmend_codec
        = pb::FieldCodec.ForInt32(154);
    private readonly pbc::RepeatedField<int> talentPercentAmend_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TalentPercentAmend {
      get { return talentPercentAmend_; }
    }

    /// <summary>Field number for the "talent_abs_amend" field.</summary>
    public const int TalentAbsAmendFieldNumber = 20;
    private static readonly pb::FieldCodec<int> _repeated_talentAbsAmend_codec
        = pb::FieldCodec.ForInt32(162);
    private readonly pbc::RepeatedField<int> talentAbsAmend_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TalentAbsAmend {
      get { return talentAbsAmend_; }
    }

    /// <summary>Field number for the "is_dense_type" field.</summary>
    public const int IsDenseTypeFieldNumber = 21;
    private bool isDenseType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsDenseType {
      get { return isDenseType_; }
      set {
        isDenseType_ = value;
      }
    }

    /// <summary>Field number for the "perk_intensity" field.</summary>
    public const int PerkIntensityFieldNumber = 22;
    private static readonly pb::FieldCodec<int> _repeated_perkIntensity_codec
        = pb::FieldCodec.ForInt32(178);
    private readonly pbc::RepeatedField<int> perkIntensity_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PerkIntensity {
      get { return perkIntensity_; }
    }

    /// <summary>Field number for the "skill_id" field.</summary>
    public const int SkillIdFieldNumber = 23;
    private int skillId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillId {
      get { return skillId_; }
      set {
        skillId_ = value;
      }
    }

    /// <summary>Field number for the "skill_slot_type" field.</summary>
    public const int SkillSlotTypeFieldNumber = 24;
    private int skillSlotType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillSlotType {
      get { return skillSlotType_; }
      set {
        skillSlotType_ = value;
      }
    }

    /// <summary>Field number for the "perk_id" field.</summary>
    public const int PerkIdFieldNumber = 25;
    private int perkId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PerkId {
      get { return perkId_; }
      set {
        perkId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as HitDamage);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(HitDamage other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (LevelTypeData != other.LevelTypeData) return false;
      if (LevelData != other.LevelData) return false;
      if (MainOrSupport != other.MainOrSupport) return false;
      if (HitdamageInfo != other.HitdamageInfo) return false;
      if (DistanceType != other.DistanceType) return false;
      if (SourceType != other.SourceType) return false;
      if (DamageType != other.DamageType) return false;
      if (EffectType != other.EffectType) return false;
      if (ElementType != other.ElementType) return false;
      if(!damageTag_.Equals(other.damageTag_)) return false;
      if (DamageBonusType != other.DamageBonusType) return false;
      if(!skillPercentAmend_.Equals(other.skillPercentAmend_)) return false;
      if(!skillAbsAmend_.Equals(other.skillAbsAmend_)) return false;
      if (AdditionalSource != other.AdditionalSource) return false;
      if (AdditionalType != other.AdditionalType) return false;
      if(!additionalPercent_.Equals(other.additionalPercent_)) return false;
      if (EnergyCharge != other.EnergyCharge) return false;
      if(!talentPercentAmend_.Equals(other.talentPercentAmend_)) return false;
      if(!talentAbsAmend_.Equals(other.talentAbsAmend_)) return false;
      if (IsDenseType != other.IsDenseType) return false;
      if(!perkIntensity_.Equals(other.perkIntensity_)) return false;
      if (SkillId != other.SkillId) return false;
      if (SkillSlotType != other.SkillSlotType) return false;
      if (PerkId != other.PerkId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (LevelTypeData != 0) hash ^= LevelTypeData.GetHashCode();
      if (LevelData != 0) hash ^= LevelData.GetHashCode();
      if (MainOrSupport != 0) hash ^= MainOrSupport.GetHashCode();
      if (HitdamageInfo.Length != 0) hash ^= HitdamageInfo.GetHashCode();
      if (DistanceType != 0) hash ^= DistanceType.GetHashCode();
      if (SourceType != 0) hash ^= SourceType.GetHashCode();
      if (DamageType != 0) hash ^= DamageType.GetHashCode();
      if (EffectType != 0) hash ^= EffectType.GetHashCode();
      if (ElementType != 0) hash ^= ElementType.GetHashCode();
      hash ^= damageTag_.GetHashCode();
      if (DamageBonusType != 0) hash ^= DamageBonusType.GetHashCode();
      hash ^= skillPercentAmend_.GetHashCode();
      hash ^= skillAbsAmend_.GetHashCode();
      if (AdditionalSource != 0) hash ^= AdditionalSource.GetHashCode();
      if (AdditionalType != 0) hash ^= AdditionalType.GetHashCode();
      hash ^= additionalPercent_.GetHashCode();
      if (EnergyCharge != 0) hash ^= EnergyCharge.GetHashCode();
      hash ^= talentPercentAmend_.GetHashCode();
      hash ^= talentAbsAmend_.GetHashCode();
      if (IsDenseType != false) hash ^= IsDenseType.GetHashCode();
      hash ^= perkIntensity_.GetHashCode();
      if (SkillId != 0) hash ^= SkillId.GetHashCode();
      if (SkillSlotType != 0) hash ^= SkillSlotType.GetHashCode();
      if (PerkId != 0) hash ^= PerkId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LevelTypeData != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelTypeData);
      }
      if (LevelData != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelData);
      }
      if (MainOrSupport != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MainOrSupport);
      }
      if (HitdamageInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HitdamageInfo);
      }
      if (DistanceType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DistanceType);
      }
      if (SourceType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SourceType);
      }
      if (DamageType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageType);
      }
      if (EffectType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EffectType);
      }
      if (ElementType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ElementType);
      }
      damageTag_.WriteTo(output, _repeated_damageTag_codec);
      if (DamageBonusType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageBonusType);
      }
      skillPercentAmend_.WriteTo(output, _repeated_skillPercentAmend_codec);
      skillAbsAmend_.WriteTo(output, _repeated_skillAbsAmend_codec);
      if (AdditionalSource != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AdditionalSource);
      }
      if (AdditionalType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AdditionalType);
      }
      additionalPercent_.WriteTo(output, _repeated_additionalPercent_codec);
      if (EnergyCharge != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EnergyCharge);
      }
      talentPercentAmend_.WriteTo(output, _repeated_talentPercentAmend_codec);
      talentAbsAmend_.WriteTo(output, _repeated_talentAbsAmend_codec);
      if (IsDenseType != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsDenseType);
      }
      perkIntensity_.WriteTo(output, _repeated_perkIntensity_codec);
      if (SkillId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SkillId);
      }
      if (SkillSlotType != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SkillSlotType);
      }
      if (PerkId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(PerkId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (LevelTypeData != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(LevelTypeData);
      }
      if (LevelData != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(LevelData);
      }
      if (MainOrSupport != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MainOrSupport);
      }
      if (HitdamageInfo.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(HitdamageInfo);
      }
      if (DistanceType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(DistanceType);
      }
      if (SourceType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SourceType);
      }
      if (DamageType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(DamageType);
      }
      if (EffectType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(EffectType);
      }
      if (ElementType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(ElementType);
      }
      damageTag_.WriteTo(ref output, _repeated_damageTag_codec);
      if (DamageBonusType != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(DamageBonusType);
      }
      skillPercentAmend_.WriteTo(ref output, _repeated_skillPercentAmend_codec);
      skillAbsAmend_.WriteTo(ref output, _repeated_skillAbsAmend_codec);
      if (AdditionalSource != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(AdditionalSource);
      }
      if (AdditionalType != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(AdditionalType);
      }
      additionalPercent_.WriteTo(ref output, _repeated_additionalPercent_codec);
      if (EnergyCharge != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(EnergyCharge);
      }
      talentPercentAmend_.WriteTo(ref output, _repeated_talentPercentAmend_codec);
      talentAbsAmend_.WriteTo(ref output, _repeated_talentAbsAmend_codec);
      if (IsDenseType != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsDenseType);
      }
      perkIntensity_.WriteTo(ref output, _repeated_perkIntensity_codec);
      if (SkillId != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SkillId);
      }
      if (SkillSlotType != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(SkillSlotType);
      }
      if (PerkId != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(PerkId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (LevelTypeData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelTypeData);
      }
      if (LevelData != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelData);
      }
      if (MainOrSupport != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MainOrSupport);
      }
      if (HitdamageInfo.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HitdamageInfo);
      }
      if (DistanceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DistanceType);
      }
      if (SourceType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SourceType);
      }
      if (DamageType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageType);
      }
      if (EffectType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EffectType);
      }
      if (ElementType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ElementType);
      }
      size += damageTag_.CalculateSize(_repeated_damageTag_codec);
      if (DamageBonusType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DamageBonusType);
      }
      size += skillPercentAmend_.CalculateSize(_repeated_skillPercentAmend_codec);
      size += skillAbsAmend_.CalculateSize(_repeated_skillAbsAmend_codec);
      if (AdditionalSource != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AdditionalSource);
      }
      if (AdditionalType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AdditionalType);
      }
      size += additionalPercent_.CalculateSize(_repeated_additionalPercent_codec);
      if (EnergyCharge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergyCharge);
      }
      size += talentPercentAmend_.CalculateSize(_repeated_talentPercentAmend_codec);
      size += talentAbsAmend_.CalculateSize(_repeated_talentAbsAmend_codec);
      if (IsDenseType != false) {
        size += 2 + 1;
      }
      size += perkIntensity_.CalculateSize(_repeated_perkIntensity_codec);
      if (SkillId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillId);
      }
      if (SkillSlotType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillSlotType);
      }
      if (PerkId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PerkId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(HitDamage other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.LevelTypeData != 0) {
        LevelTypeData = other.LevelTypeData;
      }
      if (other.LevelData != 0) {
        LevelData = other.LevelData;
      }
      if (other.MainOrSupport != 0) {
        MainOrSupport = other.MainOrSupport;
      }
      if (other.HitdamageInfo.Length != 0) {
        HitdamageInfo = other.HitdamageInfo;
      }
      if (other.DistanceType != 0) {
        DistanceType = other.DistanceType;
      }
      if (other.SourceType != 0) {
        SourceType = other.SourceType;
      }
      if (other.DamageType != 0) {
        DamageType = other.DamageType;
      }
      if (other.EffectType != 0) {
        EffectType = other.EffectType;
      }
      if (other.ElementType != 0) {
        ElementType = other.ElementType;
      }
      damageTag_.Add(other.damageTag_);
      if (other.DamageBonusType != 0) {
        DamageBonusType = other.DamageBonusType;
      }
      skillPercentAmend_.Add(other.skillPercentAmend_);
      skillAbsAmend_.Add(other.skillAbsAmend_);
      if (other.AdditionalSource != 0) {
        AdditionalSource = other.AdditionalSource;
      }
      if (other.AdditionalType != 0) {
        AdditionalType = other.AdditionalType;
      }
      additionalPercent_.Add(other.additionalPercent_);
      if (other.EnergyCharge != 0) {
        EnergyCharge = other.EnergyCharge;
      }
      talentPercentAmend_.Add(other.talentPercentAmend_);
      talentAbsAmend_.Add(other.talentAbsAmend_);
      if (other.IsDenseType != false) {
        IsDenseType = other.IsDenseType;
      }
      perkIntensity_.Add(other.perkIntensity_);
      if (other.SkillId != 0) {
        SkillId = other.SkillId;
      }
      if (other.SkillSlotType != 0) {
        SkillSlotType = other.SkillSlotType;
      }
      if (other.PerkId != 0) {
        PerkId = other.PerkId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LevelTypeData = input.ReadInt32();
            break;
          }
          case 24: {
            LevelData = input.ReadInt32();
            break;
          }
          case 32: {
            MainOrSupport = input.ReadInt32();
            break;
          }
          case 42: {
            HitdamageInfo = input.ReadString();
            break;
          }
          case 48: {
            DistanceType = input.ReadInt32();
            break;
          }
          case 56: {
            SourceType = input.ReadInt32();
            break;
          }
          case 64: {
            DamageType = input.ReadInt32();
            break;
          }
          case 72: {
            EffectType = input.ReadInt32();
            break;
          }
          case 80: {
            ElementType = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            damageTag_.AddEntriesFrom(input, _repeated_damageTag_codec);
            break;
          }
          case 96: {
            DamageBonusType = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            skillPercentAmend_.AddEntriesFrom(input, _repeated_skillPercentAmend_codec);
            break;
          }
          case 114:
          case 112: {
            skillAbsAmend_.AddEntriesFrom(input, _repeated_skillAbsAmend_codec);
            break;
          }
          case 120: {
            AdditionalSource = input.ReadInt32();
            break;
          }
          case 128: {
            AdditionalType = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            additionalPercent_.AddEntriesFrom(input, _repeated_additionalPercent_codec);
            break;
          }
          case 144: {
            EnergyCharge = input.ReadInt32();
            break;
          }
          case 154:
          case 152: {
            talentPercentAmend_.AddEntriesFrom(input, _repeated_talentPercentAmend_codec);
            break;
          }
          case 162:
          case 160: {
            talentAbsAmend_.AddEntriesFrom(input, _repeated_talentAbsAmend_codec);
            break;
          }
          case 168: {
            IsDenseType = input.ReadBool();
            break;
          }
          case 178:
          case 176: {
            perkIntensity_.AddEntriesFrom(input, _repeated_perkIntensity_codec);
            break;
          }
          case 184: {
            SkillId = input.ReadInt32();
            break;
          }
          case 192: {
            SkillSlotType = input.ReadInt32();
            break;
          }
          case 200: {
            PerkId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            LevelTypeData = input.ReadInt32();
            break;
          }
          case 24: {
            LevelData = input.ReadInt32();
            break;
          }
          case 32: {
            MainOrSupport = input.ReadInt32();
            break;
          }
          case 42: {
            HitdamageInfo = input.ReadString();
            break;
          }
          case 48: {
            DistanceType = input.ReadInt32();
            break;
          }
          case 56: {
            SourceType = input.ReadInt32();
            break;
          }
          case 64: {
            DamageType = input.ReadInt32();
            break;
          }
          case 72: {
            EffectType = input.ReadInt32();
            break;
          }
          case 80: {
            ElementType = input.ReadInt32();
            break;
          }
          case 90:
          case 88: {
            damageTag_.AddEntriesFrom(ref input, _repeated_damageTag_codec);
            break;
          }
          case 96: {
            DamageBonusType = input.ReadInt32();
            break;
          }
          case 106:
          case 104: {
            skillPercentAmend_.AddEntriesFrom(ref input, _repeated_skillPercentAmend_codec);
            break;
          }
          case 114:
          case 112: {
            skillAbsAmend_.AddEntriesFrom(ref input, _repeated_skillAbsAmend_codec);
            break;
          }
          case 120: {
            AdditionalSource = input.ReadInt32();
            break;
          }
          case 128: {
            AdditionalType = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            additionalPercent_.AddEntriesFrom(ref input, _repeated_additionalPercent_codec);
            break;
          }
          case 144: {
            EnergyCharge = input.ReadInt32();
            break;
          }
          case 154:
          case 152: {
            talentPercentAmend_.AddEntriesFrom(ref input, _repeated_talentPercentAmend_codec);
            break;
          }
          case 162:
          case 160: {
            talentAbsAmend_.AddEntriesFrom(ref input, _repeated_talentAbsAmend_codec);
            break;
          }
          case 168: {
            IsDenseType = input.ReadBool();
            break;
          }
          case 178:
          case 176: {
            perkIntensity_.AddEntriesFrom(ref input, _repeated_perkIntensity_codec);
            break;
          }
          case 184: {
            SkillId = input.ReadInt32();
            break;
          }
          case 192: {
            SkillSlotType = input.ReadInt32();
            break;
          }
          case 200: {
            PerkId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
