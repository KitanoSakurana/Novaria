// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: FateCard.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from FateCard.proto</summary>
  public static partial class FateCardReflection {

    #region Descriptor
    /// <summary>File descriptor for FateCard.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static FateCardReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5GYXRlQ2FyZC5wcm90byKQAwoIRmF0ZUNhcmQSCgoCaWQYASABKAUSDAoE",
            "bmFtZRgCIAEoCRIMCgRkZXNjGAMgASgJEg0KBWRlc2MyGAQgASgJEhAKCGlz",
            "X3Rvd2VyGAUgASgIEhIKCmlzX3ZhbXBpcmUYBiABKAgSGgoSaXNfdmFtcGly",
            "ZV9zcGVjaWFsGAcgASgIEhUKDWFjdGl2ZV9udW1iZXIYCCABKAUSEAoIZHVy",
            "YXRpb24YCSABKAUSGQoRYWN0aXZlX3Jvb21fdHlwZXMYCiADKAUSFQoNYWN0",
            "aXZlX2FjdGlvbhgLIAEoBRITCgttZXRob2RfbW9kZRgMIAEoBRIVCg1jbGll",
            "bnRfZWZmZWN0GA0gASgFEg0KBWNvdW50GA4gASgFEhIKCnRoZW1lX3R5cGUY",
            "DyABKAUSEwoLdGhlbWVfdmFsdWUYECABKAUSGgoSdGhlbWVfdHJpZ2dlcl90",
            "eXBlGBEgAygFEh0KFWVmZmVjdGl2ZV9pbW1lZGlhdGVseRgSIAEoCBIRCgly",
            "ZW1vdmFibGUYEyABKAhCDqoCC05vdmEuQ2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.FateCard), global::Nova.Client.FateCard.Parser, new[]{ "Id", "Name", "Desc", "Desc2", "IsTower", "IsVampire", "IsVampireSpecial", "ActiveNumber", "Duration", "ActiveRoomTypes", "ActiveAction", "MethodMode", "ClientEffect", "Count", "ThemeType", "ThemeValue", "ThemeTriggerType", "EffectiveImmediately", "Removable" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class FateCard : pb::IMessage<FateCard>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<FateCard> _parser = new pb::MessageParser<FateCard>(() => new FateCard());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<FateCard> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.FateCardReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FateCard() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FateCard(FateCard other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      desc_ = other.desc_;
      desc2_ = other.desc2_;
      isTower_ = other.isTower_;
      isVampire_ = other.isVampire_;
      isVampireSpecial_ = other.isVampireSpecial_;
      activeNumber_ = other.activeNumber_;
      duration_ = other.duration_;
      activeRoomTypes_ = other.activeRoomTypes_.Clone();
      activeAction_ = other.activeAction_;
      methodMode_ = other.methodMode_;
      clientEffect_ = other.clientEffect_;
      count_ = other.count_;
      themeType_ = other.themeType_;
      themeValue_ = other.themeValue_;
      themeTriggerType_ = other.themeTriggerType_.Clone();
      effectiveImmediately_ = other.effectiveImmediately_;
      removable_ = other.removable_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public FateCard Clone() {
      return new FateCard(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc" field.</summary>
    public const int DescFieldNumber = 3;
    private string desc_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Desc {
      get { return desc_; }
      set {
        desc_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "desc2" field.</summary>
    public const int Desc2FieldNumber = 4;
    private string desc2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Desc2 {
      get { return desc2_; }
      set {
        desc2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_tower" field.</summary>
    public const int IsTowerFieldNumber = 5;
    private bool isTower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsTower {
      get { return isTower_; }
      set {
        isTower_ = value;
      }
    }

    /// <summary>Field number for the "is_vampire" field.</summary>
    public const int IsVampireFieldNumber = 6;
    private bool isVampire_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVampire {
      get { return isVampire_; }
      set {
        isVampire_ = value;
      }
    }

    /// <summary>Field number for the "is_vampire_special" field.</summary>
    public const int IsVampireSpecialFieldNumber = 7;
    private bool isVampireSpecial_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsVampireSpecial {
      get { return isVampireSpecial_; }
      set {
        isVampireSpecial_ = value;
      }
    }

    /// <summary>Field number for the "active_number" field.</summary>
    public const int ActiveNumberFieldNumber = 8;
    private int activeNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveNumber {
      get { return activeNumber_; }
      set {
        activeNumber_ = value;
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 9;
    private int duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "active_room_types" field.</summary>
    public const int ActiveRoomTypesFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_activeRoomTypes_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> activeRoomTypes_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ActiveRoomTypes {
      get { return activeRoomTypes_; }
    }

    /// <summary>Field number for the "active_action" field.</summary>
    public const int ActiveActionFieldNumber = 11;
    private int activeAction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActiveAction {
      get { return activeAction_; }
      set {
        activeAction_ = value;
      }
    }

    /// <summary>Field number for the "method_mode" field.</summary>
    public const int MethodModeFieldNumber = 12;
    private int methodMode_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MethodMode {
      get { return methodMode_; }
      set {
        methodMode_ = value;
      }
    }

    /// <summary>Field number for the "client_effect" field.</summary>
    public const int ClientEffectFieldNumber = 13;
    private int clientEffect_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ClientEffect {
      get { return clientEffect_; }
      set {
        clientEffect_ = value;
      }
    }

    /// <summary>Field number for the "count" field.</summary>
    public const int CountFieldNumber = 14;
    private int count_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    /// <summary>Field number for the "theme_type" field.</summary>
    public const int ThemeTypeFieldNumber = 15;
    private int themeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThemeType {
      get { return themeType_; }
      set {
        themeType_ = value;
      }
    }

    /// <summary>Field number for the "theme_value" field.</summary>
    public const int ThemeValueFieldNumber = 16;
    private int themeValue_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ThemeValue {
      get { return themeValue_; }
      set {
        themeValue_ = value;
      }
    }

    /// <summary>Field number for the "theme_trigger_type" field.</summary>
    public const int ThemeTriggerTypeFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_themeTriggerType_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> themeTriggerType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> ThemeTriggerType {
      get { return themeTriggerType_; }
    }

    /// <summary>Field number for the "effective_immediately" field.</summary>
    public const int EffectiveImmediatelyFieldNumber = 18;
    private bool effectiveImmediately_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool EffectiveImmediately {
      get { return effectiveImmediately_; }
      set {
        effectiveImmediately_ = value;
      }
    }

    /// <summary>Field number for the "removable" field.</summary>
    public const int RemovableFieldNumber = 19;
    private bool removable_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Removable {
      get { return removable_; }
      set {
        removable_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as FateCard);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(FateCard other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Desc != other.Desc) return false;
      if (Desc2 != other.Desc2) return false;
      if (IsTower != other.IsTower) return false;
      if (IsVampire != other.IsVampire) return false;
      if (IsVampireSpecial != other.IsVampireSpecial) return false;
      if (ActiveNumber != other.ActiveNumber) return false;
      if (Duration != other.Duration) return false;
      if(!activeRoomTypes_.Equals(other.activeRoomTypes_)) return false;
      if (ActiveAction != other.ActiveAction) return false;
      if (MethodMode != other.MethodMode) return false;
      if (ClientEffect != other.ClientEffect) return false;
      if (Count != other.Count) return false;
      if (ThemeType != other.ThemeType) return false;
      if (ThemeValue != other.ThemeValue) return false;
      if(!themeTriggerType_.Equals(other.themeTriggerType_)) return false;
      if (EffectiveImmediately != other.EffectiveImmediately) return false;
      if (Removable != other.Removable) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Desc.Length != 0) hash ^= Desc.GetHashCode();
      if (Desc2.Length != 0) hash ^= Desc2.GetHashCode();
      if (IsTower != false) hash ^= IsTower.GetHashCode();
      if (IsVampire != false) hash ^= IsVampire.GetHashCode();
      if (IsVampireSpecial != false) hash ^= IsVampireSpecial.GetHashCode();
      if (ActiveNumber != 0) hash ^= ActiveNumber.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      hash ^= activeRoomTypes_.GetHashCode();
      if (ActiveAction != 0) hash ^= ActiveAction.GetHashCode();
      if (MethodMode != 0) hash ^= MethodMode.GetHashCode();
      if (ClientEffect != 0) hash ^= ClientEffect.GetHashCode();
      if (Count != 0) hash ^= Count.GetHashCode();
      if (ThemeType != 0) hash ^= ThemeType.GetHashCode();
      if (ThemeValue != 0) hash ^= ThemeValue.GetHashCode();
      hash ^= themeTriggerType_.GetHashCode();
      if (EffectiveImmediately != false) hash ^= EffectiveImmediately.GetHashCode();
      if (Removable != false) hash ^= Removable.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Desc2.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc2);
      }
      if (IsTower != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTower);
      }
      if (IsVampire != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsVampire);
      }
      if (IsVampireSpecial != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVampireSpecial);
      }
      if (ActiveNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ActiveNumber);
      }
      if (Duration != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Duration);
      }
      activeRoomTypes_.WriteTo(output, _repeated_activeRoomTypes_codec);
      if (ActiveAction != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActiveAction);
      }
      if (MethodMode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MethodMode);
      }
      if (ClientEffect != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ClientEffect);
      }
      if (Count != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Count);
      }
      if (ThemeType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ThemeType);
      }
      if (ThemeValue != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ThemeValue);
      }
      themeTriggerType_.WriteTo(output, _repeated_themeTriggerType_codec);
      if (EffectiveImmediately != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(EffectiveImmediately);
      }
      if (Removable != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Removable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Desc.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Desc);
      }
      if (Desc2.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Desc2);
      }
      if (IsTower != false) {
        output.WriteRawTag(40);
        output.WriteBool(IsTower);
      }
      if (IsVampire != false) {
        output.WriteRawTag(48);
        output.WriteBool(IsVampire);
      }
      if (IsVampireSpecial != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsVampireSpecial);
      }
      if (ActiveNumber != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ActiveNumber);
      }
      if (Duration != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Duration);
      }
      activeRoomTypes_.WriteTo(ref output, _repeated_activeRoomTypes_codec);
      if (ActiveAction != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(ActiveAction);
      }
      if (MethodMode != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MethodMode);
      }
      if (ClientEffect != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ClientEffect);
      }
      if (Count != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Count);
      }
      if (ThemeType != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ThemeType);
      }
      if (ThemeValue != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ThemeValue);
      }
      themeTriggerType_.WriteTo(ref output, _repeated_themeTriggerType_codec);
      if (EffectiveImmediately != false) {
        output.WriteRawTag(144, 1);
        output.WriteBool(EffectiveImmediately);
      }
      if (Removable != false) {
        output.WriteRawTag(152, 1);
        output.WriteBool(Removable);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Desc.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc);
      }
      if (Desc2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Desc2);
      }
      if (IsTower != false) {
        size += 1 + 1;
      }
      if (IsVampire != false) {
        size += 1 + 1;
      }
      if (IsVampireSpecial != false) {
        size += 1 + 1;
      }
      if (ActiveNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveNumber);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Duration);
      }
      size += activeRoomTypes_.CalculateSize(_repeated_activeRoomTypes_codec);
      if (ActiveAction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ActiveAction);
      }
      if (MethodMode != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MethodMode);
      }
      if (ClientEffect != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ClientEffect);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      if (ThemeType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ThemeType);
      }
      if (ThemeValue != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ThemeValue);
      }
      size += themeTriggerType_.CalculateSize(_repeated_themeTriggerType_codec);
      if (EffectiveImmediately != false) {
        size += 2 + 1;
      }
      if (Removable != false) {
        size += 2 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(FateCard other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Desc.Length != 0) {
        Desc = other.Desc;
      }
      if (other.Desc2.Length != 0) {
        Desc2 = other.Desc2;
      }
      if (other.IsTower != false) {
        IsTower = other.IsTower;
      }
      if (other.IsVampire != false) {
        IsVampire = other.IsVampire;
      }
      if (other.IsVampireSpecial != false) {
        IsVampireSpecial = other.IsVampireSpecial;
      }
      if (other.ActiveNumber != 0) {
        ActiveNumber = other.ActiveNumber;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      activeRoomTypes_.Add(other.activeRoomTypes_);
      if (other.ActiveAction != 0) {
        ActiveAction = other.ActiveAction;
      }
      if (other.MethodMode != 0) {
        MethodMode = other.MethodMode;
      }
      if (other.ClientEffect != 0) {
        ClientEffect = other.ClientEffect;
      }
      if (other.Count != 0) {
        Count = other.Count;
      }
      if (other.ThemeType != 0) {
        ThemeType = other.ThemeType;
      }
      if (other.ThemeValue != 0) {
        ThemeValue = other.ThemeValue;
      }
      themeTriggerType_.Add(other.themeTriggerType_);
      if (other.EffectiveImmediately != false) {
        EffectiveImmediately = other.EffectiveImmediately;
      }
      if (other.Removable != false) {
        Removable = other.Removable;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            Desc2 = input.ReadString();
            break;
          }
          case 40: {
            IsTower = input.ReadBool();
            break;
          }
          case 48: {
            IsVampire = input.ReadBool();
            break;
          }
          case 56: {
            IsVampireSpecial = input.ReadBool();
            break;
          }
          case 64: {
            ActiveNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Duration = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            activeRoomTypes_.AddEntriesFrom(input, _repeated_activeRoomTypes_codec);
            break;
          }
          case 88: {
            ActiveAction = input.ReadInt32();
            break;
          }
          case 96: {
            MethodMode = input.ReadInt32();
            break;
          }
          case 104: {
            ClientEffect = input.ReadInt32();
            break;
          }
          case 112: {
            Count = input.ReadInt32();
            break;
          }
          case 120: {
            ThemeType = input.ReadInt32();
            break;
          }
          case 128: {
            ThemeValue = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            themeTriggerType_.AddEntriesFrom(input, _repeated_themeTriggerType_codec);
            break;
          }
          case 144: {
            EffectiveImmediately = input.ReadBool();
            break;
          }
          case 152: {
            Removable = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 26: {
            Desc = input.ReadString();
            break;
          }
          case 34: {
            Desc2 = input.ReadString();
            break;
          }
          case 40: {
            IsTower = input.ReadBool();
            break;
          }
          case 48: {
            IsVampire = input.ReadBool();
            break;
          }
          case 56: {
            IsVampireSpecial = input.ReadBool();
            break;
          }
          case 64: {
            ActiveNumber = input.ReadInt32();
            break;
          }
          case 72: {
            Duration = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            activeRoomTypes_.AddEntriesFrom(ref input, _repeated_activeRoomTypes_codec);
            break;
          }
          case 88: {
            ActiveAction = input.ReadInt32();
            break;
          }
          case 96: {
            MethodMode = input.ReadInt32();
            break;
          }
          case 104: {
            ClientEffect = input.ReadInt32();
            break;
          }
          case 112: {
            Count = input.ReadInt32();
            break;
          }
          case 120: {
            ThemeType = input.ReadInt32();
            break;
          }
          case 128: {
            ThemeValue = input.ReadInt32();
            break;
          }
          case 138:
          case 136: {
            themeTriggerType_.AddEntriesFrom(ref input, _repeated_themeTriggerType_codec);
            break;
          }
          case 144: {
            EffectiveImmediately = input.ReadBool();
            break;
          }
          case 152: {
            Removable = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
