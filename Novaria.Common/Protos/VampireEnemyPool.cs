// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VampireEnemyPool.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from VampireEnemyPool.proto</summary>
  public static partial class VampireEnemyPoolReflection {

    #region Descriptor
    /// <summary>File descriptor for VampireEnemyPool.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VampireEnemyPoolReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChZWYW1waXJlRW5lbXlQb29sLnByb3RvIo4BChBWYW1waXJlRW5lbXlQb29s",
            "Eg8KB3Bvb2xfaWQYASABKAUSEAoId2F2ZV9udW0YAiABKAUSFQoNbW9uc3Rl",
            "cl9sZXZlbBgDIAEoBRIVCg1lbmVteV9zZXRfaV9kGAQgASgFEhYKDndhdmVf",
            "a2VlcF90aW1lGAUgASgFEhEKCXBvb2xfdHlwZRgGIAEoBUIOqgILTm92YS5D",
            "bGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.VampireEnemyPool), global::Nova.Client.VampireEnemyPool.Parser, new[]{ "PoolId", "WaveNum", "MonsterLevel", "EnemySetID", "WaveKeepTime", "PoolType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class VampireEnemyPool : pb::IMessage<VampireEnemyPool>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VampireEnemyPool> _parser = new pb::MessageParser<VampireEnemyPool>(() => new VampireEnemyPool());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VampireEnemyPool> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.VampireEnemyPoolReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireEnemyPool() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireEnemyPool(VampireEnemyPool other) : this() {
      poolId_ = other.poolId_;
      waveNum_ = other.waveNum_;
      monsterLevel_ = other.monsterLevel_;
      enemySetID_ = other.enemySetID_;
      waveKeepTime_ = other.waveKeepTime_;
      poolType_ = other.poolType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireEnemyPool Clone() {
      return new VampireEnemyPool(this);
    }

    /// <summary>Field number for the "pool_id" field.</summary>
    public const int PoolIdFieldNumber = 1;
    private int poolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PoolId {
      get { return poolId_; }
      set {
        poolId_ = value;
      }
    }

    /// <summary>Field number for the "wave_num" field.</summary>
    public const int WaveNumFieldNumber = 2;
    private int waveNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaveNum {
      get { return waveNum_; }
      set {
        waveNum_ = value;
      }
    }

    /// <summary>Field number for the "monster_level" field.</summary>
    public const int MonsterLevelFieldNumber = 3;
    private int monsterLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonsterLevel {
      get { return monsterLevel_; }
      set {
        monsterLevel_ = value;
      }
    }

    /// <summary>Field number for the "enemy_set_i_d" field.</summary>
    public const int EnemySetIDFieldNumber = 4;
    private int enemySetID_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EnemySetID {
      get { return enemySetID_; }
      set {
        enemySetID_ = value;
      }
    }

    /// <summary>Field number for the "wave_keep_time" field.</summary>
    public const int WaveKeepTimeFieldNumber = 5;
    private int waveKeepTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaveKeepTime {
      get { return waveKeepTime_; }
      set {
        waveKeepTime_ = value;
      }
    }

    /// <summary>Field number for the "pool_type" field.</summary>
    public const int PoolTypeFieldNumber = 6;
    private int poolType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PoolType {
      get { return poolType_; }
      set {
        poolType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VampireEnemyPool);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VampireEnemyPool other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PoolId != other.PoolId) return false;
      if (WaveNum != other.WaveNum) return false;
      if (MonsterLevel != other.MonsterLevel) return false;
      if (EnemySetID != other.EnemySetID) return false;
      if (WaveKeepTime != other.WaveKeepTime) return false;
      if (PoolType != other.PoolType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (PoolId != 0) hash ^= PoolId.GetHashCode();
      if (WaveNum != 0) hash ^= WaveNum.GetHashCode();
      if (MonsterLevel != 0) hash ^= MonsterLevel.GetHashCode();
      if (EnemySetID != 0) hash ^= EnemySetID.GetHashCode();
      if (WaveKeepTime != 0) hash ^= WaveKeepTime.GetHashCode();
      if (PoolType != 0) hash ^= PoolType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (PoolId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PoolId);
      }
      if (WaveNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaveNum);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterLevel);
      }
      if (EnemySetID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemySetID);
      }
      if (WaveKeepTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaveKeepTime);
      }
      if (PoolType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PoolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (PoolId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(PoolId);
      }
      if (WaveNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaveNum);
      }
      if (MonsterLevel != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(MonsterLevel);
      }
      if (EnemySetID != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EnemySetID);
      }
      if (WaveKeepTime != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(WaveKeepTime);
      }
      if (PoolType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PoolType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (PoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolId);
      }
      if (WaveNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveNum);
      }
      if (MonsterLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterLevel);
      }
      if (EnemySetID != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EnemySetID);
      }
      if (WaveKeepTime != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveKeepTime);
      }
      if (PoolType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PoolType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VampireEnemyPool other) {
      if (other == null) {
        return;
      }
      if (other.PoolId != 0) {
        PoolId = other.PoolId;
      }
      if (other.WaveNum != 0) {
        WaveNum = other.WaveNum;
      }
      if (other.MonsterLevel != 0) {
        MonsterLevel = other.MonsterLevel;
      }
      if (other.EnemySetID != 0) {
        EnemySetID = other.EnemySetID;
      }
      if (other.WaveKeepTime != 0) {
        WaveKeepTime = other.WaveKeepTime;
      }
      if (other.PoolType != 0) {
        PoolType = other.PoolType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            PoolId = input.ReadInt32();
            break;
          }
          case 16: {
            WaveNum = input.ReadInt32();
            break;
          }
          case 24: {
            MonsterLevel = input.ReadInt32();
            break;
          }
          case 32: {
            EnemySetID = input.ReadInt32();
            break;
          }
          case 40: {
            WaveKeepTime = input.ReadInt32();
            break;
          }
          case 48: {
            PoolType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            PoolId = input.ReadInt32();
            break;
          }
          case 16: {
            WaveNum = input.ReadInt32();
            break;
          }
          case 24: {
            MonsterLevel = input.ReadInt32();
            break;
          }
          case 32: {
            EnemySetID = input.ReadInt32();
            break;
          }
          case 40: {
            WaveKeepTime = input.ReadInt32();
            break;
          }
          case 48: {
            PoolType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
