// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: VampireFloor.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from VampireFloor.proto</summary>
  public static partial class VampireFloorReflection {

    #region Descriptor
    /// <summary>File descriptor for VampireFloor.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static VampireFloorReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJWYW1waXJlRmxvb3IucHJvdG8ihAIKDFZhbXBpcmVGbG9vchIKCgJpZBgB",
            "IAEoBRIOCgZtYXBfaWQYAiABKAUSEgoKd2F2ZV9jb3VudBgDIAMoBRIaChJm",
            "aXJzdF9oYWxmX3Bvb2xfaWQYBCABKAUSFAoMZl9oX2FmZml4X2lkGAUgAygF",
            "EhMKC2ZfaF9ib3NzX2lkGAYgASgFEhsKE3NlY29uZF9oYWxmX3Bvb2xfaWQY",
            "ByABKAUSFAoMc19oX2FmZml4X2lkGAggAygFEhMKC3NfaF9ib3NzX2lkGAkg",
            "ASgFEhwKFHNwZWNpYWxfZW5lbXlfc2V0X2lkGAogASgJEhcKD3RyZWFzdXJl",
            "X3NldF9pZBgLIAEoCUIOqgILTm92YS5DbGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.VampireFloor), global::Nova.Client.VampireFloor.Parser, new[]{ "Id", "MapId", "WaveCount", "FirstHalfPoolId", "FHAffixId", "FHBossId", "SecondHalfPoolId", "SHAffixId", "SHBossId", "SpecialEnemySetId", "TreasureSetId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class VampireFloor : pb::IMessage<VampireFloor>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<VampireFloor> _parser = new pb::MessageParser<VampireFloor>(() => new VampireFloor());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<VampireFloor> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.VampireFloorReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireFloor() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireFloor(VampireFloor other) : this() {
      id_ = other.id_;
      mapId_ = other.mapId_;
      waveCount_ = other.waveCount_.Clone();
      firstHalfPoolId_ = other.firstHalfPoolId_;
      fHAffixId_ = other.fHAffixId_.Clone();
      fHBossId_ = other.fHBossId_;
      secondHalfPoolId_ = other.secondHalfPoolId_;
      sHAffixId_ = other.sHAffixId_.Clone();
      sHBossId_ = other.sHBossId_;
      specialEnemySetId_ = other.specialEnemySetId_;
      treasureSetId_ = other.treasureSetId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public VampireFloor Clone() {
      return new VampireFloor(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "map_id" field.</summary>
    public const int MapIdFieldNumber = 2;
    private int mapId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MapId {
      get { return mapId_; }
      set {
        mapId_ = value;
      }
    }

    /// <summary>Field number for the "wave_count" field.</summary>
    public const int WaveCountFieldNumber = 3;
    private static readonly pb::FieldCodec<int> _repeated_waveCount_codec
        = pb::FieldCodec.ForInt32(26);
    private readonly pbc::RepeatedField<int> waveCount_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> WaveCount {
      get { return waveCount_; }
    }

    /// <summary>Field number for the "first_half_pool_id" field.</summary>
    public const int FirstHalfPoolIdFieldNumber = 4;
    private int firstHalfPoolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FirstHalfPoolId {
      get { return firstHalfPoolId_; }
      set {
        firstHalfPoolId_ = value;
      }
    }

    /// <summary>Field number for the "f_h_affix_id" field.</summary>
    public const int FHAffixIdFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_fHAffixId_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> fHAffixId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> FHAffixId {
      get { return fHAffixId_; }
    }

    /// <summary>Field number for the "f_h_boss_id" field.</summary>
    public const int FHBossIdFieldNumber = 6;
    private int fHBossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FHBossId {
      get { return fHBossId_; }
      set {
        fHBossId_ = value;
      }
    }

    /// <summary>Field number for the "second_half_pool_id" field.</summary>
    public const int SecondHalfPoolIdFieldNumber = 7;
    private int secondHalfPoolId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SecondHalfPoolId {
      get { return secondHalfPoolId_; }
      set {
        secondHalfPoolId_ = value;
      }
    }

    /// <summary>Field number for the "s_h_affix_id" field.</summary>
    public const int SHAffixIdFieldNumber = 8;
    private static readonly pb::FieldCodec<int> _repeated_sHAffixId_codec
        = pb::FieldCodec.ForInt32(66);
    private readonly pbc::RepeatedField<int> sHAffixId_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> SHAffixId {
      get { return sHAffixId_; }
    }

    /// <summary>Field number for the "s_h_boss_id" field.</summary>
    public const int SHBossIdFieldNumber = 9;
    private int sHBossId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SHBossId {
      get { return sHBossId_; }
      set {
        sHBossId_ = value;
      }
    }

    /// <summary>Field number for the "special_enemy_set_id" field.</summary>
    public const int SpecialEnemySetIdFieldNumber = 10;
    private string specialEnemySetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SpecialEnemySetId {
      get { return specialEnemySetId_; }
      set {
        specialEnemySetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "treasure_set_id" field.</summary>
    public const int TreasureSetIdFieldNumber = 11;
    private string treasureSetId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string TreasureSetId {
      get { return treasureSetId_; }
      set {
        treasureSetId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as VampireFloor);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(VampireFloor other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MapId != other.MapId) return false;
      if(!waveCount_.Equals(other.waveCount_)) return false;
      if (FirstHalfPoolId != other.FirstHalfPoolId) return false;
      if(!fHAffixId_.Equals(other.fHAffixId_)) return false;
      if (FHBossId != other.FHBossId) return false;
      if (SecondHalfPoolId != other.SecondHalfPoolId) return false;
      if(!sHAffixId_.Equals(other.sHAffixId_)) return false;
      if (SHBossId != other.SHBossId) return false;
      if (SpecialEnemySetId != other.SpecialEnemySetId) return false;
      if (TreasureSetId != other.TreasureSetId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MapId != 0) hash ^= MapId.GetHashCode();
      hash ^= waveCount_.GetHashCode();
      if (FirstHalfPoolId != 0) hash ^= FirstHalfPoolId.GetHashCode();
      hash ^= fHAffixId_.GetHashCode();
      if (FHBossId != 0) hash ^= FHBossId.GetHashCode();
      if (SecondHalfPoolId != 0) hash ^= SecondHalfPoolId.GetHashCode();
      hash ^= sHAffixId_.GetHashCode();
      if (SHBossId != 0) hash ^= SHBossId.GetHashCode();
      if (SpecialEnemySetId.Length != 0) hash ^= SpecialEnemySetId.GetHashCode();
      if (TreasureSetId.Length != 0) hash ^= TreasureSetId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
      waveCount_.WriteTo(output, _repeated_waveCount_codec);
      if (FirstHalfPoolId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstHalfPoolId);
      }
      fHAffixId_.WriteTo(output, _repeated_fHAffixId_codec);
      if (FHBossId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FHBossId);
      }
      if (SecondHalfPoolId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SecondHalfPoolId);
      }
      sHAffixId_.WriteTo(output, _repeated_sHAffixId_codec);
      if (SHBossId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SHBossId);
      }
      if (SpecialEnemySetId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SpecialEnemySetId);
      }
      if (TreasureSetId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TreasureSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MapId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MapId);
      }
      waveCount_.WriteTo(ref output, _repeated_waveCount_codec);
      if (FirstHalfPoolId != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FirstHalfPoolId);
      }
      fHAffixId_.WriteTo(ref output, _repeated_fHAffixId_codec);
      if (FHBossId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FHBossId);
      }
      if (SecondHalfPoolId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(SecondHalfPoolId);
      }
      sHAffixId_.WriteTo(ref output, _repeated_sHAffixId_codec);
      if (SHBossId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(SHBossId);
      }
      if (SpecialEnemySetId.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SpecialEnemySetId);
      }
      if (TreasureSetId.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(TreasureSetId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MapId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MapId);
      }
      size += waveCount_.CalculateSize(_repeated_waveCount_codec);
      if (FirstHalfPoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FirstHalfPoolId);
      }
      size += fHAffixId_.CalculateSize(_repeated_fHAffixId_codec);
      if (FHBossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FHBossId);
      }
      if (SecondHalfPoolId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SecondHalfPoolId);
      }
      size += sHAffixId_.CalculateSize(_repeated_sHAffixId_codec);
      if (SHBossId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SHBossId);
      }
      if (SpecialEnemySetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SpecialEnemySetId);
      }
      if (TreasureSetId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TreasureSetId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(VampireFloor other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MapId != 0) {
        MapId = other.MapId;
      }
      waveCount_.Add(other.waveCount_);
      if (other.FirstHalfPoolId != 0) {
        FirstHalfPoolId = other.FirstHalfPoolId;
      }
      fHAffixId_.Add(other.fHAffixId_);
      if (other.FHBossId != 0) {
        FHBossId = other.FHBossId;
      }
      if (other.SecondHalfPoolId != 0) {
        SecondHalfPoolId = other.SecondHalfPoolId;
      }
      sHAffixId_.Add(other.sHAffixId_);
      if (other.SHBossId != 0) {
        SHBossId = other.SHBossId;
      }
      if (other.SpecialEnemySetId.Length != 0) {
        SpecialEnemySetId = other.SpecialEnemySetId;
      }
      if (other.TreasureSetId.Length != 0) {
        TreasureSetId = other.TreasureSetId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            waveCount_.AddEntriesFrom(input, _repeated_waveCount_codec);
            break;
          }
          case 32: {
            FirstHalfPoolId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            fHAffixId_.AddEntriesFrom(input, _repeated_fHAffixId_codec);
            break;
          }
          case 48: {
            FHBossId = input.ReadInt32();
            break;
          }
          case 56: {
            SecondHalfPoolId = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            sHAffixId_.AddEntriesFrom(input, _repeated_sHAffixId_codec);
            break;
          }
          case 72: {
            SHBossId = input.ReadInt32();
            break;
          }
          case 82: {
            SpecialEnemySetId = input.ReadString();
            break;
          }
          case 90: {
            TreasureSetId = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MapId = input.ReadInt32();
            break;
          }
          case 26:
          case 24: {
            waveCount_.AddEntriesFrom(ref input, _repeated_waveCount_codec);
            break;
          }
          case 32: {
            FirstHalfPoolId = input.ReadInt32();
            break;
          }
          case 42:
          case 40: {
            fHAffixId_.AddEntriesFrom(ref input, _repeated_fHAffixId_codec);
            break;
          }
          case 48: {
            FHBossId = input.ReadInt32();
            break;
          }
          case 56: {
            SecondHalfPoolId = input.ReadInt32();
            break;
          }
          case 66:
          case 64: {
            sHAffixId_.AddEntriesFrom(ref input, _repeated_sHAffixId_codec);
            break;
          }
          case 72: {
            SHBossId = input.ReadInt32();
            break;
          }
          case 82: {
            SpecialEnemySetId = input.ReadString();
            break;
          }
          case 90: {
            TreasureSetId = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
