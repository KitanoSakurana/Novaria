// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: RandomLevelMonster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from RandomLevelMonster.proto</summary>
  public static partial class RandomLevelMonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for RandomLevelMonster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RandomLevelMonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChhSYW5kb21MZXZlbE1vbnN0ZXIucHJvdG8i0QYKElJhbmRvbUxldmVsTW9u",
            "c3RlchIKCgJpZBgBIAEoBRIMCgRuYW1lGAIgASgJEg8KB2VwaWNfbHYYAyAB",
            "KAUSEgoKYmxvb2RfdHlwZRgEIAEoBRINCgVlX2VfdBgFIAEoBRIOCgZmX2Nf",
            "aWQYBiABKAUSDgoGZl9hX2lkGAcgASgFEhAKCG1vdl90eXBlGAggASgFEg8K",
            "B3J1bl9zcGQYCSABKAUSFwoPdHJhbnNfc3BkX3NjYWxlGAogASgFEhAKCHdh",
            "bGtfc3BkGAsgASgFEg8KB21vdl9hY2MYDCABKAUSEgoKdmlzaW9uX3JuZxgN",
            "IAEoBRISCgp2aXNpb25fZGVnGA4gASgFEhAKCGhlYXJfcm5nGA8gASgFEg8K",
            "B3JlZl9ybmcYECABKAUSDwoHYWN0X3JuZxgRIAEoBRITCgtkaXNfYWN0X3Ju",
            "ZxgSIAEoBRIPCgdyb3Rfc3BkGBMgASgFEhAKCHRlbXBsZXRlGBQgASgFEg0K",
            "BXdfZV9wGBUgASgFEg0KBWZfZV9wGBYgASgFEg0KBXNfZV9wGBcgASgFEg0K",
            "BWFfZV9wGBggASgFEg0KBWxfZV9wGBkgASgFEg0KBWRfZV9wGBogASgFEg0K",
            "BXdfZV9lGBsgASgFEg0KBWZfZV9lGBwgASgFEg0KBXNfZV9lGB0gASgFEg0K",
            "BWFfZV9lGB4gASgFEg0KBWxfZV9lGB8gASgFEg0KBWRfZV9lGCAgASgFEg0K",
            "BXdfZV9yGCEgASgFEg0KBWZfZV9yGCIgASgFEg0KBXNfZV9yGCMgASgFEg0K",
            "BWFfZV9yGCQgASgFEg0KBWxfZV9yGCUgASgFEg0KBWRfZV9yGCYgASgFEhAK",
            "CGJ1ZmZfaWRzGCcgAygFEg4KBndlaWdodBgoIAEoBRIUCgx0cmFwX3RhZ19p",
            "ZHMYKSADKAUSDwoHZmFjdGlvbhgqIAEoBRISCgpzdXBfY2hhcmdlGCsgASgF",
            "EhMKC2lzX3Nob3dfcm5nGCwgASgIEhQKDHRyYXBfYXR0cl9pZBgtIAEoBRIM",
            "CgR0YWcxGC4gASgJEgwKBHRhZzIYLyABKAkSDAoEdGFnMxgwIAEoCRIMCgR0",
            "YWc0GDEgASgJEgwKBHRhZzUYMiABKAlCDqoCC05vdmEuQ2xpZW50YgZwcm90",
            "bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.RandomLevelMonster), global::Nova.Client.RandomLevelMonster.Parser, new[]{ "Id", "Name", "EpicLv", "BloodType", "EET", "FCId", "FAId", "MovType", "RunSpd", "TransSpdScale", "WalkSpd", "MovAcc", "VisionRng", "VisionDeg", "HearRng", "RefRng", "ActRng", "DisActRng", "RotSpd", "Templete", "WEP", "FEP", "SEP", "AEP", "LEP", "DEP", "WEE", "FEE", "SEE", "AEE", "LEE", "DEE", "WER", "FER", "SER", "AER", "LER", "DER", "BuffIds", "Weight", "TrapTagIds", "Faction", "SupCharge", "IsShowRng", "TrapAttrId", "Tag1", "Tag2", "Tag3", "Tag4", "Tag5" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class RandomLevelMonster : pb::IMessage<RandomLevelMonster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<RandomLevelMonster> _parser = new pb::MessageParser<RandomLevelMonster>(() => new RandomLevelMonster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<RandomLevelMonster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.RandomLevelMonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandomLevelMonster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandomLevelMonster(RandomLevelMonster other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      epicLv_ = other.epicLv_;
      bloodType_ = other.bloodType_;
      eET_ = other.eET_;
      fCId_ = other.fCId_;
      fAId_ = other.fAId_;
      movType_ = other.movType_;
      runSpd_ = other.runSpd_;
      transSpdScale_ = other.transSpdScale_;
      walkSpd_ = other.walkSpd_;
      movAcc_ = other.movAcc_;
      visionRng_ = other.visionRng_;
      visionDeg_ = other.visionDeg_;
      hearRng_ = other.hearRng_;
      refRng_ = other.refRng_;
      actRng_ = other.actRng_;
      disActRng_ = other.disActRng_;
      rotSpd_ = other.rotSpd_;
      templete_ = other.templete_;
      wEP_ = other.wEP_;
      fEP_ = other.fEP_;
      sEP_ = other.sEP_;
      aEP_ = other.aEP_;
      lEP_ = other.lEP_;
      dEP_ = other.dEP_;
      wEE_ = other.wEE_;
      fEE_ = other.fEE_;
      sEE_ = other.sEE_;
      aEE_ = other.aEE_;
      lEE_ = other.lEE_;
      dEE_ = other.dEE_;
      wER_ = other.wER_;
      fER_ = other.fER_;
      sER_ = other.sER_;
      aER_ = other.aER_;
      lER_ = other.lER_;
      dER_ = other.dER_;
      buffIds_ = other.buffIds_.Clone();
      weight_ = other.weight_;
      trapTagIds_ = other.trapTagIds_.Clone();
      faction_ = other.faction_;
      supCharge_ = other.supCharge_;
      isShowRng_ = other.isShowRng_;
      trapAttrId_ = other.trapAttrId_;
      tag1_ = other.tag1_;
      tag2_ = other.tag2_;
      tag3_ = other.tag3_;
      tag4_ = other.tag4_;
      tag5_ = other.tag5_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public RandomLevelMonster Clone() {
      return new RandomLevelMonster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "epic_lv" field.</summary>
    public const int EpicLvFieldNumber = 3;
    private int epicLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EpicLv {
      get { return epicLv_; }
      set {
        epicLv_ = value;
      }
    }

    /// <summary>Field number for the "blood_type" field.</summary>
    public const int BloodTypeFieldNumber = 4;
    private int bloodType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodType {
      get { return bloodType_; }
      set {
        bloodType_ = value;
      }
    }

    /// <summary>Field number for the "e_e_t" field.</summary>
    public const int EETFieldNumber = 5;
    private int eET_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EET {
      get { return eET_; }
      set {
        eET_ = value;
      }
    }

    /// <summary>Field number for the "f_c_id" field.</summary>
    public const int FCIdFieldNumber = 6;
    private int fCId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FCId {
      get { return fCId_; }
      set {
        fCId_ = value;
      }
    }

    /// <summary>Field number for the "f_a_id" field.</summary>
    public const int FAIdFieldNumber = 7;
    private int fAId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FAId {
      get { return fAId_; }
      set {
        fAId_ = value;
      }
    }

    /// <summary>Field number for the "mov_type" field.</summary>
    public const int MovTypeFieldNumber = 8;
    private int movType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovType {
      get { return movType_; }
      set {
        movType_ = value;
      }
    }

    /// <summary>Field number for the "run_spd" field.</summary>
    public const int RunSpdFieldNumber = 9;
    private int runSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RunSpd {
      get { return runSpd_; }
      set {
        runSpd_ = value;
      }
    }

    /// <summary>Field number for the "trans_spd_scale" field.</summary>
    public const int TransSpdScaleFieldNumber = 10;
    private int transSpdScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TransSpdScale {
      get { return transSpdScale_; }
      set {
        transSpdScale_ = value;
      }
    }

    /// <summary>Field number for the "walk_spd" field.</summary>
    public const int WalkSpdFieldNumber = 11;
    private int walkSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WalkSpd {
      get { return walkSpd_; }
      set {
        walkSpd_ = value;
      }
    }

    /// <summary>Field number for the "mov_acc" field.</summary>
    public const int MovAccFieldNumber = 12;
    private int movAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovAcc {
      get { return movAcc_; }
      set {
        movAcc_ = value;
      }
    }

    /// <summary>Field number for the "vision_rng" field.</summary>
    public const int VisionRngFieldNumber = 13;
    private int visionRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionRng {
      get { return visionRng_; }
      set {
        visionRng_ = value;
      }
    }

    /// <summary>Field number for the "vision_deg" field.</summary>
    public const int VisionDegFieldNumber = 14;
    private int visionDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionDeg {
      get { return visionDeg_; }
      set {
        visionDeg_ = value;
      }
    }

    /// <summary>Field number for the "hear_rng" field.</summary>
    public const int HearRngFieldNumber = 15;
    private int hearRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HearRng {
      get { return hearRng_; }
      set {
        hearRng_ = value;
      }
    }

    /// <summary>Field number for the "ref_rng" field.</summary>
    public const int RefRngFieldNumber = 16;
    private int refRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefRng {
      get { return refRng_; }
      set {
        refRng_ = value;
      }
    }

    /// <summary>Field number for the "act_rng" field.</summary>
    public const int ActRngFieldNumber = 17;
    private int actRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActRng {
      get { return actRng_; }
      set {
        actRng_ = value;
      }
    }

    /// <summary>Field number for the "dis_act_rng" field.</summary>
    public const int DisActRngFieldNumber = 18;
    private int disActRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DisActRng {
      get { return disActRng_; }
      set {
        disActRng_ = value;
      }
    }

    /// <summary>Field number for the "rot_spd" field.</summary>
    public const int RotSpdFieldNumber = 19;
    private int rotSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotSpd {
      get { return rotSpd_; }
      set {
        rotSpd_ = value;
      }
    }

    /// <summary>Field number for the "templete" field.</summary>
    public const int TempleteFieldNumber = 20;
    private int templete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Templete {
      get { return templete_; }
      set {
        templete_ = value;
      }
    }

    /// <summary>Field number for the "w_e_p" field.</summary>
    public const int WEPFieldNumber = 21;
    private int wEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEP {
      get { return wEP_; }
      set {
        wEP_ = value;
      }
    }

    /// <summary>Field number for the "f_e_p" field.</summary>
    public const int FEPFieldNumber = 22;
    private int fEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEP {
      get { return fEP_; }
      set {
        fEP_ = value;
      }
    }

    /// <summary>Field number for the "s_e_p" field.</summary>
    public const int SEPFieldNumber = 23;
    private int sEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEP {
      get { return sEP_; }
      set {
        sEP_ = value;
      }
    }

    /// <summary>Field number for the "a_e_p" field.</summary>
    public const int AEPFieldNumber = 24;
    private int aEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEP {
      get { return aEP_; }
      set {
        aEP_ = value;
      }
    }

    /// <summary>Field number for the "l_e_p" field.</summary>
    public const int LEPFieldNumber = 25;
    private int lEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEP {
      get { return lEP_; }
      set {
        lEP_ = value;
      }
    }

    /// <summary>Field number for the "d_e_p" field.</summary>
    public const int DEPFieldNumber = 26;
    private int dEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEP {
      get { return dEP_; }
      set {
        dEP_ = value;
      }
    }

    /// <summary>Field number for the "w_e_e" field.</summary>
    public const int WEEFieldNumber = 27;
    private int wEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEE {
      get { return wEE_; }
      set {
        wEE_ = value;
      }
    }

    /// <summary>Field number for the "f_e_e" field.</summary>
    public const int FEEFieldNumber = 28;
    private int fEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEE {
      get { return fEE_; }
      set {
        fEE_ = value;
      }
    }

    /// <summary>Field number for the "s_e_e" field.</summary>
    public const int SEEFieldNumber = 29;
    private int sEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEE {
      get { return sEE_; }
      set {
        sEE_ = value;
      }
    }

    /// <summary>Field number for the "a_e_e" field.</summary>
    public const int AEEFieldNumber = 30;
    private int aEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEE {
      get { return aEE_; }
      set {
        aEE_ = value;
      }
    }

    /// <summary>Field number for the "l_e_e" field.</summary>
    public const int LEEFieldNumber = 31;
    private int lEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEE {
      get { return lEE_; }
      set {
        lEE_ = value;
      }
    }

    /// <summary>Field number for the "d_e_e" field.</summary>
    public const int DEEFieldNumber = 32;
    private int dEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEE {
      get { return dEE_; }
      set {
        dEE_ = value;
      }
    }

    /// <summary>Field number for the "w_e_r" field.</summary>
    public const int WERFieldNumber = 33;
    private int wER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WER {
      get { return wER_; }
      set {
        wER_ = value;
      }
    }

    /// <summary>Field number for the "f_e_r" field.</summary>
    public const int FERFieldNumber = 34;
    private int fER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FER {
      get { return fER_; }
      set {
        fER_ = value;
      }
    }

    /// <summary>Field number for the "s_e_r" field.</summary>
    public const int SERFieldNumber = 35;
    private int sER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SER {
      get { return sER_; }
      set {
        sER_ = value;
      }
    }

    /// <summary>Field number for the "a_e_r" field.</summary>
    public const int AERFieldNumber = 36;
    private int aER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AER {
      get { return aER_; }
      set {
        aER_ = value;
      }
    }

    /// <summary>Field number for the "l_e_r" field.</summary>
    public const int LERFieldNumber = 37;
    private int lER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LER {
      get { return lER_; }
      set {
        lER_ = value;
      }
    }

    /// <summary>Field number for the "d_e_r" field.</summary>
    public const int DERFieldNumber = 38;
    private int dER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DER {
      get { return dER_; }
      set {
        dER_ = value;
      }
    }

    /// <summary>Field number for the "buff_ids" field.</summary>
    public const int BuffIdsFieldNumber = 39;
    private static readonly pb::FieldCodec<int> _repeated_buffIds_codec
        = pb::FieldCodec.ForInt32(314);
    private readonly pbc::RepeatedField<int> buffIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BuffIds {
      get { return buffIds_; }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 40;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "trap_tag_ids" field.</summary>
    public const int TrapTagIdsFieldNumber = 41;
    private static readonly pb::FieldCodec<int> _repeated_trapTagIds_codec
        = pb::FieldCodec.ForInt32(330);
    private readonly pbc::RepeatedField<int> trapTagIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TrapTagIds {
      get { return trapTagIds_; }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 42;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "sup_charge" field.</summary>
    public const int SupChargeFieldNumber = 43;
    private int supCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SupCharge {
      get { return supCharge_; }
      set {
        supCharge_ = value;
      }
    }

    /// <summary>Field number for the "is_show_rng" field.</summary>
    public const int IsShowRngFieldNumber = 44;
    private bool isShowRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsShowRng {
      get { return isShowRng_; }
      set {
        isShowRng_ = value;
      }
    }

    /// <summary>Field number for the "trap_attr_id" field.</summary>
    public const int TrapAttrIdFieldNumber = 45;
    private int trapAttrId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TrapAttrId {
      get { return trapAttrId_; }
      set {
        trapAttrId_ = value;
      }
    }

    /// <summary>Field number for the "tag1" field.</summary>
    public const int Tag1FieldNumber = 46;
    private string tag1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag1 {
      get { return tag1_; }
      set {
        tag1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag2" field.</summary>
    public const int Tag2FieldNumber = 47;
    private string tag2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag2 {
      get { return tag2_; }
      set {
        tag2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag3" field.</summary>
    public const int Tag3FieldNumber = 48;
    private string tag3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag3 {
      get { return tag3_; }
      set {
        tag3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag4" field.</summary>
    public const int Tag4FieldNumber = 49;
    private string tag4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag4 {
      get { return tag4_; }
      set {
        tag4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag5" field.</summary>
    public const int Tag5FieldNumber = 50;
    private string tag5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag5 {
      get { return tag5_; }
      set {
        tag5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as RandomLevelMonster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(RandomLevelMonster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (EpicLv != other.EpicLv) return false;
      if (BloodType != other.BloodType) return false;
      if (EET != other.EET) return false;
      if (FCId != other.FCId) return false;
      if (FAId != other.FAId) return false;
      if (MovType != other.MovType) return false;
      if (RunSpd != other.RunSpd) return false;
      if (TransSpdScale != other.TransSpdScale) return false;
      if (WalkSpd != other.WalkSpd) return false;
      if (MovAcc != other.MovAcc) return false;
      if (VisionRng != other.VisionRng) return false;
      if (VisionDeg != other.VisionDeg) return false;
      if (HearRng != other.HearRng) return false;
      if (RefRng != other.RefRng) return false;
      if (ActRng != other.ActRng) return false;
      if (DisActRng != other.DisActRng) return false;
      if (RotSpd != other.RotSpd) return false;
      if (Templete != other.Templete) return false;
      if (WEP != other.WEP) return false;
      if (FEP != other.FEP) return false;
      if (SEP != other.SEP) return false;
      if (AEP != other.AEP) return false;
      if (LEP != other.LEP) return false;
      if (DEP != other.DEP) return false;
      if (WEE != other.WEE) return false;
      if (FEE != other.FEE) return false;
      if (SEE != other.SEE) return false;
      if (AEE != other.AEE) return false;
      if (LEE != other.LEE) return false;
      if (DEE != other.DEE) return false;
      if (WER != other.WER) return false;
      if (FER != other.FER) return false;
      if (SER != other.SER) return false;
      if (AER != other.AER) return false;
      if (LER != other.LER) return false;
      if (DER != other.DER) return false;
      if(!buffIds_.Equals(other.buffIds_)) return false;
      if (Weight != other.Weight) return false;
      if(!trapTagIds_.Equals(other.trapTagIds_)) return false;
      if (Faction != other.Faction) return false;
      if (SupCharge != other.SupCharge) return false;
      if (IsShowRng != other.IsShowRng) return false;
      if (TrapAttrId != other.TrapAttrId) return false;
      if (Tag1 != other.Tag1) return false;
      if (Tag2 != other.Tag2) return false;
      if (Tag3 != other.Tag3) return false;
      if (Tag4 != other.Tag4) return false;
      if (Tag5 != other.Tag5) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (EpicLv != 0) hash ^= EpicLv.GetHashCode();
      if (BloodType != 0) hash ^= BloodType.GetHashCode();
      if (EET != 0) hash ^= EET.GetHashCode();
      if (FCId != 0) hash ^= FCId.GetHashCode();
      if (FAId != 0) hash ^= FAId.GetHashCode();
      if (MovType != 0) hash ^= MovType.GetHashCode();
      if (RunSpd != 0) hash ^= RunSpd.GetHashCode();
      if (TransSpdScale != 0) hash ^= TransSpdScale.GetHashCode();
      if (WalkSpd != 0) hash ^= WalkSpd.GetHashCode();
      if (MovAcc != 0) hash ^= MovAcc.GetHashCode();
      if (VisionRng != 0) hash ^= VisionRng.GetHashCode();
      if (VisionDeg != 0) hash ^= VisionDeg.GetHashCode();
      if (HearRng != 0) hash ^= HearRng.GetHashCode();
      if (RefRng != 0) hash ^= RefRng.GetHashCode();
      if (ActRng != 0) hash ^= ActRng.GetHashCode();
      if (DisActRng != 0) hash ^= DisActRng.GetHashCode();
      if (RotSpd != 0) hash ^= RotSpd.GetHashCode();
      if (Templete != 0) hash ^= Templete.GetHashCode();
      if (WEP != 0) hash ^= WEP.GetHashCode();
      if (FEP != 0) hash ^= FEP.GetHashCode();
      if (SEP != 0) hash ^= SEP.GetHashCode();
      if (AEP != 0) hash ^= AEP.GetHashCode();
      if (LEP != 0) hash ^= LEP.GetHashCode();
      if (DEP != 0) hash ^= DEP.GetHashCode();
      if (WEE != 0) hash ^= WEE.GetHashCode();
      if (FEE != 0) hash ^= FEE.GetHashCode();
      if (SEE != 0) hash ^= SEE.GetHashCode();
      if (AEE != 0) hash ^= AEE.GetHashCode();
      if (LEE != 0) hash ^= LEE.GetHashCode();
      if (DEE != 0) hash ^= DEE.GetHashCode();
      if (WER != 0) hash ^= WER.GetHashCode();
      if (FER != 0) hash ^= FER.GetHashCode();
      if (SER != 0) hash ^= SER.GetHashCode();
      if (AER != 0) hash ^= AER.GetHashCode();
      if (LER != 0) hash ^= LER.GetHashCode();
      if (DER != 0) hash ^= DER.GetHashCode();
      hash ^= buffIds_.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      hash ^= trapTagIds_.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      if (SupCharge != 0) hash ^= SupCharge.GetHashCode();
      if (IsShowRng != false) hash ^= IsShowRng.GetHashCode();
      if (TrapAttrId != 0) hash ^= TrapAttrId.GetHashCode();
      if (Tag1.Length != 0) hash ^= Tag1.GetHashCode();
      if (Tag2.Length != 0) hash ^= Tag2.GetHashCode();
      if (Tag3.Length != 0) hash ^= Tag3.GetHashCode();
      if (Tag4.Length != 0) hash ^= Tag4.GetHashCode();
      if (Tag5.Length != 0) hash ^= Tag5.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (EpicLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EpicLv);
      }
      if (BloodType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BloodType);
      }
      if (EET != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EET);
      }
      if (FCId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FCId);
      }
      if (FAId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FAId);
      }
      if (MovType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MovType);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RunSpd);
      }
      if (TransSpdScale != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TransSpdScale);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WalkSpd);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MovAcc);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VisionRng);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VisionDeg);
      }
      if (HearRng != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HearRng);
      }
      if (RefRng != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RefRng);
      }
      if (ActRng != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ActRng);
      }
      if (DisActRng != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DisActRng);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RotSpd);
      }
      if (Templete != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Templete);
      }
      if (WEP != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(WEP);
      }
      if (FEP != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(FEP);
      }
      if (SEP != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SEP);
      }
      if (AEP != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AEP);
      }
      if (LEP != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LEP);
      }
      if (DEP != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DEP);
      }
      if (WEE != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(WEE);
      }
      if (FEE != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(FEE);
      }
      if (SEE != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SEE);
      }
      if (AEE != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(AEE);
      }
      if (LEE != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(LEE);
      }
      if (DEE != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DEE);
      }
      if (WER != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(WER);
      }
      if (FER != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(FER);
      }
      if (SER != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(SER);
      }
      if (AER != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(AER);
      }
      if (LER != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(LER);
      }
      if (DER != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(DER);
      }
      buffIds_.WriteTo(output, _repeated_buffIds_codec);
      if (Weight != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Weight);
      }
      trapTagIds_.WriteTo(output, _repeated_trapTagIds_codec);
      if (Faction != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Faction);
      }
      if (SupCharge != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SupCharge);
      }
      if (IsShowRng != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsShowRng);
      }
      if (TrapAttrId != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(TrapAttrId);
      }
      if (Tag1.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(Tag1);
      }
      if (Tag2.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Tag2);
      }
      if (Tag3.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tag3);
      }
      if (Tag4.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Tag4);
      }
      if (Tag5.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Tag5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (EpicLv != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(EpicLv);
      }
      if (BloodType != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(BloodType);
      }
      if (EET != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(EET);
      }
      if (FCId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FCId);
      }
      if (FAId != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FAId);
      }
      if (MovType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(MovType);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(RunSpd);
      }
      if (TransSpdScale != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(TransSpdScale);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(WalkSpd);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MovAcc);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(VisionRng);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(VisionDeg);
      }
      if (HearRng != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(HearRng);
      }
      if (RefRng != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(RefRng);
      }
      if (ActRng != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ActRng);
      }
      if (DisActRng != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(DisActRng);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(RotSpd);
      }
      if (Templete != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Templete);
      }
      if (WEP != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(WEP);
      }
      if (FEP != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(FEP);
      }
      if (SEP != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(SEP);
      }
      if (AEP != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(AEP);
      }
      if (LEP != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(LEP);
      }
      if (DEP != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(DEP);
      }
      if (WEE != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(WEE);
      }
      if (FEE != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(FEE);
      }
      if (SEE != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SEE);
      }
      if (AEE != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(AEE);
      }
      if (LEE != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(LEE);
      }
      if (DEE != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(DEE);
      }
      if (WER != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(WER);
      }
      if (FER != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(FER);
      }
      if (SER != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(SER);
      }
      if (AER != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(AER);
      }
      if (LER != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(LER);
      }
      if (DER != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(DER);
      }
      buffIds_.WriteTo(ref output, _repeated_buffIds_codec);
      if (Weight != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(Weight);
      }
      trapTagIds_.WriteTo(ref output, _repeated_trapTagIds_codec);
      if (Faction != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(Faction);
      }
      if (SupCharge != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SupCharge);
      }
      if (IsShowRng != false) {
        output.WriteRawTag(224, 2);
        output.WriteBool(IsShowRng);
      }
      if (TrapAttrId != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(TrapAttrId);
      }
      if (Tag1.Length != 0) {
        output.WriteRawTag(242, 2);
        output.WriteString(Tag1);
      }
      if (Tag2.Length != 0) {
        output.WriteRawTag(250, 2);
        output.WriteString(Tag2);
      }
      if (Tag3.Length != 0) {
        output.WriteRawTag(130, 3);
        output.WriteString(Tag3);
      }
      if (Tag4.Length != 0) {
        output.WriteRawTag(138, 3);
        output.WriteString(Tag4);
      }
      if (Tag5.Length != 0) {
        output.WriteRawTag(146, 3);
        output.WriteString(Tag5);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EpicLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EpicLv);
      }
      if (BloodType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodType);
      }
      if (EET != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EET);
      }
      if (FCId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FCId);
      }
      if (FAId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FAId);
      }
      if (MovType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovType);
      }
      if (RunSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunSpd);
      }
      if (TransSpdScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransSpdScale);
      }
      if (WalkSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WalkSpd);
      }
      if (MovAcc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovAcc);
      }
      if (VisionRng != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VisionRng);
      }
      if (VisionDeg != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VisionDeg);
      }
      if (HearRng != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(HearRng);
      }
      if (RefRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefRng);
      }
      if (ActRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActRng);
      }
      if (DisActRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisActRng);
      }
      if (RotSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotSpd);
      }
      if (Templete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Templete);
      }
      if (WEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEP);
      }
      if (FEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEP);
      }
      if (SEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEP);
      }
      if (AEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEP);
      }
      if (LEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEP);
      }
      if (DEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEP);
      }
      if (WEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEE);
      }
      if (FEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEE);
      }
      if (SEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEE);
      }
      if (AEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEE);
      }
      if (LEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEE);
      }
      if (DEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEE);
      }
      if (WER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WER);
      }
      if (FER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FER);
      }
      if (SER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SER);
      }
      if (AER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AER);
      }
      if (LER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LER);
      }
      if (DER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DER);
      }
      size += buffIds_.CalculateSize(_repeated_buffIds_codec);
      if (Weight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      size += trapTagIds_.CalculateSize(_repeated_trapTagIds_codec);
      if (Faction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      if (SupCharge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupCharge);
      }
      if (IsShowRng != false) {
        size += 2 + 1;
      }
      if (TrapAttrId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(TrapAttrId);
      }
      if (Tag1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag1);
      }
      if (Tag2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag2);
      }
      if (Tag3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag3);
      }
      if (Tag4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag4);
      }
      if (Tag5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag5);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(RandomLevelMonster other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.EpicLv != 0) {
        EpicLv = other.EpicLv;
      }
      if (other.BloodType != 0) {
        BloodType = other.BloodType;
      }
      if (other.EET != 0) {
        EET = other.EET;
      }
      if (other.FCId != 0) {
        FCId = other.FCId;
      }
      if (other.FAId != 0) {
        FAId = other.FAId;
      }
      if (other.MovType != 0) {
        MovType = other.MovType;
      }
      if (other.RunSpd != 0) {
        RunSpd = other.RunSpd;
      }
      if (other.TransSpdScale != 0) {
        TransSpdScale = other.TransSpdScale;
      }
      if (other.WalkSpd != 0) {
        WalkSpd = other.WalkSpd;
      }
      if (other.MovAcc != 0) {
        MovAcc = other.MovAcc;
      }
      if (other.VisionRng != 0) {
        VisionRng = other.VisionRng;
      }
      if (other.VisionDeg != 0) {
        VisionDeg = other.VisionDeg;
      }
      if (other.HearRng != 0) {
        HearRng = other.HearRng;
      }
      if (other.RefRng != 0) {
        RefRng = other.RefRng;
      }
      if (other.ActRng != 0) {
        ActRng = other.ActRng;
      }
      if (other.DisActRng != 0) {
        DisActRng = other.DisActRng;
      }
      if (other.RotSpd != 0) {
        RotSpd = other.RotSpd;
      }
      if (other.Templete != 0) {
        Templete = other.Templete;
      }
      if (other.WEP != 0) {
        WEP = other.WEP;
      }
      if (other.FEP != 0) {
        FEP = other.FEP;
      }
      if (other.SEP != 0) {
        SEP = other.SEP;
      }
      if (other.AEP != 0) {
        AEP = other.AEP;
      }
      if (other.LEP != 0) {
        LEP = other.LEP;
      }
      if (other.DEP != 0) {
        DEP = other.DEP;
      }
      if (other.WEE != 0) {
        WEE = other.WEE;
      }
      if (other.FEE != 0) {
        FEE = other.FEE;
      }
      if (other.SEE != 0) {
        SEE = other.SEE;
      }
      if (other.AEE != 0) {
        AEE = other.AEE;
      }
      if (other.LEE != 0) {
        LEE = other.LEE;
      }
      if (other.DEE != 0) {
        DEE = other.DEE;
      }
      if (other.WER != 0) {
        WER = other.WER;
      }
      if (other.FER != 0) {
        FER = other.FER;
      }
      if (other.SER != 0) {
        SER = other.SER;
      }
      if (other.AER != 0) {
        AER = other.AER;
      }
      if (other.LER != 0) {
        LER = other.LER;
      }
      if (other.DER != 0) {
        DER = other.DER;
      }
      buffIds_.Add(other.buffIds_);
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      trapTagIds_.Add(other.trapTagIds_);
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      if (other.SupCharge != 0) {
        SupCharge = other.SupCharge;
      }
      if (other.IsShowRng != false) {
        IsShowRng = other.IsShowRng;
      }
      if (other.TrapAttrId != 0) {
        TrapAttrId = other.TrapAttrId;
      }
      if (other.Tag1.Length != 0) {
        Tag1 = other.Tag1;
      }
      if (other.Tag2.Length != 0) {
        Tag2 = other.Tag2;
      }
      if (other.Tag3.Length != 0) {
        Tag3 = other.Tag3;
      }
      if (other.Tag4.Length != 0) {
        Tag4 = other.Tag4;
      }
      if (other.Tag5.Length != 0) {
        Tag5 = other.Tag5;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            EpicLv = input.ReadInt32();
            break;
          }
          case 32: {
            BloodType = input.ReadInt32();
            break;
          }
          case 40: {
            EET = input.ReadInt32();
            break;
          }
          case 48: {
            FCId = input.ReadInt32();
            break;
          }
          case 56: {
            FAId = input.ReadInt32();
            break;
          }
          case 64: {
            MovType = input.ReadInt32();
            break;
          }
          case 72: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 80: {
            TransSpdScale = input.ReadInt32();
            break;
          }
          case 88: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 96: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 104: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 112: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 120: {
            HearRng = input.ReadInt32();
            break;
          }
          case 128: {
            RefRng = input.ReadInt32();
            break;
          }
          case 136: {
            ActRng = input.ReadInt32();
            break;
          }
          case 144: {
            DisActRng = input.ReadInt32();
            break;
          }
          case 152: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 160: {
            Templete = input.ReadInt32();
            break;
          }
          case 168: {
            WEP = input.ReadInt32();
            break;
          }
          case 176: {
            FEP = input.ReadInt32();
            break;
          }
          case 184: {
            SEP = input.ReadInt32();
            break;
          }
          case 192: {
            AEP = input.ReadInt32();
            break;
          }
          case 200: {
            LEP = input.ReadInt32();
            break;
          }
          case 208: {
            DEP = input.ReadInt32();
            break;
          }
          case 216: {
            WEE = input.ReadInt32();
            break;
          }
          case 224: {
            FEE = input.ReadInt32();
            break;
          }
          case 232: {
            SEE = input.ReadInt32();
            break;
          }
          case 240: {
            AEE = input.ReadInt32();
            break;
          }
          case 248: {
            LEE = input.ReadInt32();
            break;
          }
          case 256: {
            DEE = input.ReadInt32();
            break;
          }
          case 264: {
            WER = input.ReadInt32();
            break;
          }
          case 272: {
            FER = input.ReadInt32();
            break;
          }
          case 280: {
            SER = input.ReadInt32();
            break;
          }
          case 288: {
            AER = input.ReadInt32();
            break;
          }
          case 296: {
            LER = input.ReadInt32();
            break;
          }
          case 304: {
            DER = input.ReadInt32();
            break;
          }
          case 314:
          case 312: {
            buffIds_.AddEntriesFrom(input, _repeated_buffIds_codec);
            break;
          }
          case 320: {
            Weight = input.ReadInt32();
            break;
          }
          case 330:
          case 328: {
            trapTagIds_.AddEntriesFrom(input, _repeated_trapTagIds_codec);
            break;
          }
          case 336: {
            Faction = input.ReadInt32();
            break;
          }
          case 344: {
            SupCharge = input.ReadInt32();
            break;
          }
          case 352: {
            IsShowRng = input.ReadBool();
            break;
          }
          case 360: {
            TrapAttrId = input.ReadInt32();
            break;
          }
          case 370: {
            Tag1 = input.ReadString();
            break;
          }
          case 378: {
            Tag2 = input.ReadString();
            break;
          }
          case 386: {
            Tag3 = input.ReadString();
            break;
          }
          case 394: {
            Tag4 = input.ReadString();
            break;
          }
          case 402: {
            Tag5 = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            EpicLv = input.ReadInt32();
            break;
          }
          case 32: {
            BloodType = input.ReadInt32();
            break;
          }
          case 40: {
            EET = input.ReadInt32();
            break;
          }
          case 48: {
            FCId = input.ReadInt32();
            break;
          }
          case 56: {
            FAId = input.ReadInt32();
            break;
          }
          case 64: {
            MovType = input.ReadInt32();
            break;
          }
          case 72: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 80: {
            TransSpdScale = input.ReadInt32();
            break;
          }
          case 88: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 96: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 104: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 112: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 120: {
            HearRng = input.ReadInt32();
            break;
          }
          case 128: {
            RefRng = input.ReadInt32();
            break;
          }
          case 136: {
            ActRng = input.ReadInt32();
            break;
          }
          case 144: {
            DisActRng = input.ReadInt32();
            break;
          }
          case 152: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 160: {
            Templete = input.ReadInt32();
            break;
          }
          case 168: {
            WEP = input.ReadInt32();
            break;
          }
          case 176: {
            FEP = input.ReadInt32();
            break;
          }
          case 184: {
            SEP = input.ReadInt32();
            break;
          }
          case 192: {
            AEP = input.ReadInt32();
            break;
          }
          case 200: {
            LEP = input.ReadInt32();
            break;
          }
          case 208: {
            DEP = input.ReadInt32();
            break;
          }
          case 216: {
            WEE = input.ReadInt32();
            break;
          }
          case 224: {
            FEE = input.ReadInt32();
            break;
          }
          case 232: {
            SEE = input.ReadInt32();
            break;
          }
          case 240: {
            AEE = input.ReadInt32();
            break;
          }
          case 248: {
            LEE = input.ReadInt32();
            break;
          }
          case 256: {
            DEE = input.ReadInt32();
            break;
          }
          case 264: {
            WER = input.ReadInt32();
            break;
          }
          case 272: {
            FER = input.ReadInt32();
            break;
          }
          case 280: {
            SER = input.ReadInt32();
            break;
          }
          case 288: {
            AER = input.ReadInt32();
            break;
          }
          case 296: {
            LER = input.ReadInt32();
            break;
          }
          case 304: {
            DER = input.ReadInt32();
            break;
          }
          case 314:
          case 312: {
            buffIds_.AddEntriesFrom(ref input, _repeated_buffIds_codec);
            break;
          }
          case 320: {
            Weight = input.ReadInt32();
            break;
          }
          case 330:
          case 328: {
            trapTagIds_.AddEntriesFrom(ref input, _repeated_trapTagIds_codec);
            break;
          }
          case 336: {
            Faction = input.ReadInt32();
            break;
          }
          case 344: {
            SupCharge = input.ReadInt32();
            break;
          }
          case 352: {
            IsShowRng = input.ReadBool();
            break;
          }
          case 360: {
            TrapAttrId = input.ReadInt32();
            break;
          }
          case 370: {
            Tag1 = input.ReadString();
            break;
          }
          case 378: {
            Tag2 = input.ReadString();
            break;
          }
          case 386: {
            Tag3 = input.ReadString();
            break;
          }
          case 394: {
            Tag4 = input.ReadString();
            break;
          }
          case 402: {
            Tag5 = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
