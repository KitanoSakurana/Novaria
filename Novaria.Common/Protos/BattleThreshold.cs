// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: BattleThreshold.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from BattleThreshold.proto</summary>
  public static partial class BattleThresholdReflection {

    #region Descriptor
    /// <summary>File descriptor for BattleThreshold.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static BattleThresholdReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVCYXR0bGVUaHJlc2hvbGQucHJvdG8i6AMKD0JhdHRsZVRocmVzaG9sZBIS",
            "CgptaXNzaW9uX2lkGAEgASgFEg8KB3ZlcnNpb24YAiABKAUSFAoMZnJvbV9z",
            "cmNfYXRrGAMgASgFEiEKGWZyb21fcGVya19pbnRlbnNpdHlfcmF0aW8YBCAB",
            "KAUSGwoTZnJvbV9zbG90X2RtZ19yYXRpbxgFIAEoBRIQCghmcm9tX2VfZRgG",
            "IAEoBRIaChJmcm9tX2dlbl9kbWdfcmF0aW8YByABKAUSFQoNZnJvbV9kbWdf",
            "cGx1cxgIIAEoBRIXCg9mcm9tX2NyaXRfcmF0aW8YCSABKAUSHAoUZnJvbV9m",
            "aW5hbF9kbWdfcmF0aW8YCiABKAUSGwoTZnJvbV9maW5hbF9kbWdfcGx1cxgL",
            "IAEoBRITCgt0b19lcl9hbWVuZBgMIAEoBRIUCgx0b19kZWZfYW1lbmQYDSAB",
            "KAUSHQoVdG9fcmNkX3Nsb3RfZG1nX3JhdGlvGA4gASgFEhQKDHRvX2VfZV9y",
            "X2NfZBgPIAEoBRIcChR0b19nZW5fZG1nX3JjZF9yYXRpbxgQIAEoBRIXCg90",
            "b19kbWdfcGx1c19yY2QYESABKAUSCwoDZG1nGBIgASgFEhEKCWNyaXRfcmF0",
            "ZRgTIAEoBRIKCgJocBgUIAEoBUIOqgILTm92YS5DbGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.BattleThreshold), global::Nova.Client.BattleThreshold.Parser, new[]{ "MissionId", "Version", "FromSrcAtk", "FromPerkIntensityRatio", "FromSlotDmgRatio", "FromEE", "FromGenDmgRatio", "FromDmgPlus", "FromCritRatio", "FromFinalDmgRatio", "FromFinalDmgPlus", "ToErAmend", "ToDefAmend", "ToRcdSlotDmgRatio", "ToEERCD", "ToGenDmgRcdRatio", "ToDmgPlusRcd", "Dmg", "CritRate", "Hp" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class BattleThreshold : pb::IMessage<BattleThreshold>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<BattleThreshold> _parser = new pb::MessageParser<BattleThreshold>(() => new BattleThreshold());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<BattleThreshold> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.BattleThresholdReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleThreshold() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleThreshold(BattleThreshold other) : this() {
      missionId_ = other.missionId_;
      version_ = other.version_;
      fromSrcAtk_ = other.fromSrcAtk_;
      fromPerkIntensityRatio_ = other.fromPerkIntensityRatio_;
      fromSlotDmgRatio_ = other.fromSlotDmgRatio_;
      fromEE_ = other.fromEE_;
      fromGenDmgRatio_ = other.fromGenDmgRatio_;
      fromDmgPlus_ = other.fromDmgPlus_;
      fromCritRatio_ = other.fromCritRatio_;
      fromFinalDmgRatio_ = other.fromFinalDmgRatio_;
      fromFinalDmgPlus_ = other.fromFinalDmgPlus_;
      toErAmend_ = other.toErAmend_;
      toDefAmend_ = other.toDefAmend_;
      toRcdSlotDmgRatio_ = other.toRcdSlotDmgRatio_;
      toEERCD_ = other.toEERCD_;
      toGenDmgRcdRatio_ = other.toGenDmgRcdRatio_;
      toDmgPlusRcd_ = other.toDmgPlusRcd_;
      dmg_ = other.dmg_;
      critRate_ = other.critRate_;
      hp_ = other.hp_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public BattleThreshold Clone() {
      return new BattleThreshold(this);
    }

    /// <summary>Field number for the "mission_id" field.</summary>
    public const int MissionIdFieldNumber = 1;
    private int missionId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MissionId {
      get { return missionId_; }
      set {
        missionId_ = value;
      }
    }

    /// <summary>Field number for the "version" field.</summary>
    public const int VersionFieldNumber = 2;
    private int version_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Version {
      get { return version_; }
      set {
        version_ = value;
      }
    }

    /// <summary>Field number for the "from_src_atk" field.</summary>
    public const int FromSrcAtkFieldNumber = 3;
    private int fromSrcAtk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromSrcAtk {
      get { return fromSrcAtk_; }
      set {
        fromSrcAtk_ = value;
      }
    }

    /// <summary>Field number for the "from_perk_intensity_ratio" field.</summary>
    public const int FromPerkIntensityRatioFieldNumber = 4;
    private int fromPerkIntensityRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromPerkIntensityRatio {
      get { return fromPerkIntensityRatio_; }
      set {
        fromPerkIntensityRatio_ = value;
      }
    }

    /// <summary>Field number for the "from_slot_dmg_ratio" field.</summary>
    public const int FromSlotDmgRatioFieldNumber = 5;
    private int fromSlotDmgRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromSlotDmgRatio {
      get { return fromSlotDmgRatio_; }
      set {
        fromSlotDmgRatio_ = value;
      }
    }

    /// <summary>Field number for the "from_e_e" field.</summary>
    public const int FromEEFieldNumber = 6;
    private int fromEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromEE {
      get { return fromEE_; }
      set {
        fromEE_ = value;
      }
    }

    /// <summary>Field number for the "from_gen_dmg_ratio" field.</summary>
    public const int FromGenDmgRatioFieldNumber = 7;
    private int fromGenDmgRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromGenDmgRatio {
      get { return fromGenDmgRatio_; }
      set {
        fromGenDmgRatio_ = value;
      }
    }

    /// <summary>Field number for the "from_dmg_plus" field.</summary>
    public const int FromDmgPlusFieldNumber = 8;
    private int fromDmgPlus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromDmgPlus {
      get { return fromDmgPlus_; }
      set {
        fromDmgPlus_ = value;
      }
    }

    /// <summary>Field number for the "from_crit_ratio" field.</summary>
    public const int FromCritRatioFieldNumber = 9;
    private int fromCritRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromCritRatio {
      get { return fromCritRatio_; }
      set {
        fromCritRatio_ = value;
      }
    }

    /// <summary>Field number for the "from_final_dmg_ratio" field.</summary>
    public const int FromFinalDmgRatioFieldNumber = 10;
    private int fromFinalDmgRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromFinalDmgRatio {
      get { return fromFinalDmgRatio_; }
      set {
        fromFinalDmgRatio_ = value;
      }
    }

    /// <summary>Field number for the "from_final_dmg_plus" field.</summary>
    public const int FromFinalDmgPlusFieldNumber = 11;
    private int fromFinalDmgPlus_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FromFinalDmgPlus {
      get { return fromFinalDmgPlus_; }
      set {
        fromFinalDmgPlus_ = value;
      }
    }

    /// <summary>Field number for the "to_er_amend" field.</summary>
    public const int ToErAmendFieldNumber = 12;
    private int toErAmend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToErAmend {
      get { return toErAmend_; }
      set {
        toErAmend_ = value;
      }
    }

    /// <summary>Field number for the "to_def_amend" field.</summary>
    public const int ToDefAmendFieldNumber = 13;
    private int toDefAmend_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToDefAmend {
      get { return toDefAmend_; }
      set {
        toDefAmend_ = value;
      }
    }

    /// <summary>Field number for the "to_rcd_slot_dmg_ratio" field.</summary>
    public const int ToRcdSlotDmgRatioFieldNumber = 14;
    private int toRcdSlotDmgRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToRcdSlotDmgRatio {
      get { return toRcdSlotDmgRatio_; }
      set {
        toRcdSlotDmgRatio_ = value;
      }
    }

    /// <summary>Field number for the "to_e_e_r_c_d" field.</summary>
    public const int ToEERCDFieldNumber = 15;
    private int toEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToEERCD {
      get { return toEERCD_; }
      set {
        toEERCD_ = value;
      }
    }

    /// <summary>Field number for the "to_gen_dmg_rcd_ratio" field.</summary>
    public const int ToGenDmgRcdRatioFieldNumber = 16;
    private int toGenDmgRcdRatio_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToGenDmgRcdRatio {
      get { return toGenDmgRcdRatio_; }
      set {
        toGenDmgRcdRatio_ = value;
      }
    }

    /// <summary>Field number for the "to_dmg_plus_rcd" field.</summary>
    public const int ToDmgPlusRcdFieldNumber = 17;
    private int toDmgPlusRcd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToDmgPlusRcd {
      get { return toDmgPlusRcd_; }
      set {
        toDmgPlusRcd_ = value;
      }
    }

    /// <summary>Field number for the "dmg" field.</summary>
    public const int DmgFieldNumber = 18;
    private int dmg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Dmg {
      get { return dmg_; }
      set {
        dmg_ = value;
      }
    }

    /// <summary>Field number for the "crit_rate" field.</summary>
    public const int CritRateFieldNumber = 19;
    private int critRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CritRate {
      get { return critRate_; }
      set {
        critRate_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 20;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as BattleThreshold);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(BattleThreshold other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (MissionId != other.MissionId) return false;
      if (Version != other.Version) return false;
      if (FromSrcAtk != other.FromSrcAtk) return false;
      if (FromPerkIntensityRatio != other.FromPerkIntensityRatio) return false;
      if (FromSlotDmgRatio != other.FromSlotDmgRatio) return false;
      if (FromEE != other.FromEE) return false;
      if (FromGenDmgRatio != other.FromGenDmgRatio) return false;
      if (FromDmgPlus != other.FromDmgPlus) return false;
      if (FromCritRatio != other.FromCritRatio) return false;
      if (FromFinalDmgRatio != other.FromFinalDmgRatio) return false;
      if (FromFinalDmgPlus != other.FromFinalDmgPlus) return false;
      if (ToErAmend != other.ToErAmend) return false;
      if (ToDefAmend != other.ToDefAmend) return false;
      if (ToRcdSlotDmgRatio != other.ToRcdSlotDmgRatio) return false;
      if (ToEERCD != other.ToEERCD) return false;
      if (ToGenDmgRcdRatio != other.ToGenDmgRcdRatio) return false;
      if (ToDmgPlusRcd != other.ToDmgPlusRcd) return false;
      if (Dmg != other.Dmg) return false;
      if (CritRate != other.CritRate) return false;
      if (Hp != other.Hp) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (MissionId != 0) hash ^= MissionId.GetHashCode();
      if (Version != 0) hash ^= Version.GetHashCode();
      if (FromSrcAtk != 0) hash ^= FromSrcAtk.GetHashCode();
      if (FromPerkIntensityRatio != 0) hash ^= FromPerkIntensityRatio.GetHashCode();
      if (FromSlotDmgRatio != 0) hash ^= FromSlotDmgRatio.GetHashCode();
      if (FromEE != 0) hash ^= FromEE.GetHashCode();
      if (FromGenDmgRatio != 0) hash ^= FromGenDmgRatio.GetHashCode();
      if (FromDmgPlus != 0) hash ^= FromDmgPlus.GetHashCode();
      if (FromCritRatio != 0) hash ^= FromCritRatio.GetHashCode();
      if (FromFinalDmgRatio != 0) hash ^= FromFinalDmgRatio.GetHashCode();
      if (FromFinalDmgPlus != 0) hash ^= FromFinalDmgPlus.GetHashCode();
      if (ToErAmend != 0) hash ^= ToErAmend.GetHashCode();
      if (ToDefAmend != 0) hash ^= ToDefAmend.GetHashCode();
      if (ToRcdSlotDmgRatio != 0) hash ^= ToRcdSlotDmgRatio.GetHashCode();
      if (ToEERCD != 0) hash ^= ToEERCD.GetHashCode();
      if (ToGenDmgRcdRatio != 0) hash ^= ToGenDmgRcdRatio.GetHashCode();
      if (ToDmgPlusRcd != 0) hash ^= ToDmgPlusRcd.GetHashCode();
      if (Dmg != 0) hash ^= Dmg.GetHashCode();
      if (CritRate != 0) hash ^= CritRate.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (FromSrcAtk != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FromSrcAtk);
      }
      if (FromPerkIntensityRatio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FromPerkIntensityRatio);
      }
      if (FromSlotDmgRatio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FromSlotDmgRatio);
      }
      if (FromEE != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FromEE);
      }
      if (FromGenDmgRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FromGenDmgRatio);
      }
      if (FromDmgPlus != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromDmgPlus);
      }
      if (FromCritRatio != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FromCritRatio);
      }
      if (FromFinalDmgRatio != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FromFinalDmgRatio);
      }
      if (FromFinalDmgPlus != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FromFinalDmgPlus);
      }
      if (ToErAmend != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ToErAmend);
      }
      if (ToDefAmend != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ToDefAmend);
      }
      if (ToRcdSlotDmgRatio != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ToRcdSlotDmgRatio);
      }
      if (ToEERCD != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ToEERCD);
      }
      if (ToGenDmgRcdRatio != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ToGenDmgRcdRatio);
      }
      if (ToDmgPlusRcd != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ToDmgPlusRcd);
      }
      if (Dmg != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Dmg);
      }
      if (CritRate != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CritRate);
      }
      if (Hp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Hp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (MissionId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MissionId);
      }
      if (Version != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Version);
      }
      if (FromSrcAtk != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FromSrcAtk);
      }
      if (FromPerkIntensityRatio != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(FromPerkIntensityRatio);
      }
      if (FromSlotDmgRatio != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(FromSlotDmgRatio);
      }
      if (FromEE != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(FromEE);
      }
      if (FromGenDmgRatio != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(FromGenDmgRatio);
      }
      if (FromDmgPlus != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FromDmgPlus);
      }
      if (FromCritRatio != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FromCritRatio);
      }
      if (FromFinalDmgRatio != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(FromFinalDmgRatio);
      }
      if (FromFinalDmgPlus != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(FromFinalDmgPlus);
      }
      if (ToErAmend != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(ToErAmend);
      }
      if (ToDefAmend != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(ToDefAmend);
      }
      if (ToRcdSlotDmgRatio != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ToRcdSlotDmgRatio);
      }
      if (ToEERCD != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(ToEERCD);
      }
      if (ToGenDmgRcdRatio != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(ToGenDmgRcdRatio);
      }
      if (ToDmgPlusRcd != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(ToDmgPlusRcd);
      }
      if (Dmg != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(Dmg);
      }
      if (CritRate != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(CritRate);
      }
      if (Hp != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(Hp);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (MissionId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MissionId);
      }
      if (Version != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Version);
      }
      if (FromSrcAtk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromSrcAtk);
      }
      if (FromPerkIntensityRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromPerkIntensityRatio);
      }
      if (FromSlotDmgRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromSlotDmgRatio);
      }
      if (FromEE != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromEE);
      }
      if (FromGenDmgRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromGenDmgRatio);
      }
      if (FromDmgPlus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromDmgPlus);
      }
      if (FromCritRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromCritRatio);
      }
      if (FromFinalDmgRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromFinalDmgRatio);
      }
      if (FromFinalDmgPlus != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FromFinalDmgPlus);
      }
      if (ToErAmend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToErAmend);
      }
      if (ToDefAmend != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToDefAmend);
      }
      if (ToRcdSlotDmgRatio != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToRcdSlotDmgRatio);
      }
      if (ToEERCD != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ToEERCD);
      }
      if (ToGenDmgRcdRatio != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToGenDmgRcdRatio);
      }
      if (ToDmgPlusRcd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToDmgPlusRcd);
      }
      if (Dmg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Dmg);
      }
      if (CritRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CritRate);
      }
      if (Hp != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(BattleThreshold other) {
      if (other == null) {
        return;
      }
      if (other.MissionId != 0) {
        MissionId = other.MissionId;
      }
      if (other.Version != 0) {
        Version = other.Version;
      }
      if (other.FromSrcAtk != 0) {
        FromSrcAtk = other.FromSrcAtk;
      }
      if (other.FromPerkIntensityRatio != 0) {
        FromPerkIntensityRatio = other.FromPerkIntensityRatio;
      }
      if (other.FromSlotDmgRatio != 0) {
        FromSlotDmgRatio = other.FromSlotDmgRatio;
      }
      if (other.FromEE != 0) {
        FromEE = other.FromEE;
      }
      if (other.FromGenDmgRatio != 0) {
        FromGenDmgRatio = other.FromGenDmgRatio;
      }
      if (other.FromDmgPlus != 0) {
        FromDmgPlus = other.FromDmgPlus;
      }
      if (other.FromCritRatio != 0) {
        FromCritRatio = other.FromCritRatio;
      }
      if (other.FromFinalDmgRatio != 0) {
        FromFinalDmgRatio = other.FromFinalDmgRatio;
      }
      if (other.FromFinalDmgPlus != 0) {
        FromFinalDmgPlus = other.FromFinalDmgPlus;
      }
      if (other.ToErAmend != 0) {
        ToErAmend = other.ToErAmend;
      }
      if (other.ToDefAmend != 0) {
        ToDefAmend = other.ToDefAmend;
      }
      if (other.ToRcdSlotDmgRatio != 0) {
        ToRcdSlotDmgRatio = other.ToRcdSlotDmgRatio;
      }
      if (other.ToEERCD != 0) {
        ToEERCD = other.ToEERCD;
      }
      if (other.ToGenDmgRcdRatio != 0) {
        ToGenDmgRcdRatio = other.ToGenDmgRcdRatio;
      }
      if (other.ToDmgPlusRcd != 0) {
        ToDmgPlusRcd = other.ToDmgPlusRcd;
      }
      if (other.Dmg != 0) {
        Dmg = other.Dmg;
      }
      if (other.CritRate != 0) {
        CritRate = other.CritRate;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 24: {
            FromSrcAtk = input.ReadInt32();
            break;
          }
          case 32: {
            FromPerkIntensityRatio = input.ReadInt32();
            break;
          }
          case 40: {
            FromSlotDmgRatio = input.ReadInt32();
            break;
          }
          case 48: {
            FromEE = input.ReadInt32();
            break;
          }
          case 56: {
            FromGenDmgRatio = input.ReadInt32();
            break;
          }
          case 64: {
            FromDmgPlus = input.ReadInt32();
            break;
          }
          case 72: {
            FromCritRatio = input.ReadInt32();
            break;
          }
          case 80: {
            FromFinalDmgRatio = input.ReadInt32();
            break;
          }
          case 88: {
            FromFinalDmgPlus = input.ReadInt32();
            break;
          }
          case 96: {
            ToErAmend = input.ReadInt32();
            break;
          }
          case 104: {
            ToDefAmend = input.ReadInt32();
            break;
          }
          case 112: {
            ToRcdSlotDmgRatio = input.ReadInt32();
            break;
          }
          case 120: {
            ToEERCD = input.ReadInt32();
            break;
          }
          case 128: {
            ToGenDmgRcdRatio = input.ReadInt32();
            break;
          }
          case 136: {
            ToDmgPlusRcd = input.ReadInt32();
            break;
          }
          case 144: {
            Dmg = input.ReadInt32();
            break;
          }
          case 152: {
            CritRate = input.ReadInt32();
            break;
          }
          case 160: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            MissionId = input.ReadInt32();
            break;
          }
          case 16: {
            Version = input.ReadInt32();
            break;
          }
          case 24: {
            FromSrcAtk = input.ReadInt32();
            break;
          }
          case 32: {
            FromPerkIntensityRatio = input.ReadInt32();
            break;
          }
          case 40: {
            FromSlotDmgRatio = input.ReadInt32();
            break;
          }
          case 48: {
            FromEE = input.ReadInt32();
            break;
          }
          case 56: {
            FromGenDmgRatio = input.ReadInt32();
            break;
          }
          case 64: {
            FromDmgPlus = input.ReadInt32();
            break;
          }
          case 72: {
            FromCritRatio = input.ReadInt32();
            break;
          }
          case 80: {
            FromFinalDmgRatio = input.ReadInt32();
            break;
          }
          case 88: {
            FromFinalDmgPlus = input.ReadInt32();
            break;
          }
          case 96: {
            ToErAmend = input.ReadInt32();
            break;
          }
          case 104: {
            ToDefAmend = input.ReadInt32();
            break;
          }
          case 112: {
            ToRcdSlotDmgRatio = input.ReadInt32();
            break;
          }
          case 120: {
            ToEERCD = input.ReadInt32();
            break;
          }
          case 128: {
            ToGenDmgRcdRatio = input.ReadInt32();
            break;
          }
          case 136: {
            ToDmgPlusRcd = input.ReadInt32();
            break;
          }
          case 144: {
            Dmg = input.ReadInt32();
            break;
          }
          case 152: {
            CritRate = input.ReadInt32();
            break;
          }
          case 160: {
            Hp = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
