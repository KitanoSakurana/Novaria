// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Monster.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Monster.proto</summary>
  public static partial class MonsterReflection {

    #region Descriptor
    /// <summary>File descriptor for Monster.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static MonsterReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg1Nb25zdGVyLnByb3RvIpcGCgdNb25zdGVyEgoKAmlkGAEgASgFEgwKBG5h",
            "bWUYAiABKAkSFgoOZm9ybWFsX25hbWVfaWQYAyABKAUSDwoHZXBpY19sdhgE",
            "IAEoBRIYChBtb25zdGVyX3Bvc2l0aW9uGAUgASgFEhIKCmJsb29kX3R5cGUY",
            "BiABKAUSDQoFZm9yY2UYByABKAkSDgoGZl9jX2lkGAggASgFEg4KBmZfYV9p",
            "ZBgJIAEoBRIQCghtb3ZfdHlwZRgKIAEoBRIPCgdydW5fc3BkGAsgASgFEhcK",
            "D3RyYW5zX3NwZF9zY2FsZRgMIAEoBRIQCgh3YWxrX3NwZBgNIAEoBRIPCgdt",
            "b3ZfYWNjGA4gASgFEhIKCnZpc2lvbl9ybmcYDyABKAUSEgoKdmlzaW9uX2Rl",
            "ZxgQIAEoBRIQCghoZWFyX3JuZxgRIAEoBRIPCgdyZWZfcm5nGBIgASgFEg8K",
            "B2FjdF9ybmcYEyABKAUSEwoLZGlzX2FjdF9ybmcYFCABKAUSEgoKc2VhcmNo",
            "X3JuZxgVIAEoBRIPCgdyb3Rfc3BkGBYgASgFEhgKEHJvdF9zcGRfaW5fc2tp",
            "bGwYFyABKAUSEAoIdGVtcGxldGUYGCABKAUSEAoIYnVmZl9pZHMYGSADKAUS",
            "EAoIc3ViX3R5cGUYGiABKAUSDwoHZmFjdGlvbhgbIAEoBRIUCgx0cmFwX3Rh",
            "Z19pZHMYHCADKAUSEgoKc3VwX2NoYXJnZRgdIAEoBRITCgtpc19zaG93X3Ju",
            "ZxgeIAEoCBIOCgZ3ZWlnaHQYHyABKAUSHQoVdG91Z2huZXNzX2Jyb2tlbl90",
            "aW1lGCAgASgFEgwKBHRhZzEYISABKAkSDAoEdGFnMhgiIAEoCRIMCgR0YWcz",
            "GCMgASgJEgwKBHRhZzQYJCABKAkSDAoEdGFnNRglIAEoCRIYChBhdHRhY2tf",
            "aGludF90eXBlGCYgASgFEhYKDmJsb2NrX3ByaW9yaXR5GCcgASgFEhcKD3dh",
            "eV9wb2ludF9zaGlmdBgoIAEoBRIXCg9tb25zdGVyX3RlYW1faWQYKSABKAVC",
            "DqoCC05vdmEuQ2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Monster), global::Nova.Client.Monster.Parser, new[]{ "Id", "Name", "FormalNameId", "EpicLv", "MonsterPosition", "BloodType", "Force", "FCId", "FAId", "MovType", "RunSpd", "TransSpdScale", "WalkSpd", "MovAcc", "VisionRng", "VisionDeg", "HearRng", "RefRng", "ActRng", "DisActRng", "SearchRng", "RotSpd", "RotSpdInSkill", "Templete", "BuffIds", "SubType", "Faction", "TrapTagIds", "SupCharge", "IsShowRng", "Weight", "ToughnessBrokenTime", "Tag1", "Tag2", "Tag3", "Tag4", "Tag5", "AttackHintType", "BlockPriority", "WayPointShift", "MonsterTeamId" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Monster : pb::IMessage<Monster>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Monster> _parser = new pb::MessageParser<Monster>(() => new Monster());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Monster> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.MonsterReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Monster() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Monster(Monster other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      formalNameId_ = other.formalNameId_;
      epicLv_ = other.epicLv_;
      monsterPosition_ = other.monsterPosition_;
      bloodType_ = other.bloodType_;
      force_ = other.force_;
      fCId_ = other.fCId_;
      fAId_ = other.fAId_;
      movType_ = other.movType_;
      runSpd_ = other.runSpd_;
      transSpdScale_ = other.transSpdScale_;
      walkSpd_ = other.walkSpd_;
      movAcc_ = other.movAcc_;
      visionRng_ = other.visionRng_;
      visionDeg_ = other.visionDeg_;
      hearRng_ = other.hearRng_;
      refRng_ = other.refRng_;
      actRng_ = other.actRng_;
      disActRng_ = other.disActRng_;
      searchRng_ = other.searchRng_;
      rotSpd_ = other.rotSpd_;
      rotSpdInSkill_ = other.rotSpdInSkill_;
      templete_ = other.templete_;
      buffIds_ = other.buffIds_.Clone();
      subType_ = other.subType_;
      faction_ = other.faction_;
      trapTagIds_ = other.trapTagIds_.Clone();
      supCharge_ = other.supCharge_;
      isShowRng_ = other.isShowRng_;
      weight_ = other.weight_;
      toughnessBrokenTime_ = other.toughnessBrokenTime_;
      tag1_ = other.tag1_;
      tag2_ = other.tag2_;
      tag3_ = other.tag3_;
      tag4_ = other.tag4_;
      tag5_ = other.tag5_;
      attackHintType_ = other.attackHintType_;
      blockPriority_ = other.blockPriority_;
      wayPointShift_ = other.wayPointShift_;
      monsterTeamId_ = other.monsterTeamId_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Monster Clone() {
      return new Monster(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "formal_name_id" field.</summary>
    public const int FormalNameIdFieldNumber = 3;
    private int formalNameId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FormalNameId {
      get { return formalNameId_; }
      set {
        formalNameId_ = value;
      }
    }

    /// <summary>Field number for the "epic_lv" field.</summary>
    public const int EpicLvFieldNumber = 4;
    private int epicLv_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EpicLv {
      get { return epicLv_; }
      set {
        epicLv_ = value;
      }
    }

    /// <summary>Field number for the "monster_position" field.</summary>
    public const int MonsterPositionFieldNumber = 5;
    private int monsterPosition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonsterPosition {
      get { return monsterPosition_; }
      set {
        monsterPosition_ = value;
      }
    }

    /// <summary>Field number for the "blood_type" field.</summary>
    public const int BloodTypeFieldNumber = 6;
    private int bloodType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BloodType {
      get { return bloodType_; }
      set {
        bloodType_ = value;
      }
    }

    /// <summary>Field number for the "force" field.</summary>
    public const int ForceFieldNumber = 7;
    private string force_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Force {
      get { return force_; }
      set {
        force_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_c_id" field.</summary>
    public const int FCIdFieldNumber = 8;
    private int fCId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FCId {
      get { return fCId_; }
      set {
        fCId_ = value;
      }
    }

    /// <summary>Field number for the "f_a_id" field.</summary>
    public const int FAIdFieldNumber = 9;
    private int fAId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FAId {
      get { return fAId_; }
      set {
        fAId_ = value;
      }
    }

    /// <summary>Field number for the "mov_type" field.</summary>
    public const int MovTypeFieldNumber = 10;
    private int movType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovType {
      get { return movType_; }
      set {
        movType_ = value;
      }
    }

    /// <summary>Field number for the "run_spd" field.</summary>
    public const int RunSpdFieldNumber = 11;
    private int runSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RunSpd {
      get { return runSpd_; }
      set {
        runSpd_ = value;
      }
    }

    /// <summary>Field number for the "trans_spd_scale" field.</summary>
    public const int TransSpdScaleFieldNumber = 12;
    private int transSpdScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TransSpdScale {
      get { return transSpdScale_; }
      set {
        transSpdScale_ = value;
      }
    }

    /// <summary>Field number for the "walk_spd" field.</summary>
    public const int WalkSpdFieldNumber = 13;
    private int walkSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WalkSpd {
      get { return walkSpd_; }
      set {
        walkSpd_ = value;
      }
    }

    /// <summary>Field number for the "mov_acc" field.</summary>
    public const int MovAccFieldNumber = 14;
    private int movAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovAcc {
      get { return movAcc_; }
      set {
        movAcc_ = value;
      }
    }

    /// <summary>Field number for the "vision_rng" field.</summary>
    public const int VisionRngFieldNumber = 15;
    private int visionRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionRng {
      get { return visionRng_; }
      set {
        visionRng_ = value;
      }
    }

    /// <summary>Field number for the "vision_deg" field.</summary>
    public const int VisionDegFieldNumber = 16;
    private int visionDeg_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int VisionDeg {
      get { return visionDeg_; }
      set {
        visionDeg_ = value;
      }
    }

    /// <summary>Field number for the "hear_rng" field.</summary>
    public const int HearRngFieldNumber = 17;
    private int hearRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HearRng {
      get { return hearRng_; }
      set {
        hearRng_ = value;
      }
    }

    /// <summary>Field number for the "ref_rng" field.</summary>
    public const int RefRngFieldNumber = 18;
    private int refRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RefRng {
      get { return refRng_; }
      set {
        refRng_ = value;
      }
    }

    /// <summary>Field number for the "act_rng" field.</summary>
    public const int ActRngFieldNumber = 19;
    private int actRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ActRng {
      get { return actRng_; }
      set {
        actRng_ = value;
      }
    }

    /// <summary>Field number for the "dis_act_rng" field.</summary>
    public const int DisActRngFieldNumber = 20;
    private int disActRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DisActRng {
      get { return disActRng_; }
      set {
        disActRng_ = value;
      }
    }

    /// <summary>Field number for the "search_rng" field.</summary>
    public const int SearchRngFieldNumber = 21;
    private int searchRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SearchRng {
      get { return searchRng_; }
      set {
        searchRng_ = value;
      }
    }

    /// <summary>Field number for the "rot_spd" field.</summary>
    public const int RotSpdFieldNumber = 22;
    private int rotSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotSpd {
      get { return rotSpd_; }
      set {
        rotSpd_ = value;
      }
    }

    /// <summary>Field number for the "rot_spd_in_skill" field.</summary>
    public const int RotSpdInSkillFieldNumber = 23;
    private int rotSpdInSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotSpdInSkill {
      get { return rotSpdInSkill_; }
      set {
        rotSpdInSkill_ = value;
      }
    }

    /// <summary>Field number for the "templete" field.</summary>
    public const int TempleteFieldNumber = 24;
    private int templete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Templete {
      get { return templete_; }
      set {
        templete_ = value;
      }
    }

    /// <summary>Field number for the "buff_ids" field.</summary>
    public const int BuffIdsFieldNumber = 25;
    private static readonly pb::FieldCodec<int> _repeated_buffIds_codec
        = pb::FieldCodec.ForInt32(202);
    private readonly pbc::RepeatedField<int> buffIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BuffIds {
      get { return buffIds_; }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 26;
    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 27;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "trap_tag_ids" field.</summary>
    public const int TrapTagIdsFieldNumber = 28;
    private static readonly pb::FieldCodec<int> _repeated_trapTagIds_codec
        = pb::FieldCodec.ForInt32(226);
    private readonly pbc::RepeatedField<int> trapTagIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TrapTagIds {
      get { return trapTagIds_; }
    }

    /// <summary>Field number for the "sup_charge" field.</summary>
    public const int SupChargeFieldNumber = 29;
    private int supCharge_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SupCharge {
      get { return supCharge_; }
      set {
        supCharge_ = value;
      }
    }

    /// <summary>Field number for the "is_show_rng" field.</summary>
    public const int IsShowRngFieldNumber = 30;
    private bool isShowRng_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsShowRng {
      get { return isShowRng_; }
      set {
        isShowRng_ = value;
      }
    }

    /// <summary>Field number for the "weight" field.</summary>
    public const int WeightFieldNumber = 31;
    private int weight_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    /// <summary>Field number for the "toughness_broken_time" field.</summary>
    public const int ToughnessBrokenTimeFieldNumber = 32;
    private int toughnessBrokenTime_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToughnessBrokenTime {
      get { return toughnessBrokenTime_; }
      set {
        toughnessBrokenTime_ = value;
      }
    }

    /// <summary>Field number for the "tag1" field.</summary>
    public const int Tag1FieldNumber = 33;
    private string tag1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag1 {
      get { return tag1_; }
      set {
        tag1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag2" field.</summary>
    public const int Tag2FieldNumber = 34;
    private string tag2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag2 {
      get { return tag2_; }
      set {
        tag2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag3" field.</summary>
    public const int Tag3FieldNumber = 35;
    private string tag3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag3 {
      get { return tag3_; }
      set {
        tag3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag4" field.</summary>
    public const int Tag4FieldNumber = 36;
    private string tag4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag4 {
      get { return tag4_; }
      set {
        tag4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "tag5" field.</summary>
    public const int Tag5FieldNumber = 37;
    private string tag5_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Tag5 {
      get { return tag5_; }
      set {
        tag5_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "attack_hint_type" field.</summary>
    public const int AttackHintTypeFieldNumber = 38;
    private int attackHintType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AttackHintType {
      get { return attackHintType_; }
      set {
        attackHintType_ = value;
      }
    }

    /// <summary>Field number for the "block_priority" field.</summary>
    public const int BlockPriorityFieldNumber = 39;
    private int blockPriority_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BlockPriority {
      get { return blockPriority_; }
      set {
        blockPriority_ = value;
      }
    }

    /// <summary>Field number for the "way_point_shift" field.</summary>
    public const int WayPointShiftFieldNumber = 40;
    private int wayPointShift_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WayPointShift {
      get { return wayPointShift_; }
      set {
        wayPointShift_ = value;
      }
    }

    /// <summary>Field number for the "monster_team_id" field.</summary>
    public const int MonsterTeamIdFieldNumber = 41;
    private int monsterTeamId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonsterTeamId {
      get { return monsterTeamId_; }
      set {
        monsterTeamId_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Monster);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Monster other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (FormalNameId != other.FormalNameId) return false;
      if (EpicLv != other.EpicLv) return false;
      if (MonsterPosition != other.MonsterPosition) return false;
      if (BloodType != other.BloodType) return false;
      if (Force != other.Force) return false;
      if (FCId != other.FCId) return false;
      if (FAId != other.FAId) return false;
      if (MovType != other.MovType) return false;
      if (RunSpd != other.RunSpd) return false;
      if (TransSpdScale != other.TransSpdScale) return false;
      if (WalkSpd != other.WalkSpd) return false;
      if (MovAcc != other.MovAcc) return false;
      if (VisionRng != other.VisionRng) return false;
      if (VisionDeg != other.VisionDeg) return false;
      if (HearRng != other.HearRng) return false;
      if (RefRng != other.RefRng) return false;
      if (ActRng != other.ActRng) return false;
      if (DisActRng != other.DisActRng) return false;
      if (SearchRng != other.SearchRng) return false;
      if (RotSpd != other.RotSpd) return false;
      if (RotSpdInSkill != other.RotSpdInSkill) return false;
      if (Templete != other.Templete) return false;
      if(!buffIds_.Equals(other.buffIds_)) return false;
      if (SubType != other.SubType) return false;
      if (Faction != other.Faction) return false;
      if(!trapTagIds_.Equals(other.trapTagIds_)) return false;
      if (SupCharge != other.SupCharge) return false;
      if (IsShowRng != other.IsShowRng) return false;
      if (Weight != other.Weight) return false;
      if (ToughnessBrokenTime != other.ToughnessBrokenTime) return false;
      if (Tag1 != other.Tag1) return false;
      if (Tag2 != other.Tag2) return false;
      if (Tag3 != other.Tag3) return false;
      if (Tag4 != other.Tag4) return false;
      if (Tag5 != other.Tag5) return false;
      if (AttackHintType != other.AttackHintType) return false;
      if (BlockPriority != other.BlockPriority) return false;
      if (WayPointShift != other.WayPointShift) return false;
      if (MonsterTeamId != other.MonsterTeamId) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FormalNameId != 0) hash ^= FormalNameId.GetHashCode();
      if (EpicLv != 0) hash ^= EpicLv.GetHashCode();
      if (MonsterPosition != 0) hash ^= MonsterPosition.GetHashCode();
      if (BloodType != 0) hash ^= BloodType.GetHashCode();
      if (Force.Length != 0) hash ^= Force.GetHashCode();
      if (FCId != 0) hash ^= FCId.GetHashCode();
      if (FAId != 0) hash ^= FAId.GetHashCode();
      if (MovType != 0) hash ^= MovType.GetHashCode();
      if (RunSpd != 0) hash ^= RunSpd.GetHashCode();
      if (TransSpdScale != 0) hash ^= TransSpdScale.GetHashCode();
      if (WalkSpd != 0) hash ^= WalkSpd.GetHashCode();
      if (MovAcc != 0) hash ^= MovAcc.GetHashCode();
      if (VisionRng != 0) hash ^= VisionRng.GetHashCode();
      if (VisionDeg != 0) hash ^= VisionDeg.GetHashCode();
      if (HearRng != 0) hash ^= HearRng.GetHashCode();
      if (RefRng != 0) hash ^= RefRng.GetHashCode();
      if (ActRng != 0) hash ^= ActRng.GetHashCode();
      if (DisActRng != 0) hash ^= DisActRng.GetHashCode();
      if (SearchRng != 0) hash ^= SearchRng.GetHashCode();
      if (RotSpd != 0) hash ^= RotSpd.GetHashCode();
      if (RotSpdInSkill != 0) hash ^= RotSpdInSkill.GetHashCode();
      if (Templete != 0) hash ^= Templete.GetHashCode();
      hash ^= buffIds_.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      hash ^= trapTagIds_.GetHashCode();
      if (SupCharge != 0) hash ^= SupCharge.GetHashCode();
      if (IsShowRng != false) hash ^= IsShowRng.GetHashCode();
      if (Weight != 0) hash ^= Weight.GetHashCode();
      if (ToughnessBrokenTime != 0) hash ^= ToughnessBrokenTime.GetHashCode();
      if (Tag1.Length != 0) hash ^= Tag1.GetHashCode();
      if (Tag2.Length != 0) hash ^= Tag2.GetHashCode();
      if (Tag3.Length != 0) hash ^= Tag3.GetHashCode();
      if (Tag4.Length != 0) hash ^= Tag4.GetHashCode();
      if (Tag5.Length != 0) hash ^= Tag5.GetHashCode();
      if (AttackHintType != 0) hash ^= AttackHintType.GetHashCode();
      if (BlockPriority != 0) hash ^= BlockPriority.GetHashCode();
      if (WayPointShift != 0) hash ^= WayPointShift.GetHashCode();
      if (MonsterTeamId != 0) hash ^= MonsterTeamId.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FormalNameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FormalNameId);
      }
      if (EpicLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EpicLv);
      }
      if (MonsterPosition != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterPosition);
      }
      if (BloodType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BloodType);
      }
      if (Force.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Force);
      }
      if (FCId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FCId);
      }
      if (FAId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FAId);
      }
      if (MovType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MovType);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RunSpd);
      }
      if (TransSpdScale != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TransSpdScale);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(WalkSpd);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MovAcc);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VisionRng);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VisionDeg);
      }
      if (HearRng != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HearRng);
      }
      if (RefRng != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RefRng);
      }
      if (ActRng != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ActRng);
      }
      if (DisActRng != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DisActRng);
      }
      if (SearchRng != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SearchRng);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RotSpd);
      }
      if (RotSpdInSkill != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RotSpdInSkill);
      }
      if (Templete != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Templete);
      }
      buffIds_.WriteTo(output, _repeated_buffIds_codec);
      if (SubType != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(SubType);
      }
      if (Faction != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Faction);
      }
      trapTagIds_.WriteTo(output, _repeated_trapTagIds_codec);
      if (SupCharge != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SupCharge);
      }
      if (IsShowRng != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsShowRng);
      }
      if (Weight != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Weight);
      }
      if (ToughnessBrokenTime != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(ToughnessBrokenTime);
      }
      if (Tag1.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Tag1);
      }
      if (Tag2.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Tag2);
      }
      if (Tag3.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(Tag3);
      }
      if (Tag4.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(Tag4);
      }
      if (Tag5.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Tag5);
      }
      if (AttackHintType != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(AttackHintType);
      }
      if (BlockPriority != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(BlockPriority);
      }
      if (WayPointShift != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(WayPointShift);
      }
      if (MonsterTeamId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MonsterTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FormalNameId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FormalNameId);
      }
      if (EpicLv != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EpicLv);
      }
      if (MonsterPosition != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MonsterPosition);
      }
      if (BloodType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BloodType);
      }
      if (Force.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(Force);
      }
      if (FCId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(FCId);
      }
      if (FAId != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(FAId);
      }
      if (MovType != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(MovType);
      }
      if (RunSpd != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(RunSpd);
      }
      if (TransSpdScale != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(TransSpdScale);
      }
      if (WalkSpd != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(WalkSpd);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(MovAcc);
      }
      if (VisionRng != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(VisionRng);
      }
      if (VisionDeg != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(VisionDeg);
      }
      if (HearRng != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(HearRng);
      }
      if (RefRng != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(RefRng);
      }
      if (ActRng != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ActRng);
      }
      if (DisActRng != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(DisActRng);
      }
      if (SearchRng != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(SearchRng);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(RotSpd);
      }
      if (RotSpdInSkill != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(RotSpdInSkill);
      }
      if (Templete != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(Templete);
      }
      buffIds_.WriteTo(ref output, _repeated_buffIds_codec);
      if (SubType != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(SubType);
      }
      if (Faction != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(Faction);
      }
      trapTagIds_.WriteTo(ref output, _repeated_trapTagIds_codec);
      if (SupCharge != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(SupCharge);
      }
      if (IsShowRng != false) {
        output.WriteRawTag(240, 1);
        output.WriteBool(IsShowRng);
      }
      if (Weight != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(Weight);
      }
      if (ToughnessBrokenTime != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(ToughnessBrokenTime);
      }
      if (Tag1.Length != 0) {
        output.WriteRawTag(138, 2);
        output.WriteString(Tag1);
      }
      if (Tag2.Length != 0) {
        output.WriteRawTag(146, 2);
        output.WriteString(Tag2);
      }
      if (Tag3.Length != 0) {
        output.WriteRawTag(154, 2);
        output.WriteString(Tag3);
      }
      if (Tag4.Length != 0) {
        output.WriteRawTag(162, 2);
        output.WriteString(Tag4);
      }
      if (Tag5.Length != 0) {
        output.WriteRawTag(170, 2);
        output.WriteString(Tag5);
      }
      if (AttackHintType != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(AttackHintType);
      }
      if (BlockPriority != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(BlockPriority);
      }
      if (WayPointShift != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(WayPointShift);
      }
      if (MonsterTeamId != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(MonsterTeamId);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FormalNameId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FormalNameId);
      }
      if (EpicLv != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EpicLv);
      }
      if (MonsterPosition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterPosition);
      }
      if (BloodType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BloodType);
      }
      if (Force.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Force);
      }
      if (FCId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FCId);
      }
      if (FAId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FAId);
      }
      if (MovType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovType);
      }
      if (RunSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RunSpd);
      }
      if (TransSpdScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TransSpdScale);
      }
      if (WalkSpd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WalkSpd);
      }
      if (MovAcc != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MovAcc);
      }
      if (VisionRng != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(VisionRng);
      }
      if (VisionDeg != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(VisionDeg);
      }
      if (HearRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HearRng);
      }
      if (RefRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RefRng);
      }
      if (ActRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ActRng);
      }
      if (DisActRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DisActRng);
      }
      if (SearchRng != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SearchRng);
      }
      if (RotSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotSpd);
      }
      if (RotSpdInSkill != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotSpdInSkill);
      }
      if (Templete != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Templete);
      }
      size += buffIds_.CalculateSize(_repeated_buffIds_codec);
      if (SubType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (Faction != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      size += trapTagIds_.CalculateSize(_repeated_trapTagIds_codec);
      if (SupCharge != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SupCharge);
      }
      if (IsShowRng != false) {
        size += 2 + 1;
      }
      if (Weight != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (ToughnessBrokenTime != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToughnessBrokenTime);
      }
      if (Tag1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag1);
      }
      if (Tag2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag2);
      }
      if (Tag3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag3);
      }
      if (Tag4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag4);
      }
      if (Tag5.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Tag5);
      }
      if (AttackHintType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AttackHintType);
      }
      if (BlockPriority != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(BlockPriority);
      }
      if (WayPointShift != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WayPointShift);
      }
      if (MonsterTeamId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MonsterTeamId);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Monster other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FormalNameId != 0) {
        FormalNameId = other.FormalNameId;
      }
      if (other.EpicLv != 0) {
        EpicLv = other.EpicLv;
      }
      if (other.MonsterPosition != 0) {
        MonsterPosition = other.MonsterPosition;
      }
      if (other.BloodType != 0) {
        BloodType = other.BloodType;
      }
      if (other.Force.Length != 0) {
        Force = other.Force;
      }
      if (other.FCId != 0) {
        FCId = other.FCId;
      }
      if (other.FAId != 0) {
        FAId = other.FAId;
      }
      if (other.MovType != 0) {
        MovType = other.MovType;
      }
      if (other.RunSpd != 0) {
        RunSpd = other.RunSpd;
      }
      if (other.TransSpdScale != 0) {
        TransSpdScale = other.TransSpdScale;
      }
      if (other.WalkSpd != 0) {
        WalkSpd = other.WalkSpd;
      }
      if (other.MovAcc != 0) {
        MovAcc = other.MovAcc;
      }
      if (other.VisionRng != 0) {
        VisionRng = other.VisionRng;
      }
      if (other.VisionDeg != 0) {
        VisionDeg = other.VisionDeg;
      }
      if (other.HearRng != 0) {
        HearRng = other.HearRng;
      }
      if (other.RefRng != 0) {
        RefRng = other.RefRng;
      }
      if (other.ActRng != 0) {
        ActRng = other.ActRng;
      }
      if (other.DisActRng != 0) {
        DisActRng = other.DisActRng;
      }
      if (other.SearchRng != 0) {
        SearchRng = other.SearchRng;
      }
      if (other.RotSpd != 0) {
        RotSpd = other.RotSpd;
      }
      if (other.RotSpdInSkill != 0) {
        RotSpdInSkill = other.RotSpdInSkill;
      }
      if (other.Templete != 0) {
        Templete = other.Templete;
      }
      buffIds_.Add(other.buffIds_);
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      trapTagIds_.Add(other.trapTagIds_);
      if (other.SupCharge != 0) {
        SupCharge = other.SupCharge;
      }
      if (other.IsShowRng != false) {
        IsShowRng = other.IsShowRng;
      }
      if (other.Weight != 0) {
        Weight = other.Weight;
      }
      if (other.ToughnessBrokenTime != 0) {
        ToughnessBrokenTime = other.ToughnessBrokenTime;
      }
      if (other.Tag1.Length != 0) {
        Tag1 = other.Tag1;
      }
      if (other.Tag2.Length != 0) {
        Tag2 = other.Tag2;
      }
      if (other.Tag3.Length != 0) {
        Tag3 = other.Tag3;
      }
      if (other.Tag4.Length != 0) {
        Tag4 = other.Tag4;
      }
      if (other.Tag5.Length != 0) {
        Tag5 = other.Tag5;
      }
      if (other.AttackHintType != 0) {
        AttackHintType = other.AttackHintType;
      }
      if (other.BlockPriority != 0) {
        BlockPriority = other.BlockPriority;
      }
      if (other.WayPointShift != 0) {
        WayPointShift = other.WayPointShift;
      }
      if (other.MonsterTeamId != 0) {
        MonsterTeamId = other.MonsterTeamId;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            FormalNameId = input.ReadInt32();
            break;
          }
          case 32: {
            EpicLv = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterPosition = input.ReadInt32();
            break;
          }
          case 48: {
            BloodType = input.ReadInt32();
            break;
          }
          case 58: {
            Force = input.ReadString();
            break;
          }
          case 64: {
            FCId = input.ReadInt32();
            break;
          }
          case 72: {
            FAId = input.ReadInt32();
            break;
          }
          case 80: {
            MovType = input.ReadInt32();
            break;
          }
          case 88: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 96: {
            TransSpdScale = input.ReadInt32();
            break;
          }
          case 104: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 112: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 120: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 128: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 136: {
            HearRng = input.ReadInt32();
            break;
          }
          case 144: {
            RefRng = input.ReadInt32();
            break;
          }
          case 152: {
            ActRng = input.ReadInt32();
            break;
          }
          case 160: {
            DisActRng = input.ReadInt32();
            break;
          }
          case 168: {
            SearchRng = input.ReadInt32();
            break;
          }
          case 176: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 184: {
            RotSpdInSkill = input.ReadInt32();
            break;
          }
          case 192: {
            Templete = input.ReadInt32();
            break;
          }
          case 202:
          case 200: {
            buffIds_.AddEntriesFrom(input, _repeated_buffIds_codec);
            break;
          }
          case 208: {
            SubType = input.ReadInt32();
            break;
          }
          case 216: {
            Faction = input.ReadInt32();
            break;
          }
          case 226:
          case 224: {
            trapTagIds_.AddEntriesFrom(input, _repeated_trapTagIds_codec);
            break;
          }
          case 232: {
            SupCharge = input.ReadInt32();
            break;
          }
          case 240: {
            IsShowRng = input.ReadBool();
            break;
          }
          case 248: {
            Weight = input.ReadInt32();
            break;
          }
          case 256: {
            ToughnessBrokenTime = input.ReadInt32();
            break;
          }
          case 266: {
            Tag1 = input.ReadString();
            break;
          }
          case 274: {
            Tag2 = input.ReadString();
            break;
          }
          case 282: {
            Tag3 = input.ReadString();
            break;
          }
          case 290: {
            Tag4 = input.ReadString();
            break;
          }
          case 298: {
            Tag5 = input.ReadString();
            break;
          }
          case 304: {
            AttackHintType = input.ReadInt32();
            break;
          }
          case 312: {
            BlockPriority = input.ReadInt32();
            break;
          }
          case 320: {
            WayPointShift = input.ReadInt32();
            break;
          }
          case 328: {
            MonsterTeamId = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            FormalNameId = input.ReadInt32();
            break;
          }
          case 32: {
            EpicLv = input.ReadInt32();
            break;
          }
          case 40: {
            MonsterPosition = input.ReadInt32();
            break;
          }
          case 48: {
            BloodType = input.ReadInt32();
            break;
          }
          case 58: {
            Force = input.ReadString();
            break;
          }
          case 64: {
            FCId = input.ReadInt32();
            break;
          }
          case 72: {
            FAId = input.ReadInt32();
            break;
          }
          case 80: {
            MovType = input.ReadInt32();
            break;
          }
          case 88: {
            RunSpd = input.ReadInt32();
            break;
          }
          case 96: {
            TransSpdScale = input.ReadInt32();
            break;
          }
          case 104: {
            WalkSpd = input.ReadInt32();
            break;
          }
          case 112: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 120: {
            VisionRng = input.ReadInt32();
            break;
          }
          case 128: {
            VisionDeg = input.ReadInt32();
            break;
          }
          case 136: {
            HearRng = input.ReadInt32();
            break;
          }
          case 144: {
            RefRng = input.ReadInt32();
            break;
          }
          case 152: {
            ActRng = input.ReadInt32();
            break;
          }
          case 160: {
            DisActRng = input.ReadInt32();
            break;
          }
          case 168: {
            SearchRng = input.ReadInt32();
            break;
          }
          case 176: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 184: {
            RotSpdInSkill = input.ReadInt32();
            break;
          }
          case 192: {
            Templete = input.ReadInt32();
            break;
          }
          case 202:
          case 200: {
            buffIds_.AddEntriesFrom(ref input, _repeated_buffIds_codec);
            break;
          }
          case 208: {
            SubType = input.ReadInt32();
            break;
          }
          case 216: {
            Faction = input.ReadInt32();
            break;
          }
          case 226:
          case 224: {
            trapTagIds_.AddEntriesFrom(ref input, _repeated_trapTagIds_codec);
            break;
          }
          case 232: {
            SupCharge = input.ReadInt32();
            break;
          }
          case 240: {
            IsShowRng = input.ReadBool();
            break;
          }
          case 248: {
            Weight = input.ReadInt32();
            break;
          }
          case 256: {
            ToughnessBrokenTime = input.ReadInt32();
            break;
          }
          case 266: {
            Tag1 = input.ReadString();
            break;
          }
          case 274: {
            Tag2 = input.ReadString();
            break;
          }
          case 282: {
            Tag3 = input.ReadString();
            break;
          }
          case 290: {
            Tag4 = input.ReadString();
            break;
          }
          case 298: {
            Tag5 = input.ReadString();
            break;
          }
          case 304: {
            AttackHintType = input.ReadInt32();
            break;
          }
          case 312: {
            BlockPriority = input.ReadInt32();
            break;
          }
          case 320: {
            WayPointShift = input.ReadInt32();
            break;
          }
          case 328: {
            MonsterTeamId = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
