// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: InfinityTowerEnemySet.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from InfinityTowerEnemySet.proto</summary>
  public static partial class InfinityTowerEnemySetReflection {

    #region Descriptor
    /// <summary>File descriptor for InfinityTowerEnemySet.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static InfinityTowerEnemySetReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChtJbmZpbml0eVRvd2VyRW5lbXlTZXQucHJvdG8ivwEKFUluZmluaXR5VG93",
            "ZXJFbmVteVNldBIOCgZzZXRfaWQYASABKAUSEAoId2F2ZV9udW0YAiABKAUS",
            "EQoJZ3JvdXBfbnVtGAMgASgFEg8KB21heF9udW0YBCABKAUSGAoQbWF4X251",
            "bV9wZXJfd2F2ZRgFIAEoBRISCgptb25zdGVyX2lkGAYgASgFEhQKDGxldmVs",
            "X2NoYW5nZRgHIAEoBRIcChRjb21tb25fZ2FtZXBsYXlfdHlwZRgIIAEoBUIO",
            "qgILTm92YS5DbGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.InfinityTowerEnemySet), global::Nova.Client.InfinityTowerEnemySet.Parser, new[]{ "SetId", "WaveNum", "GroupNum", "MaxNum", "MaxNumPerWave", "MonsterId", "LevelChange", "CommonGameplayType" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class InfinityTowerEnemySet : pb::IMessage<InfinityTowerEnemySet>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<InfinityTowerEnemySet> _parser = new pb::MessageParser<InfinityTowerEnemySet>(() => new InfinityTowerEnemySet());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<InfinityTowerEnemySet> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.InfinityTowerEnemySetReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerEnemySet() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerEnemySet(InfinityTowerEnemySet other) : this() {
      setId_ = other.setId_;
      waveNum_ = other.waveNum_;
      groupNum_ = other.groupNum_;
      maxNum_ = other.maxNum_;
      maxNumPerWave_ = other.maxNumPerWave_;
      monsterId_ = other.monsterId_;
      levelChange_ = other.levelChange_;
      commonGameplayType_ = other.commonGameplayType_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public InfinityTowerEnemySet Clone() {
      return new InfinityTowerEnemySet(this);
    }

    /// <summary>Field number for the "set_id" field.</summary>
    public const int SetIdFieldNumber = 1;
    private int setId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SetId {
      get { return setId_; }
      set {
        setId_ = value;
      }
    }

    /// <summary>Field number for the "wave_num" field.</summary>
    public const int WaveNumFieldNumber = 2;
    private int waveNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WaveNum {
      get { return waveNum_; }
      set {
        waveNum_ = value;
      }
    }

    /// <summary>Field number for the "group_num" field.</summary>
    public const int GroupNumFieldNumber = 3;
    private int groupNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupNum {
      get { return groupNum_; }
      set {
        groupNum_ = value;
      }
    }

    /// <summary>Field number for the "max_num" field.</summary>
    public const int MaxNumFieldNumber = 4;
    private int maxNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxNum {
      get { return maxNum_; }
      set {
        maxNum_ = value;
      }
    }

    /// <summary>Field number for the "max_num_per_wave" field.</summary>
    public const int MaxNumPerWaveFieldNumber = 5;
    private int maxNumPerWave_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxNumPerWave {
      get { return maxNumPerWave_; }
      set {
        maxNumPerWave_ = value;
      }
    }

    /// <summary>Field number for the "monster_id" field.</summary>
    public const int MonsterIdFieldNumber = 6;
    private int monsterId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MonsterId {
      get { return monsterId_; }
      set {
        monsterId_ = value;
      }
    }

    /// <summary>Field number for the "level_change" field.</summary>
    public const int LevelChangeFieldNumber = 7;
    private int levelChange_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LevelChange {
      get { return levelChange_; }
      set {
        levelChange_ = value;
      }
    }

    /// <summary>Field number for the "common_gameplay_type" field.</summary>
    public const int CommonGameplayTypeFieldNumber = 8;
    private int commonGameplayType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CommonGameplayType {
      get { return commonGameplayType_; }
      set {
        commonGameplayType_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as InfinityTowerEnemySet);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(InfinityTowerEnemySet other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (SetId != other.SetId) return false;
      if (WaveNum != other.WaveNum) return false;
      if (GroupNum != other.GroupNum) return false;
      if (MaxNum != other.MaxNum) return false;
      if (MaxNumPerWave != other.MaxNumPerWave) return false;
      if (MonsterId != other.MonsterId) return false;
      if (LevelChange != other.LevelChange) return false;
      if (CommonGameplayType != other.CommonGameplayType) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (SetId != 0) hash ^= SetId.GetHashCode();
      if (WaveNum != 0) hash ^= WaveNum.GetHashCode();
      if (GroupNum != 0) hash ^= GroupNum.GetHashCode();
      if (MaxNum != 0) hash ^= MaxNum.GetHashCode();
      if (MaxNumPerWave != 0) hash ^= MaxNumPerWave.GetHashCode();
      if (MonsterId != 0) hash ^= MonsterId.GetHashCode();
      if (LevelChange != 0) hash ^= LevelChange.GetHashCode();
      if (CommonGameplayType != 0) hash ^= CommonGameplayType.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (SetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SetId);
      }
      if (WaveNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaveNum);
      }
      if (GroupNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNum);
      }
      if (MaxNumPerWave != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxNumPerWave);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MonsterId);
      }
      if (LevelChange != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LevelChange);
      }
      if (CommonGameplayType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CommonGameplayType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (SetId != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(SetId);
      }
      if (WaveNum != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(WaveNum);
      }
      if (GroupNum != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(GroupNum);
      }
      if (MaxNum != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxNum);
      }
      if (MaxNumPerWave != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(MaxNumPerWave);
      }
      if (MonsterId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(MonsterId);
      }
      if (LevelChange != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(LevelChange);
      }
      if (CommonGameplayType != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CommonGameplayType);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (SetId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SetId);
      }
      if (WaveNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(WaveNum);
      }
      if (GroupNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupNum);
      }
      if (MaxNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNum);
      }
      if (MaxNumPerWave != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxNumPerWave);
      }
      if (MonsterId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MonsterId);
      }
      if (LevelChange != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(LevelChange);
      }
      if (CommonGameplayType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CommonGameplayType);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(InfinityTowerEnemySet other) {
      if (other == null) {
        return;
      }
      if (other.SetId != 0) {
        SetId = other.SetId;
      }
      if (other.WaveNum != 0) {
        WaveNum = other.WaveNum;
      }
      if (other.GroupNum != 0) {
        GroupNum = other.GroupNum;
      }
      if (other.MaxNum != 0) {
        MaxNum = other.MaxNum;
      }
      if (other.MaxNumPerWave != 0) {
        MaxNumPerWave = other.MaxNumPerWave;
      }
      if (other.MonsterId != 0) {
        MonsterId = other.MonsterId;
      }
      if (other.LevelChange != 0) {
        LevelChange = other.LevelChange;
      }
      if (other.CommonGameplayType != 0) {
        CommonGameplayType = other.CommonGameplayType;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            SetId = input.ReadInt32();
            break;
          }
          case 16: {
            WaveNum = input.ReadInt32();
            break;
          }
          case 24: {
            GroupNum = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 40: {
            MaxNumPerWave = input.ReadInt32();
            break;
          }
          case 48: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 56: {
            LevelChange = input.ReadInt32();
            break;
          }
          case 64: {
            CommonGameplayType = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            SetId = input.ReadInt32();
            break;
          }
          case 16: {
            WaveNum = input.ReadInt32();
            break;
          }
          case 24: {
            GroupNum = input.ReadInt32();
            break;
          }
          case 32: {
            MaxNum = input.ReadInt32();
            break;
          }
          case 40: {
            MaxNumPerWave = input.ReadInt32();
            break;
          }
          case 48: {
            MonsterId = input.ReadInt32();
            break;
          }
          case 56: {
            LevelChange = input.ReadInt32();
            break;
          }
          case 64: {
            CommonGameplayType = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
