// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: TrialBuild.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from TrialBuild.proto</summary>
  public static partial class TrialBuildReflection {

    #region Descriptor
    /// <summary>File descriptor for TrialBuild.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrialBuildReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChBUcmlhbEJ1aWxkLnByb3RvIrQCCgpUcmlhbEJ1aWxkEgoKAmlkGAEgASgF",
            "EgwKBG5hbWUYAiABKAkSDQoFc2NvcmUYAyABKAUSDAoEY2hhchgEIAMoBRIM",
            "CgRkaXNjGAUgAygFEhEKCXBvdGVudGlhbBgGIAEoCRIaChJkaXNjX2NvbW1v",
            "bl9za2lsbDEYByABKAkSGgoSZGlzY19jb21tb25fc2tpbGwyGAggASgJEhoK",
            "EmRpc2NfY29tbW9uX3NraWxsMxgJIAEoCRIbChNkaXNjX3Bhc3NpdmVfc2tp",
            "bGwxGAogASgJEhsKE2Rpc2NfcGFzc2l2ZV9za2lsbDIYCyABKAkSGwoTZGlz",
            "Y19wYXNzaXZlX3NraWxsMxgMIAEoCRIVCg1oYXJtb255X3NraWxsGA0gASgJ",
            "EgwKBG5vdGUYDiABKAlCDqoCC05vdmEuQ2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.TrialBuild), global::Nova.Client.TrialBuild.Parser, new[]{ "Id", "Name", "Score", "Char", "Disc", "Potential", "DiscCommonSkill1", "DiscCommonSkill2", "DiscCommonSkill3", "DiscPassiveSkill1", "DiscPassiveSkill2", "DiscPassiveSkill3", "HarmonySkill", "Note" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class TrialBuild : pb::IMessage<TrialBuild>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<TrialBuild> _parser = new pb::MessageParser<TrialBuild>(() => new TrialBuild());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<TrialBuild> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.TrialBuildReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialBuild() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialBuild(TrialBuild other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      score_ = other.score_;
      char_ = other.char_.Clone();
      disc_ = other.disc_.Clone();
      potential_ = other.potential_;
      discCommonSkill1_ = other.discCommonSkill1_;
      discCommonSkill2_ = other.discCommonSkill2_;
      discCommonSkill3_ = other.discCommonSkill3_;
      discPassiveSkill1_ = other.discPassiveSkill1_;
      discPassiveSkill2_ = other.discPassiveSkill2_;
      discPassiveSkill3_ = other.discPassiveSkill3_;
      harmonySkill_ = other.harmonySkill_;
      note_ = other.note_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public TrialBuild Clone() {
      return new TrialBuild(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "score" field.</summary>
    public const int ScoreFieldNumber = 3;
    private int score_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Score {
      get { return score_; }
      set {
        score_ = value;
      }
    }

    /// <summary>Field number for the "char" field.</summary>
    public const int CharFieldNumber = 4;
    private static readonly pb::FieldCodec<int> _repeated_char_codec
        = pb::FieldCodec.ForInt32(34);
    private readonly pbc::RepeatedField<int> char_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Char {
      get { return char_; }
    }

    /// <summary>Field number for the "disc" field.</summary>
    public const int DiscFieldNumber = 5;
    private static readonly pb::FieldCodec<int> _repeated_disc_codec
        = pb::FieldCodec.ForInt32(42);
    private readonly pbc::RepeatedField<int> disc_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Disc {
      get { return disc_; }
    }

    /// <summary>Field number for the "potential" field.</summary>
    public const int PotentialFieldNumber = 6;
    private string potential_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Potential {
      get { return potential_; }
      set {
        potential_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_common_skill1" field.</summary>
    public const int DiscCommonSkill1FieldNumber = 7;
    private string discCommonSkill1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscCommonSkill1 {
      get { return discCommonSkill1_; }
      set {
        discCommonSkill1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_common_skill2" field.</summary>
    public const int DiscCommonSkill2FieldNumber = 8;
    private string discCommonSkill2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscCommonSkill2 {
      get { return discCommonSkill2_; }
      set {
        discCommonSkill2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_common_skill3" field.</summary>
    public const int DiscCommonSkill3FieldNumber = 9;
    private string discCommonSkill3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscCommonSkill3 {
      get { return discCommonSkill3_; }
      set {
        discCommonSkill3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_passive_skill1" field.</summary>
    public const int DiscPassiveSkill1FieldNumber = 10;
    private string discPassiveSkill1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscPassiveSkill1 {
      get { return discPassiveSkill1_; }
      set {
        discPassiveSkill1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_passive_skill2" field.</summary>
    public const int DiscPassiveSkill2FieldNumber = 11;
    private string discPassiveSkill2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscPassiveSkill2 {
      get { return discPassiveSkill2_; }
      set {
        discPassiveSkill2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "disc_passive_skill3" field.</summary>
    public const int DiscPassiveSkill3FieldNumber = 12;
    private string discPassiveSkill3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string DiscPassiveSkill3 {
      get { return discPassiveSkill3_; }
      set {
        discPassiveSkill3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "harmony_skill" field.</summary>
    public const int HarmonySkillFieldNumber = 13;
    private string harmonySkill_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string HarmonySkill {
      get { return harmonySkill_; }
      set {
        harmonySkill_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "note" field.</summary>
    public const int NoteFieldNumber = 14;
    private string note_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Note {
      get { return note_; }
      set {
        note_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as TrialBuild);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(TrialBuild other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (Score != other.Score) return false;
      if(!char_.Equals(other.char_)) return false;
      if(!disc_.Equals(other.disc_)) return false;
      if (Potential != other.Potential) return false;
      if (DiscCommonSkill1 != other.DiscCommonSkill1) return false;
      if (DiscCommonSkill2 != other.DiscCommonSkill2) return false;
      if (DiscCommonSkill3 != other.DiscCommonSkill3) return false;
      if (DiscPassiveSkill1 != other.DiscPassiveSkill1) return false;
      if (DiscPassiveSkill2 != other.DiscPassiveSkill2) return false;
      if (DiscPassiveSkill3 != other.DiscPassiveSkill3) return false;
      if (HarmonySkill != other.HarmonySkill) return false;
      if (Note != other.Note) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (Score != 0) hash ^= Score.GetHashCode();
      hash ^= char_.GetHashCode();
      hash ^= disc_.GetHashCode();
      if (Potential.Length != 0) hash ^= Potential.GetHashCode();
      if (DiscCommonSkill1.Length != 0) hash ^= DiscCommonSkill1.GetHashCode();
      if (DiscCommonSkill2.Length != 0) hash ^= DiscCommonSkill2.GetHashCode();
      if (DiscCommonSkill3.Length != 0) hash ^= DiscCommonSkill3.GetHashCode();
      if (DiscPassiveSkill1.Length != 0) hash ^= DiscPassiveSkill1.GetHashCode();
      if (DiscPassiveSkill2.Length != 0) hash ^= DiscPassiveSkill2.GetHashCode();
      if (DiscPassiveSkill3.Length != 0) hash ^= DiscPassiveSkill3.GetHashCode();
      if (HarmonySkill.Length != 0) hash ^= HarmonySkill.GetHashCode();
      if (Note.Length != 0) hash ^= Note.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      char_.WriteTo(output, _repeated_char_codec);
      disc_.WriteTo(output, _repeated_disc_codec);
      if (Potential.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Potential);
      }
      if (DiscCommonSkill1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DiscCommonSkill1);
      }
      if (DiscCommonSkill2.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DiscCommonSkill2);
      }
      if (DiscCommonSkill3.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DiscCommonSkill3);
      }
      if (DiscPassiveSkill1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DiscPassiveSkill1);
      }
      if (DiscPassiveSkill2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DiscPassiveSkill2);
      }
      if (DiscPassiveSkill3.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DiscPassiveSkill3);
      }
      if (HarmonySkill.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HarmonySkill);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Score != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Score);
      }
      char_.WriteTo(ref output, _repeated_char_codec);
      disc_.WriteTo(ref output, _repeated_disc_codec);
      if (Potential.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Potential);
      }
      if (DiscCommonSkill1.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(DiscCommonSkill1);
      }
      if (DiscCommonSkill2.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(DiscCommonSkill2);
      }
      if (DiscCommonSkill3.Length != 0) {
        output.WriteRawTag(74);
        output.WriteString(DiscCommonSkill3);
      }
      if (DiscPassiveSkill1.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(DiscPassiveSkill1);
      }
      if (DiscPassiveSkill2.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(DiscPassiveSkill2);
      }
      if (DiscPassiveSkill3.Length != 0) {
        output.WriteRawTag(98);
        output.WriteString(DiscPassiveSkill3);
      }
      if (HarmonySkill.Length != 0) {
        output.WriteRawTag(106);
        output.WriteString(HarmonySkill);
      }
      if (Note.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(Note);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Score != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Score);
      }
      size += char_.CalculateSize(_repeated_char_codec);
      size += disc_.CalculateSize(_repeated_disc_codec);
      if (Potential.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Potential);
      }
      if (DiscCommonSkill1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscCommonSkill1);
      }
      if (DiscCommonSkill2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscCommonSkill2);
      }
      if (DiscCommonSkill3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscCommonSkill3);
      }
      if (DiscPassiveSkill1.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscPassiveSkill1);
      }
      if (DiscPassiveSkill2.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscPassiveSkill2);
      }
      if (DiscPassiveSkill3.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DiscPassiveSkill3);
      }
      if (HarmonySkill.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(HarmonySkill);
      }
      if (Note.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Note);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(TrialBuild other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.Score != 0) {
        Score = other.Score;
      }
      char_.Add(other.char_);
      disc_.Add(other.disc_);
      if (other.Potential.Length != 0) {
        Potential = other.Potential;
      }
      if (other.DiscCommonSkill1.Length != 0) {
        DiscCommonSkill1 = other.DiscCommonSkill1;
      }
      if (other.DiscCommonSkill2.Length != 0) {
        DiscCommonSkill2 = other.DiscCommonSkill2;
      }
      if (other.DiscCommonSkill3.Length != 0) {
        DiscCommonSkill3 = other.DiscCommonSkill3;
      }
      if (other.DiscPassiveSkill1.Length != 0) {
        DiscPassiveSkill1 = other.DiscPassiveSkill1;
      }
      if (other.DiscPassiveSkill2.Length != 0) {
        DiscPassiveSkill2 = other.DiscPassiveSkill2;
      }
      if (other.DiscPassiveSkill3.Length != 0) {
        DiscPassiveSkill3 = other.DiscPassiveSkill3;
      }
      if (other.HarmonySkill.Length != 0) {
        HarmonySkill = other.HarmonySkill;
      }
      if (other.Note.Length != 0) {
        Note = other.Note;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            char_.AddEntriesFrom(input, _repeated_char_codec);
            break;
          }
          case 42:
          case 40: {
            disc_.AddEntriesFrom(input, _repeated_disc_codec);
            break;
          }
          case 50: {
            Potential = input.ReadString();
            break;
          }
          case 58: {
            DiscCommonSkill1 = input.ReadString();
            break;
          }
          case 66: {
            DiscCommonSkill2 = input.ReadString();
            break;
          }
          case 74: {
            DiscCommonSkill3 = input.ReadString();
            break;
          }
          case 82: {
            DiscPassiveSkill1 = input.ReadString();
            break;
          }
          case 90: {
            DiscPassiveSkill2 = input.ReadString();
            break;
          }
          case 98: {
            DiscPassiveSkill3 = input.ReadString();
            break;
          }
          case 106: {
            HarmonySkill = input.ReadString();
            break;
          }
          case 114: {
            Note = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Score = input.ReadInt32();
            break;
          }
          case 34:
          case 32: {
            char_.AddEntriesFrom(ref input, _repeated_char_codec);
            break;
          }
          case 42:
          case 40: {
            disc_.AddEntriesFrom(ref input, _repeated_disc_codec);
            break;
          }
          case 50: {
            Potential = input.ReadString();
            break;
          }
          case 58: {
            DiscCommonSkill1 = input.ReadString();
            break;
          }
          case 66: {
            DiscCommonSkill2 = input.ReadString();
            break;
          }
          case 74: {
            DiscCommonSkill3 = input.ReadString();
            break;
          }
          case 82: {
            DiscPassiveSkill1 = input.ReadString();
            break;
          }
          case 90: {
            DiscPassiveSkill2 = input.ReadString();
            break;
          }
          case 98: {
            DiscPassiveSkill3 = input.ReadString();
            break;
          }
          case 106: {
            HarmonySkill = input.ReadString();
            break;
          }
          case 114: {
            Note = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
