// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: ShieldValue.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from ShieldValue.proto</summary>
  public static partial class ShieldValueReflection {

    #region Descriptor
    /// <summary>File descriptor for ShieldValue.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static ShieldValueReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChFTaGllbGRWYWx1ZS5wcm90byLpAQoLU2hpZWxkVmFsdWUSCgoCaWQYASAB",
            "KAUSDAoEbmFtZRgCIAEoCRIXCg9hYnNvcnB0aW9uX2Jhc2UYAyABKAUSGAoQ",
            "cmVmZXJlbmNlX3RhcmdldBgEIAEoBRIYChByZWZlcmVuY2VfYXR0cmliGAUg",
            "ASgFEhcKD3JlZmVyZW5jZV9zY2FsZRgGIAEoBRIMCgR0aW1lGAcgASgFEhwK",
            "FHNoaWVsZF9sYW1pbmF0ZWRfbnVtGAggASgFEhoKEnRpbWVfc3VwZXJwb3Np",
            "dGlvbhgJIAEoBRISCgpub3RfcmVtb3ZlGAogASgIQg6qAgtOb3ZhLkNsaWVu",
            "dGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.ShieldValue), global::Nova.Client.ShieldValue.Parser, new[]{ "Id", "Name", "AbsorptionBase", "ReferenceTarget", "ReferenceAttrib", "ReferenceScale", "Time", "ShieldLaminatedNum", "TimeSuperposition", "NotRemove" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class ShieldValue : pb::IMessage<ShieldValue>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<ShieldValue> _parser = new pb::MessageParser<ShieldValue>(() => new ShieldValue());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<ShieldValue> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.ShieldValueReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShieldValue() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShieldValue(ShieldValue other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      absorptionBase_ = other.absorptionBase_;
      referenceTarget_ = other.referenceTarget_;
      referenceAttrib_ = other.referenceAttrib_;
      referenceScale_ = other.referenceScale_;
      time_ = other.time_;
      shieldLaminatedNum_ = other.shieldLaminatedNum_;
      timeSuperposition_ = other.timeSuperposition_;
      notRemove_ = other.notRemove_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ShieldValue Clone() {
      return new ShieldValue(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "absorption_base" field.</summary>
    public const int AbsorptionBaseFieldNumber = 3;
    private int absorptionBase_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AbsorptionBase {
      get { return absorptionBase_; }
      set {
        absorptionBase_ = value;
      }
    }

    /// <summary>Field number for the "reference_target" field.</summary>
    public const int ReferenceTargetFieldNumber = 4;
    private int referenceTarget_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReferenceTarget {
      get { return referenceTarget_; }
      set {
        referenceTarget_ = value;
      }
    }

    /// <summary>Field number for the "reference_attrib" field.</summary>
    public const int ReferenceAttribFieldNumber = 5;
    private int referenceAttrib_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReferenceAttrib {
      get { return referenceAttrib_; }
      set {
        referenceAttrib_ = value;
      }
    }

    /// <summary>Field number for the "reference_scale" field.</summary>
    public const int ReferenceScaleFieldNumber = 6;
    private int referenceScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ReferenceScale {
      get { return referenceScale_; }
      set {
        referenceScale_ = value;
      }
    }

    /// <summary>Field number for the "time" field.</summary>
    public const int TimeFieldNumber = 7;
    private int time_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Time {
      get { return time_; }
      set {
        time_ = value;
      }
    }

    /// <summary>Field number for the "shield_laminated_num" field.</summary>
    public const int ShieldLaminatedNumFieldNumber = 8;
    private int shieldLaminatedNum_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShieldLaminatedNum {
      get { return shieldLaminatedNum_; }
      set {
        shieldLaminatedNum_ = value;
      }
    }

    /// <summary>Field number for the "time_superposition" field.</summary>
    public const int TimeSuperpositionFieldNumber = 9;
    private int timeSuperposition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int TimeSuperposition {
      get { return timeSuperposition_; }
      set {
        timeSuperposition_ = value;
      }
    }

    /// <summary>Field number for the "not_remove" field.</summary>
    public const int NotRemoveFieldNumber = 10;
    private bool notRemove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool NotRemove {
      get { return notRemove_; }
      set {
        notRemove_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as ShieldValue);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(ShieldValue other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (AbsorptionBase != other.AbsorptionBase) return false;
      if (ReferenceTarget != other.ReferenceTarget) return false;
      if (ReferenceAttrib != other.ReferenceAttrib) return false;
      if (ReferenceScale != other.ReferenceScale) return false;
      if (Time != other.Time) return false;
      if (ShieldLaminatedNum != other.ShieldLaminatedNum) return false;
      if (TimeSuperposition != other.TimeSuperposition) return false;
      if (NotRemove != other.NotRemove) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (AbsorptionBase != 0) hash ^= AbsorptionBase.GetHashCode();
      if (ReferenceTarget != 0) hash ^= ReferenceTarget.GetHashCode();
      if (ReferenceAttrib != 0) hash ^= ReferenceAttrib.GetHashCode();
      if (ReferenceScale != 0) hash ^= ReferenceScale.GetHashCode();
      if (Time != 0) hash ^= Time.GetHashCode();
      if (ShieldLaminatedNum != 0) hash ^= ShieldLaminatedNum.GetHashCode();
      if (TimeSuperposition != 0) hash ^= TimeSuperposition.GetHashCode();
      if (NotRemove != false) hash ^= NotRemove.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AbsorptionBase != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbsorptionBase);
      }
      if (ReferenceTarget != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReferenceTarget);
      }
      if (ReferenceAttrib != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReferenceAttrib);
      }
      if (ReferenceScale != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReferenceScale);
      }
      if (Time != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Time);
      }
      if (ShieldLaminatedNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ShieldLaminatedNum);
      }
      if (TimeSuperposition != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimeSuperposition);
      }
      if (NotRemove != false) {
        output.WriteRawTag(80);
        output.WriteBool(NotRemove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (AbsorptionBase != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(AbsorptionBase);
      }
      if (ReferenceTarget != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(ReferenceTarget);
      }
      if (ReferenceAttrib != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ReferenceAttrib);
      }
      if (ReferenceScale != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(ReferenceScale);
      }
      if (Time != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Time);
      }
      if (ShieldLaminatedNum != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ShieldLaminatedNum);
      }
      if (TimeSuperposition != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(TimeSuperposition);
      }
      if (NotRemove != false) {
        output.WriteRawTag(80);
        output.WriteBool(NotRemove);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (AbsorptionBase != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(AbsorptionBase);
      }
      if (ReferenceTarget != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceTarget);
      }
      if (ReferenceAttrib != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceAttrib);
      }
      if (ReferenceScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReferenceScale);
      }
      if (Time != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Time);
      }
      if (ShieldLaminatedNum != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ShieldLaminatedNum);
      }
      if (TimeSuperposition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TimeSuperposition);
      }
      if (NotRemove != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(ShieldValue other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.AbsorptionBase != 0) {
        AbsorptionBase = other.AbsorptionBase;
      }
      if (other.ReferenceTarget != 0) {
        ReferenceTarget = other.ReferenceTarget;
      }
      if (other.ReferenceAttrib != 0) {
        ReferenceAttrib = other.ReferenceAttrib;
      }
      if (other.ReferenceScale != 0) {
        ReferenceScale = other.ReferenceScale;
      }
      if (other.Time != 0) {
        Time = other.Time;
      }
      if (other.ShieldLaminatedNum != 0) {
        ShieldLaminatedNum = other.ShieldLaminatedNum;
      }
      if (other.TimeSuperposition != 0) {
        TimeSuperposition = other.TimeSuperposition;
      }
      if (other.NotRemove != false) {
        NotRemove = other.NotRemove;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AbsorptionBase = input.ReadInt32();
            break;
          }
          case 32: {
            ReferenceTarget = input.ReadInt32();
            break;
          }
          case 40: {
            ReferenceAttrib = input.ReadInt32();
            break;
          }
          case 48: {
            ReferenceScale = input.ReadInt32();
            break;
          }
          case 56: {
            Time = input.ReadInt32();
            break;
          }
          case 64: {
            ShieldLaminatedNum = input.ReadInt32();
            break;
          }
          case 72: {
            TimeSuperposition = input.ReadInt32();
            break;
          }
          case 80: {
            NotRemove = input.ReadBool();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            AbsorptionBase = input.ReadInt32();
            break;
          }
          case 32: {
            ReferenceTarget = input.ReadInt32();
            break;
          }
          case 40: {
            ReferenceAttrib = input.ReadInt32();
            break;
          }
          case 48: {
            ReferenceScale = input.ReadInt32();
            break;
          }
          case 56: {
            Time = input.ReadInt32();
            break;
          }
          case 64: {
            ShieldLaminatedNum = input.ReadInt32();
            break;
          }
          case 72: {
            TimeSuperposition = input.ReadInt32();
            break;
          }
          case 80: {
            NotRemove = input.ReadBool();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
