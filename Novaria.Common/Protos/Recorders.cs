// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Recorders.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Recorders.proto</summary>
  public static partial class RecordersReflection {

    #region Descriptor
    /// <summary>File descriptor for Recorders.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static RecordersReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9SZWNvcmRlcnMucHJvdG8aDlJlY29yZGVyLnByb3RvIpsRCglSZWNvcmRl",
            "cnMSJgoIbHZsX3R5cGUYASABKA4yFC5SZWNvcmRlcnMuTGV2ZWxUeXBlEgwK",
            "BHVfaWQYAiABKAQSEAoIdG93ZXJfaWQYAyABKA0SIgoJcm9sZV9saXN0GAQg",
            "AygLMg8uUmVjb3JkZXJzLlJvbGUSIgoJZGlzY19saXN0GAUgAygLMg8uUmVj",
            "b3JkZXJzLkRpc2MSIAoNcmVjb3JkZXJfbGlzdBgGIAMoCzIJLlJlY29yZGVy",
            "GqQOCgRSb2xlEgoKAmlkGAEgASgNEg0KBWxldmVsGAIgASgFEhMKC2JyZWFr",
            "X2NvdW50GAMgASgFEgoKAmhwGAQgASgFEgsKA2F0axgFIAEoBRILCgNkZWYY",
            "BiABKAUSDQoFbV9kZWYYByABKAUSEQoJY3JpdF9yYXRlGAggASgFEhcKD2Ny",
            "aXRfcmVzaXN0YW5jZRgJIAEoBRISCgpjcml0X3Bvd2VyGAogASgFEhAKCGhp",
            "dF9yYXRlGAsgASgFEgsKA2V2ZBgMIAEoBRISCgpkZWZfcGllcmNlGA0gASgF",
            "EhIKCmRlZl9pZ25vcmUYDiABKAUSDQoFd19lX3AYDyABKAUSDQoFZl9lX3AY",
            "ECABKAUSDQoFc19lX3AYESABKAUSDQoFYV9lX3AYEiABKAUSDQoFbF9lX3AY",
            "EyABKAUSDQoFZF9lX3AYFCABKAUSDQoFd19lX2UYFSABKAUSDQoFZl9lX2UY",
            "FiABKAUSDQoFc19lX2UYFyABKAUSDQoFYV9lX2UYGCABKAUSDQoFbF9lX2UY",
            "GSABKAUSDQoFZF9lX2UYGiABKAUSDQoFd19lX3IYGyABKAUSDQoFZl9lX3IY",
            "HCABKAUSDQoFc19lX3IYHSABKAUSDQoFYV9lX3IYHiABKAUSDQoFbF9lX3IY",
            "HyABKAUSDQoFZF9lX3IYICABKAUSDQoFd19lX2kYISABKAUSDQoFZl9lX2kY",
            "IiABKAUSDQoFc19lX2kYIyABKAUSDQoFYV9lX2kYJCABKAUSDQoFbF9lX2kY",
            "JSABKAUSDQoFZF9lX2kYJiABKAUSFAoMc2hpZWxkX2JvbnVzGCcgASgFEh0K",
            "FWluY29taW5nX3NoaWVsZF9ib251cxgoIAEoBRIPCgdza2luX2lkGCkgASgF",
            "EhAKCHN1cHByZXNzGCogASgFEhgKEG5vcm1hbF9kbWdfcmF0aW8YKyABKAUS",
            "FwoPc2tpbGxfZG1nX3JhdGlvGCwgASgFEhcKD3VsdHJhX2RtZ19yYXRpbxgt",
            "IAEoBRIXCg9vdGhlcl9kbWdfcmF0aW8YLiABKAUSHAoUcmNkX25vcm1hbF9k",
            "bWdfcmF0aW8YLyABKAUSGwoTcmNkX3NraWxsX2RtZ19yYXRpbxgwIAEoBRIb",
            "ChNyY2RfdWx0cmFfZG1nX3JhdGlvGDEgASgFEhsKE3JjZF9vdGhlcl9kbWdf",
            "cmF0aW8YMiABKAUSFgoObWFya19kbWdfcmF0aW8YMyABKAUSGAoQc3VtbW9u",
            "X2RtZ19yYXRpbxg0IAEoBRIcChRyY2Rfc3VtbW9uX2RtZ19yYXRpbxg1IAEo",
            "BRIcChRwcm9qZWN0aWxlX2RtZ19yYXRpbxg2IAEoBRIgChhyY2RfcHJvamVj",
            "dGlsZV9kbWdfcmF0aW8YNyABKAUSEwoLZ19lX25fZF9tX2cYOCABKAUSFQoN",
            "ZF9tX2dfcF9sX3Vfcxg5IAEoBRIXCg9mX2lfbl9hX2xfZF9tX2cYOiABKAUS",
            "HwoXZl9pX25fYV9sX2RfbV9nX3BfbF91X3MYOyABKAUSEwoLd19lX2Vfcl9j",
            "X2QYPCABKAUSEwoLZl9lX2Vfcl9jX2QYPSABKAUSEwoLc19lX2Vfcl9jX2QY",
            "PiABKAUSEwoLYV9lX2Vfcl9jX2QYPyABKAUSEwoLbF9lX2Vfcl9jX2QYQCAB",
            "KAUSEwoLZF9lX2Vfcl9jX2QYQSABKAUSGQoRZ19lX25fZF9tX2dfcl9jX2QY",
            "QiABKAUSGwoTZF9tX2dfcF9sX3Vfc19yX2NfZBhDIAEoBRIZChFlbmVyZ3lf",
            "Y29udl9yYXRpbxhEIAEoBRIZChFlbmVyZ3lfZWZmaWNpZW5jeRhFIAEoBRIY",
            "ChBub3JtYWxfY3JpdF9yYXRlGEYgASgFEhcKD3NraWxsX2NyaXRfcmF0ZRhH",
            "IAEoBRIXCg91bHRyYV9jcml0X3JhdGUYSCABKAUSFgoObWFya19jcml0X3Jh",
            "dGUYSSABKAUSGAoQc3VtbW9uX2NyaXRfcmF0ZRhKIAEoBRIcChRwcm9qZWN0",
            "aWxlX2NyaXRfcmF0ZRhLIAEoBRIXCg9vdGhlcl9jcml0X3JhdGUYTCABKAUS",
            "GQoRbm9ybWFsX2NyaXRfcG93ZXIYTSABKAUSGAoQc2tpbGxfY3JpdF9wb3dl",
            "chhOIAEoBRIYChB1bHRyYV9jcml0X3Bvd2VyGE8gASgFEhcKD21hcmtfY3Jp",
            "dF9wb3dlchhQIAEoBRIZChFzdW1tb25fY3JpdF9wb3dlchhRIAEoBRIdChVw",
            "cm9qZWN0aWxlX2NyaXRfcG93ZXIYUiABKAUSGAoQb3RoZXJfY3JpdF9wb3dl",
            "chhTIAEoBRIPCgdhdHRyX2lkGFQgASgJEhgKEHNraWxsX2xldmVsX2xpc3QY",
            "VSADKAUSGAoQdGFsZW50X2luZm9fbGlzdBhWIAMoCBpQCgREaXNjEgoKAmlk",
            "GAEgASgNEg0KBWxldmVsGAIgASgNEi0KD2Rpc2Nfc2tpbGxfbGlzdBgDIAMo",
            "CzIULlJlY29yZGVycy5EaXNjU2tpbGwaJgoJRGlzY1NraWxsEgoKAmlkGAEg",
            "ASgNEg0KBWxldmVsGAIgASgNIjsKCUxldmVsVHlwZRIOCgpTVEFSX1RPV0VS",
            "EAASEQoNVFJBVkVMRVJfRFVFTBABEgsKB1ZBTVBJUkUQAkIOqgILTm92YS5D",
            "bGllbnRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Nova.Client.RecorderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Recorders), global::Nova.Client.Recorders.Parser, new[]{ "LvlType", "UId", "TowerId", "RoleList", "DiscList", "RecorderList" }, null, new[]{ typeof(global::Nova.Client.Recorders.Types.LevelType) }, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Recorders.Types.Role), global::Nova.Client.Recorders.Types.Role.Parser, new[]{ "Id", "Level", "BreakCount", "Hp", "Atk", "Def", "MDef", "CritRate", "CritResistance", "CritPower", "HitRate", "Evd", "DefPierce", "DefIgnore", "WEP", "FEP", "SEP", "AEP", "LEP", "DEP", "WEE", "FEE", "SEE", "AEE", "LEE", "DEE", "WER", "FER", "SER", "AER", "LER", "DER", "WEI", "FEI", "SEI", "AEI", "LEI", "DEI", "ShieldBonus", "IncomingShieldBonus", "SkinId", "Suppress", "NormalDmgRatio", "SkillDmgRatio", "UltraDmgRatio", "OtherDmgRatio", "RcdNormalDmgRatio", "RcdSkillDmgRatio", "RcdUltraDmgRatio", "RcdOtherDmgRatio", "MarkDmgRatio", "SummonDmgRatio", "RcdSummonDmgRatio", "ProjectileDmgRatio", "RcdProjectileDmgRatio", "GENDMG", "DMGPLUS", "FINALDMG", "FINALDMGPLUS", "WEERCD", "FEERCD", "SEERCD", "AEERCD", "LEERCD", "DEERCD", "GENDMGRCD", "DMGPLUSRCD", "EnergyConvRatio", "EnergyEfficiency", "NormalCritRate", "SkillCritRate", "UltraCritRate", "MarkCritRate", "SummonCritRate", "ProjectileCritRate", "OtherCritRate", "NormalCritPower", "SkillCritPower", "UltraCritPower", "MarkCritPower", "SummonCritPower", "ProjectileCritPower", "OtherCritPower", "AttrId", "SkillLevelList", "TalentInfoList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Recorders.Types.Disc), global::Nova.Client.Recorders.Types.Disc.Parser, new[]{ "Id", "Level", "DiscSkillList" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Recorders.Types.DiscSkill), global::Nova.Client.Recorders.Types.DiscSkill.Parser, new[]{ "Id", "Level" }, null, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Recorders : pb::IMessage<Recorders>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Recorders> _parser = new pb::MessageParser<Recorders>(() => new Recorders());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Recorders> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.RecordersReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Recorders() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Recorders(Recorders other) : this() {
      lvlType_ = other.lvlType_;
      uId_ = other.uId_;
      towerId_ = other.towerId_;
      roleList_ = other.roleList_.Clone();
      discList_ = other.discList_.Clone();
      recorderList_ = other.recorderList_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Recorders Clone() {
      return new Recorders(this);
    }

    /// <summary>Field number for the "lvl_type" field.</summary>
    public const int LvlTypeFieldNumber = 1;
    private global::Nova.Client.Recorders.Types.LevelType lvlType_ = global::Nova.Client.Recorders.Types.LevelType.StarTower;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public global::Nova.Client.Recorders.Types.LevelType LvlType {
      get { return lvlType_; }
      set {
        lvlType_ = value;
      }
    }

    /// <summary>Field number for the "u_id" field.</summary>
    public const int UIdFieldNumber = 2;
    private ulong uId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public ulong UId {
      get { return uId_; }
      set {
        uId_ = value;
      }
    }

    /// <summary>Field number for the "tower_id" field.</summary>
    public const int TowerIdFieldNumber = 3;
    private uint towerId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public uint TowerId {
      get { return towerId_; }
      set {
        towerId_ = value;
      }
    }

    /// <summary>Field number for the "role_list" field.</summary>
    public const int RoleListFieldNumber = 4;
    private static readonly pb::FieldCodec<global::Nova.Client.Recorders.Types.Role> _repeated_roleList_codec
        = pb::FieldCodec.ForMessage(34, global::Nova.Client.Recorders.Types.Role.Parser);
    private readonly pbc::RepeatedField<global::Nova.Client.Recorders.Types.Role> roleList_ = new pbc::RepeatedField<global::Nova.Client.Recorders.Types.Role>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nova.Client.Recorders.Types.Role> RoleList {
      get { return roleList_; }
    }

    /// <summary>Field number for the "disc_list" field.</summary>
    public const int DiscListFieldNumber = 5;
    private static readonly pb::FieldCodec<global::Nova.Client.Recorders.Types.Disc> _repeated_discList_codec
        = pb::FieldCodec.ForMessage(42, global::Nova.Client.Recorders.Types.Disc.Parser);
    private readonly pbc::RepeatedField<global::Nova.Client.Recorders.Types.Disc> discList_ = new pbc::RepeatedField<global::Nova.Client.Recorders.Types.Disc>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nova.Client.Recorders.Types.Disc> DiscList {
      get { return discList_; }
    }

    /// <summary>Field number for the "recorder_list" field.</summary>
    public const int RecorderListFieldNumber = 6;
    private static readonly pb::FieldCodec<global::Nova.Client.Recorder> _repeated_recorderList_codec
        = pb::FieldCodec.ForMessage(50, global::Nova.Client.Recorder.Parser);
    private readonly pbc::RepeatedField<global::Nova.Client.Recorder> recorderList_ = new pbc::RepeatedField<global::Nova.Client.Recorder>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<global::Nova.Client.Recorder> RecorderList {
      get { return recorderList_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Recorders);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Recorders other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (LvlType != other.LvlType) return false;
      if (UId != other.UId) return false;
      if (TowerId != other.TowerId) return false;
      if(!roleList_.Equals(other.roleList_)) return false;
      if(!discList_.Equals(other.discList_)) return false;
      if(!recorderList_.Equals(other.recorderList_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (LvlType != global::Nova.Client.Recorders.Types.LevelType.StarTower) hash ^= LvlType.GetHashCode();
      if (UId != 0UL) hash ^= UId.GetHashCode();
      if (TowerId != 0) hash ^= TowerId.GetHashCode();
      hash ^= roleList_.GetHashCode();
      hash ^= discList_.GetHashCode();
      hash ^= recorderList_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (LvlType != global::Nova.Client.Recorders.Types.LevelType.StarTower) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LvlType);
      }
      if (UId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UId);
      }
      if (TowerId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TowerId);
      }
      roleList_.WriteTo(output, _repeated_roleList_codec);
      discList_.WriteTo(output, _repeated_discList_codec);
      recorderList_.WriteTo(output, _repeated_recorderList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (LvlType != global::Nova.Client.Recorders.Types.LevelType.StarTower) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LvlType);
      }
      if (UId != 0UL) {
        output.WriteRawTag(16);
        output.WriteUInt64(UId);
      }
      if (TowerId != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(TowerId);
      }
      roleList_.WriteTo(ref output, _repeated_roleList_codec);
      discList_.WriteTo(ref output, _repeated_discList_codec);
      recorderList_.WriteTo(ref output, _repeated_recorderList_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (LvlType != global::Nova.Client.Recorders.Types.LevelType.StarTower) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LvlType);
      }
      if (UId != 0UL) {
        size += 1 + pb::CodedOutputStream.ComputeUInt64Size(UId);
      }
      if (TowerId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TowerId);
      }
      size += roleList_.CalculateSize(_repeated_roleList_codec);
      size += discList_.CalculateSize(_repeated_discList_codec);
      size += recorderList_.CalculateSize(_repeated_recorderList_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Recorders other) {
      if (other == null) {
        return;
      }
      if (other.LvlType != global::Nova.Client.Recorders.Types.LevelType.StarTower) {
        LvlType = other.LvlType;
      }
      if (other.UId != 0UL) {
        UId = other.UId;
      }
      if (other.TowerId != 0) {
        TowerId = other.TowerId;
      }
      roleList_.Add(other.roleList_);
      discList_.Add(other.discList_);
      recorderList_.Add(other.recorderList_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            LvlType = (global::Nova.Client.Recorders.Types.LevelType) input.ReadEnum();
            break;
          }
          case 16: {
            UId = input.ReadUInt64();
            break;
          }
          case 24: {
            TowerId = input.ReadUInt32();
            break;
          }
          case 34: {
            roleList_.AddEntriesFrom(input, _repeated_roleList_codec);
            break;
          }
          case 42: {
            discList_.AddEntriesFrom(input, _repeated_discList_codec);
            break;
          }
          case 50: {
            recorderList_.AddEntriesFrom(input, _repeated_recorderList_codec);
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            LvlType = (global::Nova.Client.Recorders.Types.LevelType) input.ReadEnum();
            break;
          }
          case 16: {
            UId = input.ReadUInt64();
            break;
          }
          case 24: {
            TowerId = input.ReadUInt32();
            break;
          }
          case 34: {
            roleList_.AddEntriesFrom(ref input, _repeated_roleList_codec);
            break;
          }
          case 42: {
            discList_.AddEntriesFrom(ref input, _repeated_discList_codec);
            break;
          }
          case 50: {
            recorderList_.AddEntriesFrom(ref input, _repeated_recorderList_codec);
            break;
          }
        }
      }
    }
    #endif

    #region Nested types
    /// <summary>Container for nested types declared in the Recorders message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static partial class Types {
      public enum LevelType {
        [pbr::OriginalName("STAR_TOWER")] StarTower = 0,
        [pbr::OriginalName("TRAVELER_DUEL")] TravelerDuel = 1,
        [pbr::OriginalName("VAMPIRE")] Vampire = 2,
      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Role : pb::IMessage<Role>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Role> _parser = new pb::MessageParser<Role>(() => new Role());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Role> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nova.Client.Recorders.Descriptor.NestedTypes[0]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Role() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Role(Role other) : this() {
          id_ = other.id_;
          level_ = other.level_;
          breakCount_ = other.breakCount_;
          hp_ = other.hp_;
          atk_ = other.atk_;
          def_ = other.def_;
          mDef_ = other.mDef_;
          critRate_ = other.critRate_;
          critResistance_ = other.critResistance_;
          critPower_ = other.critPower_;
          hitRate_ = other.hitRate_;
          evd_ = other.evd_;
          defPierce_ = other.defPierce_;
          defIgnore_ = other.defIgnore_;
          wEP_ = other.wEP_;
          fEP_ = other.fEP_;
          sEP_ = other.sEP_;
          aEP_ = other.aEP_;
          lEP_ = other.lEP_;
          dEP_ = other.dEP_;
          wEE_ = other.wEE_;
          fEE_ = other.fEE_;
          sEE_ = other.sEE_;
          aEE_ = other.aEE_;
          lEE_ = other.lEE_;
          dEE_ = other.dEE_;
          wER_ = other.wER_;
          fER_ = other.fER_;
          sER_ = other.sER_;
          aER_ = other.aER_;
          lER_ = other.lER_;
          dER_ = other.dER_;
          wEI_ = other.wEI_;
          fEI_ = other.fEI_;
          sEI_ = other.sEI_;
          aEI_ = other.aEI_;
          lEI_ = other.lEI_;
          dEI_ = other.dEI_;
          shieldBonus_ = other.shieldBonus_;
          incomingShieldBonus_ = other.incomingShieldBonus_;
          skinId_ = other.skinId_;
          suppress_ = other.suppress_;
          normalDmgRatio_ = other.normalDmgRatio_;
          skillDmgRatio_ = other.skillDmgRatio_;
          ultraDmgRatio_ = other.ultraDmgRatio_;
          otherDmgRatio_ = other.otherDmgRatio_;
          rcdNormalDmgRatio_ = other.rcdNormalDmgRatio_;
          rcdSkillDmgRatio_ = other.rcdSkillDmgRatio_;
          rcdUltraDmgRatio_ = other.rcdUltraDmgRatio_;
          rcdOtherDmgRatio_ = other.rcdOtherDmgRatio_;
          markDmgRatio_ = other.markDmgRatio_;
          summonDmgRatio_ = other.summonDmgRatio_;
          rcdSummonDmgRatio_ = other.rcdSummonDmgRatio_;
          projectileDmgRatio_ = other.projectileDmgRatio_;
          rcdProjectileDmgRatio_ = other.rcdProjectileDmgRatio_;
          gENDMG_ = other.gENDMG_;
          dMGPLUS_ = other.dMGPLUS_;
          fINALDMG_ = other.fINALDMG_;
          fINALDMGPLUS_ = other.fINALDMGPLUS_;
          wEERCD_ = other.wEERCD_;
          fEERCD_ = other.fEERCD_;
          sEERCD_ = other.sEERCD_;
          aEERCD_ = other.aEERCD_;
          lEERCD_ = other.lEERCD_;
          dEERCD_ = other.dEERCD_;
          gENDMGRCD_ = other.gENDMGRCD_;
          dMGPLUSRCD_ = other.dMGPLUSRCD_;
          energyConvRatio_ = other.energyConvRatio_;
          energyEfficiency_ = other.energyEfficiency_;
          normalCritRate_ = other.normalCritRate_;
          skillCritRate_ = other.skillCritRate_;
          ultraCritRate_ = other.ultraCritRate_;
          markCritRate_ = other.markCritRate_;
          summonCritRate_ = other.summonCritRate_;
          projectileCritRate_ = other.projectileCritRate_;
          otherCritRate_ = other.otherCritRate_;
          normalCritPower_ = other.normalCritPower_;
          skillCritPower_ = other.skillCritPower_;
          ultraCritPower_ = other.ultraCritPower_;
          markCritPower_ = other.markCritPower_;
          summonCritPower_ = other.summonCritPower_;
          projectileCritPower_ = other.projectileCritPower_;
          otherCritPower_ = other.otherCritPower_;
          attrId_ = other.attrId_;
          skillLevelList_ = other.skillLevelList_.Clone();
          talentInfoList_ = other.talentInfoList_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Role Clone() {
          return new Role(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private int level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "break_count" field.</summary>
        public const int BreakCountFieldNumber = 3;
        private int breakCount_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int BreakCount {
          get { return breakCount_; }
          set {
            breakCount_ = value;
          }
        }

        /// <summary>Field number for the "hp" field.</summary>
        public const int HpFieldNumber = 4;
        private int hp_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Hp {
          get { return hp_; }
          set {
            hp_ = value;
          }
        }

        /// <summary>Field number for the "atk" field.</summary>
        public const int AtkFieldNumber = 5;
        private int atk_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Atk {
          get { return atk_; }
          set {
            atk_ = value;
          }
        }

        /// <summary>Field number for the "def" field.</summary>
        public const int DefFieldNumber = 6;
        private int def_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Def {
          get { return def_; }
          set {
            def_ = value;
          }
        }

        /// <summary>Field number for the "m_def" field.</summary>
        public const int MDefFieldNumber = 7;
        private int mDef_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MDef {
          get { return mDef_; }
          set {
            mDef_ = value;
          }
        }

        /// <summary>Field number for the "crit_rate" field.</summary>
        public const int CritRateFieldNumber = 8;
        private int critRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CritRate {
          get { return critRate_; }
          set {
            critRate_ = value;
          }
        }

        /// <summary>Field number for the "crit_resistance" field.</summary>
        public const int CritResistanceFieldNumber = 9;
        private int critResistance_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CritResistance {
          get { return critResistance_; }
          set {
            critResistance_ = value;
          }
        }

        /// <summary>Field number for the "crit_power" field.</summary>
        public const int CritPowerFieldNumber = 10;
        private int critPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CritPower {
          get { return critPower_; }
          set {
            critPower_ = value;
          }
        }

        /// <summary>Field number for the "hit_rate" field.</summary>
        public const int HitRateFieldNumber = 11;
        private int hitRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int HitRate {
          get { return hitRate_; }
          set {
            hitRate_ = value;
          }
        }

        /// <summary>Field number for the "evd" field.</summary>
        public const int EvdFieldNumber = 12;
        private int evd_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Evd {
          get { return evd_; }
          set {
            evd_ = value;
          }
        }

        /// <summary>Field number for the "def_pierce" field.</summary>
        public const int DefPierceFieldNumber = 13;
        private int defPierce_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DefPierce {
          get { return defPierce_; }
          set {
            defPierce_ = value;
          }
        }

        /// <summary>Field number for the "def_ignore" field.</summary>
        public const int DefIgnoreFieldNumber = 14;
        private int defIgnore_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DefIgnore {
          get { return defIgnore_; }
          set {
            defIgnore_ = value;
          }
        }

        /// <summary>Field number for the "w_e_p" field.</summary>
        public const int WEPFieldNumber = 15;
        private int wEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int WEP {
          get { return wEP_; }
          set {
            wEP_ = value;
          }
        }

        /// <summary>Field number for the "f_e_p" field.</summary>
        public const int FEPFieldNumber = 16;
        private int fEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FEP {
          get { return fEP_; }
          set {
            fEP_ = value;
          }
        }

        /// <summary>Field number for the "s_e_p" field.</summary>
        public const int SEPFieldNumber = 17;
        private int sEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SEP {
          get { return sEP_; }
          set {
            sEP_ = value;
          }
        }

        /// <summary>Field number for the "a_e_p" field.</summary>
        public const int AEPFieldNumber = 18;
        private int aEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AEP {
          get { return aEP_; }
          set {
            aEP_ = value;
          }
        }

        /// <summary>Field number for the "l_e_p" field.</summary>
        public const int LEPFieldNumber = 19;
        private int lEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LEP {
          get { return lEP_; }
          set {
            lEP_ = value;
          }
        }

        /// <summary>Field number for the "d_e_p" field.</summary>
        public const int DEPFieldNumber = 20;
        private int dEP_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DEP {
          get { return dEP_; }
          set {
            dEP_ = value;
          }
        }

        /// <summary>Field number for the "w_e_e" field.</summary>
        public const int WEEFieldNumber = 21;
        private int wEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int WEE {
          get { return wEE_; }
          set {
            wEE_ = value;
          }
        }

        /// <summary>Field number for the "f_e_e" field.</summary>
        public const int FEEFieldNumber = 22;
        private int fEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FEE {
          get { return fEE_; }
          set {
            fEE_ = value;
          }
        }

        /// <summary>Field number for the "s_e_e" field.</summary>
        public const int SEEFieldNumber = 23;
        private int sEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SEE {
          get { return sEE_; }
          set {
            sEE_ = value;
          }
        }

        /// <summary>Field number for the "a_e_e" field.</summary>
        public const int AEEFieldNumber = 24;
        private int aEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AEE {
          get { return aEE_; }
          set {
            aEE_ = value;
          }
        }

        /// <summary>Field number for the "l_e_e" field.</summary>
        public const int LEEFieldNumber = 25;
        private int lEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LEE {
          get { return lEE_; }
          set {
            lEE_ = value;
          }
        }

        /// <summary>Field number for the "d_e_e" field.</summary>
        public const int DEEFieldNumber = 26;
        private int dEE_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DEE {
          get { return dEE_; }
          set {
            dEE_ = value;
          }
        }

        /// <summary>Field number for the "w_e_r" field.</summary>
        public const int WERFieldNumber = 27;
        private int wER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int WER {
          get { return wER_; }
          set {
            wER_ = value;
          }
        }

        /// <summary>Field number for the "f_e_r" field.</summary>
        public const int FERFieldNumber = 28;
        private int fER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FER {
          get { return fER_; }
          set {
            fER_ = value;
          }
        }

        /// <summary>Field number for the "s_e_r" field.</summary>
        public const int SERFieldNumber = 29;
        private int sER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SER {
          get { return sER_; }
          set {
            sER_ = value;
          }
        }

        /// <summary>Field number for the "a_e_r" field.</summary>
        public const int AERFieldNumber = 30;
        private int aER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AER {
          get { return aER_; }
          set {
            aER_ = value;
          }
        }

        /// <summary>Field number for the "l_e_r" field.</summary>
        public const int LERFieldNumber = 31;
        private int lER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LER {
          get { return lER_; }
          set {
            lER_ = value;
          }
        }

        /// <summary>Field number for the "d_e_r" field.</summary>
        public const int DERFieldNumber = 32;
        private int dER_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DER {
          get { return dER_; }
          set {
            dER_ = value;
          }
        }

        /// <summary>Field number for the "w_e_i" field.</summary>
        public const int WEIFieldNumber = 33;
        private int wEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int WEI {
          get { return wEI_; }
          set {
            wEI_ = value;
          }
        }

        /// <summary>Field number for the "f_e_i" field.</summary>
        public const int FEIFieldNumber = 34;
        private int fEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FEI {
          get { return fEI_; }
          set {
            fEI_ = value;
          }
        }

        /// <summary>Field number for the "s_e_i" field.</summary>
        public const int SEIFieldNumber = 35;
        private int sEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SEI {
          get { return sEI_; }
          set {
            sEI_ = value;
          }
        }

        /// <summary>Field number for the "a_e_i" field.</summary>
        public const int AEIFieldNumber = 36;
        private int aEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AEI {
          get { return aEI_; }
          set {
            aEI_ = value;
          }
        }

        /// <summary>Field number for the "l_e_i" field.</summary>
        public const int LEIFieldNumber = 37;
        private int lEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LEI {
          get { return lEI_; }
          set {
            lEI_ = value;
          }
        }

        /// <summary>Field number for the "d_e_i" field.</summary>
        public const int DEIFieldNumber = 38;
        private int dEI_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DEI {
          get { return dEI_; }
          set {
            dEI_ = value;
          }
        }

        /// <summary>Field number for the "shield_bonus" field.</summary>
        public const int ShieldBonusFieldNumber = 39;
        private int shieldBonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ShieldBonus {
          get { return shieldBonus_; }
          set {
            shieldBonus_ = value;
          }
        }

        /// <summary>Field number for the "incoming_shield_bonus" field.</summary>
        public const int IncomingShieldBonusFieldNumber = 40;
        private int incomingShieldBonus_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int IncomingShieldBonus {
          get { return incomingShieldBonus_; }
          set {
            incomingShieldBonus_ = value;
          }
        }

        /// <summary>Field number for the "skin_id" field.</summary>
        public const int SkinIdFieldNumber = 41;
        private int skinId_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SkinId {
          get { return skinId_; }
          set {
            skinId_ = value;
          }
        }

        /// <summary>Field number for the "suppress" field.</summary>
        public const int SuppressFieldNumber = 42;
        private int suppress_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int Suppress {
          get { return suppress_; }
          set {
            suppress_ = value;
          }
        }

        /// <summary>Field number for the "normal_dmg_ratio" field.</summary>
        public const int NormalDmgRatioFieldNumber = 43;
        private int normalDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NormalDmgRatio {
          get { return normalDmgRatio_; }
          set {
            normalDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "skill_dmg_ratio" field.</summary>
        public const int SkillDmgRatioFieldNumber = 44;
        private int skillDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SkillDmgRatio {
          get { return skillDmgRatio_; }
          set {
            skillDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "ultra_dmg_ratio" field.</summary>
        public const int UltraDmgRatioFieldNumber = 45;
        private int ultraDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UltraDmgRatio {
          get { return ultraDmgRatio_; }
          set {
            ultraDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "other_dmg_ratio" field.</summary>
        public const int OtherDmgRatioFieldNumber = 46;
        private int otherDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int OtherDmgRatio {
          get { return otherDmgRatio_; }
          set {
            otherDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_normal_dmg_ratio" field.</summary>
        public const int RcdNormalDmgRatioFieldNumber = 47;
        private int rcdNormalDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdNormalDmgRatio {
          get { return rcdNormalDmgRatio_; }
          set {
            rcdNormalDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_skill_dmg_ratio" field.</summary>
        public const int RcdSkillDmgRatioFieldNumber = 48;
        private int rcdSkillDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdSkillDmgRatio {
          get { return rcdSkillDmgRatio_; }
          set {
            rcdSkillDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_ultra_dmg_ratio" field.</summary>
        public const int RcdUltraDmgRatioFieldNumber = 49;
        private int rcdUltraDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdUltraDmgRatio {
          get { return rcdUltraDmgRatio_; }
          set {
            rcdUltraDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_other_dmg_ratio" field.</summary>
        public const int RcdOtherDmgRatioFieldNumber = 50;
        private int rcdOtherDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdOtherDmgRatio {
          get { return rcdOtherDmgRatio_; }
          set {
            rcdOtherDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "mark_dmg_ratio" field.</summary>
        public const int MarkDmgRatioFieldNumber = 51;
        private int markDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MarkDmgRatio {
          get { return markDmgRatio_; }
          set {
            markDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "summon_dmg_ratio" field.</summary>
        public const int SummonDmgRatioFieldNumber = 52;
        private int summonDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SummonDmgRatio {
          get { return summonDmgRatio_; }
          set {
            summonDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_summon_dmg_ratio" field.</summary>
        public const int RcdSummonDmgRatioFieldNumber = 53;
        private int rcdSummonDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdSummonDmgRatio {
          get { return rcdSummonDmgRatio_; }
          set {
            rcdSummonDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "projectile_dmg_ratio" field.</summary>
        public const int ProjectileDmgRatioFieldNumber = 54;
        private int projectileDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ProjectileDmgRatio {
          get { return projectileDmgRatio_; }
          set {
            projectileDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "rcd_projectile_dmg_ratio" field.</summary>
        public const int RcdProjectileDmgRatioFieldNumber = 55;
        private int rcdProjectileDmgRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int RcdProjectileDmgRatio {
          get { return rcdProjectileDmgRatio_; }
          set {
            rcdProjectileDmgRatio_ = value;
          }
        }

        /// <summary>Field number for the "g_e_n_d_m_g" field.</summary>
        public const int GENDMGFieldNumber = 56;
        private int gENDMG_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int GENDMG {
          get { return gENDMG_; }
          set {
            gENDMG_ = value;
          }
        }

        /// <summary>Field number for the "d_m_g_p_l_u_s" field.</summary>
        public const int DMGPLUSFieldNumber = 57;
        private int dMGPLUS_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DMGPLUS {
          get { return dMGPLUS_; }
          set {
            dMGPLUS_ = value;
          }
        }

        /// <summary>Field number for the "f_i_n_a_l_d_m_g" field.</summary>
        public const int FINALDMGFieldNumber = 58;
        private int fINALDMG_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FINALDMG {
          get { return fINALDMG_; }
          set {
            fINALDMG_ = value;
          }
        }

        /// <summary>Field number for the "f_i_n_a_l_d_m_g_p_l_u_s" field.</summary>
        public const int FINALDMGPLUSFieldNumber = 59;
        private int fINALDMGPLUS_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FINALDMGPLUS {
          get { return fINALDMGPLUS_; }
          set {
            fINALDMGPLUS_ = value;
          }
        }

        /// <summary>Field number for the "w_e_e_r_c_d" field.</summary>
        public const int WEERCDFieldNumber = 60;
        private int wEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int WEERCD {
          get { return wEERCD_; }
          set {
            wEERCD_ = value;
          }
        }

        /// <summary>Field number for the "f_e_e_r_c_d" field.</summary>
        public const int FEERCDFieldNumber = 61;
        private int fEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int FEERCD {
          get { return fEERCD_; }
          set {
            fEERCD_ = value;
          }
        }

        /// <summary>Field number for the "s_e_e_r_c_d" field.</summary>
        public const int SEERCDFieldNumber = 62;
        private int sEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SEERCD {
          get { return sEERCD_; }
          set {
            sEERCD_ = value;
          }
        }

        /// <summary>Field number for the "a_e_e_r_c_d" field.</summary>
        public const int AEERCDFieldNumber = 63;
        private int aEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int AEERCD {
          get { return aEERCD_; }
          set {
            aEERCD_ = value;
          }
        }

        /// <summary>Field number for the "l_e_e_r_c_d" field.</summary>
        public const int LEERCDFieldNumber = 64;
        private int lEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int LEERCD {
          get { return lEERCD_; }
          set {
            lEERCD_ = value;
          }
        }

        /// <summary>Field number for the "d_e_e_r_c_d" field.</summary>
        public const int DEERCDFieldNumber = 65;
        private int dEERCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DEERCD {
          get { return dEERCD_; }
          set {
            dEERCD_ = value;
          }
        }

        /// <summary>Field number for the "g_e_n_d_m_g_r_c_d" field.</summary>
        public const int GENDMGRCDFieldNumber = 66;
        private int gENDMGRCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int GENDMGRCD {
          get { return gENDMGRCD_; }
          set {
            gENDMGRCD_ = value;
          }
        }

        /// <summary>Field number for the "d_m_g_p_l_u_s_r_c_d" field.</summary>
        public const int DMGPLUSRCDFieldNumber = 67;
        private int dMGPLUSRCD_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int DMGPLUSRCD {
          get { return dMGPLUSRCD_; }
          set {
            dMGPLUSRCD_ = value;
          }
        }

        /// <summary>Field number for the "energy_conv_ratio" field.</summary>
        public const int EnergyConvRatioFieldNumber = 68;
        private int energyConvRatio_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int EnergyConvRatio {
          get { return energyConvRatio_; }
          set {
            energyConvRatio_ = value;
          }
        }

        /// <summary>Field number for the "energy_efficiency" field.</summary>
        public const int EnergyEfficiencyFieldNumber = 69;
        private int energyEfficiency_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int EnergyEfficiency {
          get { return energyEfficiency_; }
          set {
            energyEfficiency_ = value;
          }
        }

        /// <summary>Field number for the "normal_crit_rate" field.</summary>
        public const int NormalCritRateFieldNumber = 70;
        private int normalCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NormalCritRate {
          get { return normalCritRate_; }
          set {
            normalCritRate_ = value;
          }
        }

        /// <summary>Field number for the "skill_crit_rate" field.</summary>
        public const int SkillCritRateFieldNumber = 71;
        private int skillCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SkillCritRate {
          get { return skillCritRate_; }
          set {
            skillCritRate_ = value;
          }
        }

        /// <summary>Field number for the "ultra_crit_rate" field.</summary>
        public const int UltraCritRateFieldNumber = 72;
        private int ultraCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UltraCritRate {
          get { return ultraCritRate_; }
          set {
            ultraCritRate_ = value;
          }
        }

        /// <summary>Field number for the "mark_crit_rate" field.</summary>
        public const int MarkCritRateFieldNumber = 73;
        private int markCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MarkCritRate {
          get { return markCritRate_; }
          set {
            markCritRate_ = value;
          }
        }

        /// <summary>Field number for the "summon_crit_rate" field.</summary>
        public const int SummonCritRateFieldNumber = 74;
        private int summonCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SummonCritRate {
          get { return summonCritRate_; }
          set {
            summonCritRate_ = value;
          }
        }

        /// <summary>Field number for the "projectile_crit_rate" field.</summary>
        public const int ProjectileCritRateFieldNumber = 75;
        private int projectileCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ProjectileCritRate {
          get { return projectileCritRate_; }
          set {
            projectileCritRate_ = value;
          }
        }

        /// <summary>Field number for the "other_crit_rate" field.</summary>
        public const int OtherCritRateFieldNumber = 76;
        private int otherCritRate_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int OtherCritRate {
          get { return otherCritRate_; }
          set {
            otherCritRate_ = value;
          }
        }

        /// <summary>Field number for the "normal_crit_power" field.</summary>
        public const int NormalCritPowerFieldNumber = 77;
        private int normalCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int NormalCritPower {
          get { return normalCritPower_; }
          set {
            normalCritPower_ = value;
          }
        }

        /// <summary>Field number for the "skill_crit_power" field.</summary>
        public const int SkillCritPowerFieldNumber = 78;
        private int skillCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SkillCritPower {
          get { return skillCritPower_; }
          set {
            skillCritPower_ = value;
          }
        }

        /// <summary>Field number for the "ultra_crit_power" field.</summary>
        public const int UltraCritPowerFieldNumber = 79;
        private int ultraCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int UltraCritPower {
          get { return ultraCritPower_; }
          set {
            ultraCritPower_ = value;
          }
        }

        /// <summary>Field number for the "mark_crit_power" field.</summary>
        public const int MarkCritPowerFieldNumber = 80;
        private int markCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int MarkCritPower {
          get { return markCritPower_; }
          set {
            markCritPower_ = value;
          }
        }

        /// <summary>Field number for the "summon_crit_power" field.</summary>
        public const int SummonCritPowerFieldNumber = 81;
        private int summonCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int SummonCritPower {
          get { return summonCritPower_; }
          set {
            summonCritPower_ = value;
          }
        }

        /// <summary>Field number for the "projectile_crit_power" field.</summary>
        public const int ProjectileCritPowerFieldNumber = 82;
        private int projectileCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int ProjectileCritPower {
          get { return projectileCritPower_; }
          set {
            projectileCritPower_ = value;
          }
        }

        /// <summary>Field number for the "other_crit_power" field.</summary>
        public const int OtherCritPowerFieldNumber = 83;
        private int otherCritPower_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int OtherCritPower {
          get { return otherCritPower_; }
          set {
            otherCritPower_ = value;
          }
        }

        /// <summary>Field number for the "attr_id" field.</summary>
        public const int AttrIdFieldNumber = 84;
        private string attrId_ = "";
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public string AttrId {
          get { return attrId_; }
          set {
            attrId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
          }
        }

        /// <summary>Field number for the "skill_level_list" field.</summary>
        public const int SkillLevelListFieldNumber = 85;
        private static readonly pb::FieldCodec<int> _repeated_skillLevelList_codec
            = pb::FieldCodec.ForInt32(682);
        private readonly pbc::RepeatedField<int> skillLevelList_ = new pbc::RepeatedField<int>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<int> SkillLevelList {
          get { return skillLevelList_; }
        }

        /// <summary>Field number for the "talent_info_list" field.</summary>
        public const int TalentInfoListFieldNumber = 86;
        private static readonly pb::FieldCodec<bool> _repeated_talentInfoList_codec
            = pb::FieldCodec.ForBool(690);
        private readonly pbc::RepeatedField<bool> talentInfoList_ = new pbc::RepeatedField<bool>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<bool> TalentInfoList {
          get { return talentInfoList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Role);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Role other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Level != other.Level) return false;
          if (BreakCount != other.BreakCount) return false;
          if (Hp != other.Hp) return false;
          if (Atk != other.Atk) return false;
          if (Def != other.Def) return false;
          if (MDef != other.MDef) return false;
          if (CritRate != other.CritRate) return false;
          if (CritResistance != other.CritResistance) return false;
          if (CritPower != other.CritPower) return false;
          if (HitRate != other.HitRate) return false;
          if (Evd != other.Evd) return false;
          if (DefPierce != other.DefPierce) return false;
          if (DefIgnore != other.DefIgnore) return false;
          if (WEP != other.WEP) return false;
          if (FEP != other.FEP) return false;
          if (SEP != other.SEP) return false;
          if (AEP != other.AEP) return false;
          if (LEP != other.LEP) return false;
          if (DEP != other.DEP) return false;
          if (WEE != other.WEE) return false;
          if (FEE != other.FEE) return false;
          if (SEE != other.SEE) return false;
          if (AEE != other.AEE) return false;
          if (LEE != other.LEE) return false;
          if (DEE != other.DEE) return false;
          if (WER != other.WER) return false;
          if (FER != other.FER) return false;
          if (SER != other.SER) return false;
          if (AER != other.AER) return false;
          if (LER != other.LER) return false;
          if (DER != other.DER) return false;
          if (WEI != other.WEI) return false;
          if (FEI != other.FEI) return false;
          if (SEI != other.SEI) return false;
          if (AEI != other.AEI) return false;
          if (LEI != other.LEI) return false;
          if (DEI != other.DEI) return false;
          if (ShieldBonus != other.ShieldBonus) return false;
          if (IncomingShieldBonus != other.IncomingShieldBonus) return false;
          if (SkinId != other.SkinId) return false;
          if (Suppress != other.Suppress) return false;
          if (NormalDmgRatio != other.NormalDmgRatio) return false;
          if (SkillDmgRatio != other.SkillDmgRatio) return false;
          if (UltraDmgRatio != other.UltraDmgRatio) return false;
          if (OtherDmgRatio != other.OtherDmgRatio) return false;
          if (RcdNormalDmgRatio != other.RcdNormalDmgRatio) return false;
          if (RcdSkillDmgRatio != other.RcdSkillDmgRatio) return false;
          if (RcdUltraDmgRatio != other.RcdUltraDmgRatio) return false;
          if (RcdOtherDmgRatio != other.RcdOtherDmgRatio) return false;
          if (MarkDmgRatio != other.MarkDmgRatio) return false;
          if (SummonDmgRatio != other.SummonDmgRatio) return false;
          if (RcdSummonDmgRatio != other.RcdSummonDmgRatio) return false;
          if (ProjectileDmgRatio != other.ProjectileDmgRatio) return false;
          if (RcdProjectileDmgRatio != other.RcdProjectileDmgRatio) return false;
          if (GENDMG != other.GENDMG) return false;
          if (DMGPLUS != other.DMGPLUS) return false;
          if (FINALDMG != other.FINALDMG) return false;
          if (FINALDMGPLUS != other.FINALDMGPLUS) return false;
          if (WEERCD != other.WEERCD) return false;
          if (FEERCD != other.FEERCD) return false;
          if (SEERCD != other.SEERCD) return false;
          if (AEERCD != other.AEERCD) return false;
          if (LEERCD != other.LEERCD) return false;
          if (DEERCD != other.DEERCD) return false;
          if (GENDMGRCD != other.GENDMGRCD) return false;
          if (DMGPLUSRCD != other.DMGPLUSRCD) return false;
          if (EnergyConvRatio != other.EnergyConvRatio) return false;
          if (EnergyEfficiency != other.EnergyEfficiency) return false;
          if (NormalCritRate != other.NormalCritRate) return false;
          if (SkillCritRate != other.SkillCritRate) return false;
          if (UltraCritRate != other.UltraCritRate) return false;
          if (MarkCritRate != other.MarkCritRate) return false;
          if (SummonCritRate != other.SummonCritRate) return false;
          if (ProjectileCritRate != other.ProjectileCritRate) return false;
          if (OtherCritRate != other.OtherCritRate) return false;
          if (NormalCritPower != other.NormalCritPower) return false;
          if (SkillCritPower != other.SkillCritPower) return false;
          if (UltraCritPower != other.UltraCritPower) return false;
          if (MarkCritPower != other.MarkCritPower) return false;
          if (SummonCritPower != other.SummonCritPower) return false;
          if (ProjectileCritPower != other.ProjectileCritPower) return false;
          if (OtherCritPower != other.OtherCritPower) return false;
          if (AttrId != other.AttrId) return false;
          if(!skillLevelList_.Equals(other.skillLevelList_)) return false;
          if(!talentInfoList_.Equals(other.talentInfoList_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (BreakCount != 0) hash ^= BreakCount.GetHashCode();
          if (Hp != 0) hash ^= Hp.GetHashCode();
          if (Atk != 0) hash ^= Atk.GetHashCode();
          if (Def != 0) hash ^= Def.GetHashCode();
          if (MDef != 0) hash ^= MDef.GetHashCode();
          if (CritRate != 0) hash ^= CritRate.GetHashCode();
          if (CritResistance != 0) hash ^= CritResistance.GetHashCode();
          if (CritPower != 0) hash ^= CritPower.GetHashCode();
          if (HitRate != 0) hash ^= HitRate.GetHashCode();
          if (Evd != 0) hash ^= Evd.GetHashCode();
          if (DefPierce != 0) hash ^= DefPierce.GetHashCode();
          if (DefIgnore != 0) hash ^= DefIgnore.GetHashCode();
          if (WEP != 0) hash ^= WEP.GetHashCode();
          if (FEP != 0) hash ^= FEP.GetHashCode();
          if (SEP != 0) hash ^= SEP.GetHashCode();
          if (AEP != 0) hash ^= AEP.GetHashCode();
          if (LEP != 0) hash ^= LEP.GetHashCode();
          if (DEP != 0) hash ^= DEP.GetHashCode();
          if (WEE != 0) hash ^= WEE.GetHashCode();
          if (FEE != 0) hash ^= FEE.GetHashCode();
          if (SEE != 0) hash ^= SEE.GetHashCode();
          if (AEE != 0) hash ^= AEE.GetHashCode();
          if (LEE != 0) hash ^= LEE.GetHashCode();
          if (DEE != 0) hash ^= DEE.GetHashCode();
          if (WER != 0) hash ^= WER.GetHashCode();
          if (FER != 0) hash ^= FER.GetHashCode();
          if (SER != 0) hash ^= SER.GetHashCode();
          if (AER != 0) hash ^= AER.GetHashCode();
          if (LER != 0) hash ^= LER.GetHashCode();
          if (DER != 0) hash ^= DER.GetHashCode();
          if (WEI != 0) hash ^= WEI.GetHashCode();
          if (FEI != 0) hash ^= FEI.GetHashCode();
          if (SEI != 0) hash ^= SEI.GetHashCode();
          if (AEI != 0) hash ^= AEI.GetHashCode();
          if (LEI != 0) hash ^= LEI.GetHashCode();
          if (DEI != 0) hash ^= DEI.GetHashCode();
          if (ShieldBonus != 0) hash ^= ShieldBonus.GetHashCode();
          if (IncomingShieldBonus != 0) hash ^= IncomingShieldBonus.GetHashCode();
          if (SkinId != 0) hash ^= SkinId.GetHashCode();
          if (Suppress != 0) hash ^= Suppress.GetHashCode();
          if (NormalDmgRatio != 0) hash ^= NormalDmgRatio.GetHashCode();
          if (SkillDmgRatio != 0) hash ^= SkillDmgRatio.GetHashCode();
          if (UltraDmgRatio != 0) hash ^= UltraDmgRatio.GetHashCode();
          if (OtherDmgRatio != 0) hash ^= OtherDmgRatio.GetHashCode();
          if (RcdNormalDmgRatio != 0) hash ^= RcdNormalDmgRatio.GetHashCode();
          if (RcdSkillDmgRatio != 0) hash ^= RcdSkillDmgRatio.GetHashCode();
          if (RcdUltraDmgRatio != 0) hash ^= RcdUltraDmgRatio.GetHashCode();
          if (RcdOtherDmgRatio != 0) hash ^= RcdOtherDmgRatio.GetHashCode();
          if (MarkDmgRatio != 0) hash ^= MarkDmgRatio.GetHashCode();
          if (SummonDmgRatio != 0) hash ^= SummonDmgRatio.GetHashCode();
          if (RcdSummonDmgRatio != 0) hash ^= RcdSummonDmgRatio.GetHashCode();
          if (ProjectileDmgRatio != 0) hash ^= ProjectileDmgRatio.GetHashCode();
          if (RcdProjectileDmgRatio != 0) hash ^= RcdProjectileDmgRatio.GetHashCode();
          if (GENDMG != 0) hash ^= GENDMG.GetHashCode();
          if (DMGPLUS != 0) hash ^= DMGPLUS.GetHashCode();
          if (FINALDMG != 0) hash ^= FINALDMG.GetHashCode();
          if (FINALDMGPLUS != 0) hash ^= FINALDMGPLUS.GetHashCode();
          if (WEERCD != 0) hash ^= WEERCD.GetHashCode();
          if (FEERCD != 0) hash ^= FEERCD.GetHashCode();
          if (SEERCD != 0) hash ^= SEERCD.GetHashCode();
          if (AEERCD != 0) hash ^= AEERCD.GetHashCode();
          if (LEERCD != 0) hash ^= LEERCD.GetHashCode();
          if (DEERCD != 0) hash ^= DEERCD.GetHashCode();
          if (GENDMGRCD != 0) hash ^= GENDMGRCD.GetHashCode();
          if (DMGPLUSRCD != 0) hash ^= DMGPLUSRCD.GetHashCode();
          if (EnergyConvRatio != 0) hash ^= EnergyConvRatio.GetHashCode();
          if (EnergyEfficiency != 0) hash ^= EnergyEfficiency.GetHashCode();
          if (NormalCritRate != 0) hash ^= NormalCritRate.GetHashCode();
          if (SkillCritRate != 0) hash ^= SkillCritRate.GetHashCode();
          if (UltraCritRate != 0) hash ^= UltraCritRate.GetHashCode();
          if (MarkCritRate != 0) hash ^= MarkCritRate.GetHashCode();
          if (SummonCritRate != 0) hash ^= SummonCritRate.GetHashCode();
          if (ProjectileCritRate != 0) hash ^= ProjectileCritRate.GetHashCode();
          if (OtherCritRate != 0) hash ^= OtherCritRate.GetHashCode();
          if (NormalCritPower != 0) hash ^= NormalCritPower.GetHashCode();
          if (SkillCritPower != 0) hash ^= SkillCritPower.GetHashCode();
          if (UltraCritPower != 0) hash ^= UltraCritPower.GetHashCode();
          if (MarkCritPower != 0) hash ^= MarkCritPower.GetHashCode();
          if (SummonCritPower != 0) hash ^= SummonCritPower.GetHashCode();
          if (ProjectileCritPower != 0) hash ^= ProjectileCritPower.GetHashCode();
          if (OtherCritPower != 0) hash ^= OtherCritPower.GetHashCode();
          if (AttrId.Length != 0) hash ^= AttrId.GetHashCode();
          hash ^= skillLevelList_.GetHashCode();
          hash ^= talentInfoList_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Level);
          }
          if (BreakCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(BreakCount);
          }
          if (Hp != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Hp);
          }
          if (Atk != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Atk);
          }
          if (Def != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Def);
          }
          if (MDef != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MDef);
          }
          if (CritRate != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(CritRate);
          }
          if (CritResistance != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(CritResistance);
          }
          if (CritPower != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(CritPower);
          }
          if (HitRate != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(HitRate);
          }
          if (Evd != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Evd);
          }
          if (DefPierce != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(DefPierce);
          }
          if (DefIgnore != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(DefIgnore);
          }
          if (WEP != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(WEP);
          }
          if (FEP != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(FEP);
          }
          if (SEP != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(SEP);
          }
          if (AEP != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(AEP);
          }
          if (LEP != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(LEP);
          }
          if (DEP != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(DEP);
          }
          if (WEE != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(WEE);
          }
          if (FEE != 0) {
            output.WriteRawTag(176, 1);
            output.WriteInt32(FEE);
          }
          if (SEE != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(SEE);
          }
          if (AEE != 0) {
            output.WriteRawTag(192, 1);
            output.WriteInt32(AEE);
          }
          if (LEE != 0) {
            output.WriteRawTag(200, 1);
            output.WriteInt32(LEE);
          }
          if (DEE != 0) {
            output.WriteRawTag(208, 1);
            output.WriteInt32(DEE);
          }
          if (WER != 0) {
            output.WriteRawTag(216, 1);
            output.WriteInt32(WER);
          }
          if (FER != 0) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(FER);
          }
          if (SER != 0) {
            output.WriteRawTag(232, 1);
            output.WriteInt32(SER);
          }
          if (AER != 0) {
            output.WriteRawTag(240, 1);
            output.WriteInt32(AER);
          }
          if (LER != 0) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(LER);
          }
          if (DER != 0) {
            output.WriteRawTag(128, 2);
            output.WriteInt32(DER);
          }
          if (WEI != 0) {
            output.WriteRawTag(136, 2);
            output.WriteInt32(WEI);
          }
          if (FEI != 0) {
            output.WriteRawTag(144, 2);
            output.WriteInt32(FEI);
          }
          if (SEI != 0) {
            output.WriteRawTag(152, 2);
            output.WriteInt32(SEI);
          }
          if (AEI != 0) {
            output.WriteRawTag(160, 2);
            output.WriteInt32(AEI);
          }
          if (LEI != 0) {
            output.WriteRawTag(168, 2);
            output.WriteInt32(LEI);
          }
          if (DEI != 0) {
            output.WriteRawTag(176, 2);
            output.WriteInt32(DEI);
          }
          if (ShieldBonus != 0) {
            output.WriteRawTag(184, 2);
            output.WriteInt32(ShieldBonus);
          }
          if (IncomingShieldBonus != 0) {
            output.WriteRawTag(192, 2);
            output.WriteInt32(IncomingShieldBonus);
          }
          if (SkinId != 0) {
            output.WriteRawTag(200, 2);
            output.WriteInt32(SkinId);
          }
          if (Suppress != 0) {
            output.WriteRawTag(208, 2);
            output.WriteInt32(Suppress);
          }
          if (NormalDmgRatio != 0) {
            output.WriteRawTag(216, 2);
            output.WriteInt32(NormalDmgRatio);
          }
          if (SkillDmgRatio != 0) {
            output.WriteRawTag(224, 2);
            output.WriteInt32(SkillDmgRatio);
          }
          if (UltraDmgRatio != 0) {
            output.WriteRawTag(232, 2);
            output.WriteInt32(UltraDmgRatio);
          }
          if (OtherDmgRatio != 0) {
            output.WriteRawTag(240, 2);
            output.WriteInt32(OtherDmgRatio);
          }
          if (RcdNormalDmgRatio != 0) {
            output.WriteRawTag(248, 2);
            output.WriteInt32(RcdNormalDmgRatio);
          }
          if (RcdSkillDmgRatio != 0) {
            output.WriteRawTag(128, 3);
            output.WriteInt32(RcdSkillDmgRatio);
          }
          if (RcdUltraDmgRatio != 0) {
            output.WriteRawTag(136, 3);
            output.WriteInt32(RcdUltraDmgRatio);
          }
          if (RcdOtherDmgRatio != 0) {
            output.WriteRawTag(144, 3);
            output.WriteInt32(RcdOtherDmgRatio);
          }
          if (MarkDmgRatio != 0) {
            output.WriteRawTag(152, 3);
            output.WriteInt32(MarkDmgRatio);
          }
          if (SummonDmgRatio != 0) {
            output.WriteRawTag(160, 3);
            output.WriteInt32(SummonDmgRatio);
          }
          if (RcdSummonDmgRatio != 0) {
            output.WriteRawTag(168, 3);
            output.WriteInt32(RcdSummonDmgRatio);
          }
          if (ProjectileDmgRatio != 0) {
            output.WriteRawTag(176, 3);
            output.WriteInt32(ProjectileDmgRatio);
          }
          if (RcdProjectileDmgRatio != 0) {
            output.WriteRawTag(184, 3);
            output.WriteInt32(RcdProjectileDmgRatio);
          }
          if (GENDMG != 0) {
            output.WriteRawTag(192, 3);
            output.WriteInt32(GENDMG);
          }
          if (DMGPLUS != 0) {
            output.WriteRawTag(200, 3);
            output.WriteInt32(DMGPLUS);
          }
          if (FINALDMG != 0) {
            output.WriteRawTag(208, 3);
            output.WriteInt32(FINALDMG);
          }
          if (FINALDMGPLUS != 0) {
            output.WriteRawTag(216, 3);
            output.WriteInt32(FINALDMGPLUS);
          }
          if (WEERCD != 0) {
            output.WriteRawTag(224, 3);
            output.WriteInt32(WEERCD);
          }
          if (FEERCD != 0) {
            output.WriteRawTag(232, 3);
            output.WriteInt32(FEERCD);
          }
          if (SEERCD != 0) {
            output.WriteRawTag(240, 3);
            output.WriteInt32(SEERCD);
          }
          if (AEERCD != 0) {
            output.WriteRawTag(248, 3);
            output.WriteInt32(AEERCD);
          }
          if (LEERCD != 0) {
            output.WriteRawTag(128, 4);
            output.WriteInt32(LEERCD);
          }
          if (DEERCD != 0) {
            output.WriteRawTag(136, 4);
            output.WriteInt32(DEERCD);
          }
          if (GENDMGRCD != 0) {
            output.WriteRawTag(144, 4);
            output.WriteInt32(GENDMGRCD);
          }
          if (DMGPLUSRCD != 0) {
            output.WriteRawTag(152, 4);
            output.WriteInt32(DMGPLUSRCD);
          }
          if (EnergyConvRatio != 0) {
            output.WriteRawTag(160, 4);
            output.WriteInt32(EnergyConvRatio);
          }
          if (EnergyEfficiency != 0) {
            output.WriteRawTag(168, 4);
            output.WriteInt32(EnergyEfficiency);
          }
          if (NormalCritRate != 0) {
            output.WriteRawTag(176, 4);
            output.WriteInt32(NormalCritRate);
          }
          if (SkillCritRate != 0) {
            output.WriteRawTag(184, 4);
            output.WriteInt32(SkillCritRate);
          }
          if (UltraCritRate != 0) {
            output.WriteRawTag(192, 4);
            output.WriteInt32(UltraCritRate);
          }
          if (MarkCritRate != 0) {
            output.WriteRawTag(200, 4);
            output.WriteInt32(MarkCritRate);
          }
          if (SummonCritRate != 0) {
            output.WriteRawTag(208, 4);
            output.WriteInt32(SummonCritRate);
          }
          if (ProjectileCritRate != 0) {
            output.WriteRawTag(216, 4);
            output.WriteInt32(ProjectileCritRate);
          }
          if (OtherCritRate != 0) {
            output.WriteRawTag(224, 4);
            output.WriteInt32(OtherCritRate);
          }
          if (NormalCritPower != 0) {
            output.WriteRawTag(232, 4);
            output.WriteInt32(NormalCritPower);
          }
          if (SkillCritPower != 0) {
            output.WriteRawTag(240, 4);
            output.WriteInt32(SkillCritPower);
          }
          if (UltraCritPower != 0) {
            output.WriteRawTag(248, 4);
            output.WriteInt32(UltraCritPower);
          }
          if (MarkCritPower != 0) {
            output.WriteRawTag(128, 5);
            output.WriteInt32(MarkCritPower);
          }
          if (SummonCritPower != 0) {
            output.WriteRawTag(136, 5);
            output.WriteInt32(SummonCritPower);
          }
          if (ProjectileCritPower != 0) {
            output.WriteRawTag(144, 5);
            output.WriteInt32(ProjectileCritPower);
          }
          if (OtherCritPower != 0) {
            output.WriteRawTag(152, 5);
            output.WriteInt32(OtherCritPower);
          }
          if (AttrId.Length != 0) {
            output.WriteRawTag(162, 5);
            output.WriteString(AttrId);
          }
          skillLevelList_.WriteTo(output, _repeated_skillLevelList_codec);
          talentInfoList_.WriteTo(output, _repeated_talentInfoList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Level);
          }
          if (BreakCount != 0) {
            output.WriteRawTag(24);
            output.WriteInt32(BreakCount);
          }
          if (Hp != 0) {
            output.WriteRawTag(32);
            output.WriteInt32(Hp);
          }
          if (Atk != 0) {
            output.WriteRawTag(40);
            output.WriteInt32(Atk);
          }
          if (Def != 0) {
            output.WriteRawTag(48);
            output.WriteInt32(Def);
          }
          if (MDef != 0) {
            output.WriteRawTag(56);
            output.WriteInt32(MDef);
          }
          if (CritRate != 0) {
            output.WriteRawTag(64);
            output.WriteInt32(CritRate);
          }
          if (CritResistance != 0) {
            output.WriteRawTag(72);
            output.WriteInt32(CritResistance);
          }
          if (CritPower != 0) {
            output.WriteRawTag(80);
            output.WriteInt32(CritPower);
          }
          if (HitRate != 0) {
            output.WriteRawTag(88);
            output.WriteInt32(HitRate);
          }
          if (Evd != 0) {
            output.WriteRawTag(96);
            output.WriteInt32(Evd);
          }
          if (DefPierce != 0) {
            output.WriteRawTag(104);
            output.WriteInt32(DefPierce);
          }
          if (DefIgnore != 0) {
            output.WriteRawTag(112);
            output.WriteInt32(DefIgnore);
          }
          if (WEP != 0) {
            output.WriteRawTag(120);
            output.WriteInt32(WEP);
          }
          if (FEP != 0) {
            output.WriteRawTag(128, 1);
            output.WriteInt32(FEP);
          }
          if (SEP != 0) {
            output.WriteRawTag(136, 1);
            output.WriteInt32(SEP);
          }
          if (AEP != 0) {
            output.WriteRawTag(144, 1);
            output.WriteInt32(AEP);
          }
          if (LEP != 0) {
            output.WriteRawTag(152, 1);
            output.WriteInt32(LEP);
          }
          if (DEP != 0) {
            output.WriteRawTag(160, 1);
            output.WriteInt32(DEP);
          }
          if (WEE != 0) {
            output.WriteRawTag(168, 1);
            output.WriteInt32(WEE);
          }
          if (FEE != 0) {
            output.WriteRawTag(176, 1);
            output.WriteInt32(FEE);
          }
          if (SEE != 0) {
            output.WriteRawTag(184, 1);
            output.WriteInt32(SEE);
          }
          if (AEE != 0) {
            output.WriteRawTag(192, 1);
            output.WriteInt32(AEE);
          }
          if (LEE != 0) {
            output.WriteRawTag(200, 1);
            output.WriteInt32(LEE);
          }
          if (DEE != 0) {
            output.WriteRawTag(208, 1);
            output.WriteInt32(DEE);
          }
          if (WER != 0) {
            output.WriteRawTag(216, 1);
            output.WriteInt32(WER);
          }
          if (FER != 0) {
            output.WriteRawTag(224, 1);
            output.WriteInt32(FER);
          }
          if (SER != 0) {
            output.WriteRawTag(232, 1);
            output.WriteInt32(SER);
          }
          if (AER != 0) {
            output.WriteRawTag(240, 1);
            output.WriteInt32(AER);
          }
          if (LER != 0) {
            output.WriteRawTag(248, 1);
            output.WriteInt32(LER);
          }
          if (DER != 0) {
            output.WriteRawTag(128, 2);
            output.WriteInt32(DER);
          }
          if (WEI != 0) {
            output.WriteRawTag(136, 2);
            output.WriteInt32(WEI);
          }
          if (FEI != 0) {
            output.WriteRawTag(144, 2);
            output.WriteInt32(FEI);
          }
          if (SEI != 0) {
            output.WriteRawTag(152, 2);
            output.WriteInt32(SEI);
          }
          if (AEI != 0) {
            output.WriteRawTag(160, 2);
            output.WriteInt32(AEI);
          }
          if (LEI != 0) {
            output.WriteRawTag(168, 2);
            output.WriteInt32(LEI);
          }
          if (DEI != 0) {
            output.WriteRawTag(176, 2);
            output.WriteInt32(DEI);
          }
          if (ShieldBonus != 0) {
            output.WriteRawTag(184, 2);
            output.WriteInt32(ShieldBonus);
          }
          if (IncomingShieldBonus != 0) {
            output.WriteRawTag(192, 2);
            output.WriteInt32(IncomingShieldBonus);
          }
          if (SkinId != 0) {
            output.WriteRawTag(200, 2);
            output.WriteInt32(SkinId);
          }
          if (Suppress != 0) {
            output.WriteRawTag(208, 2);
            output.WriteInt32(Suppress);
          }
          if (NormalDmgRatio != 0) {
            output.WriteRawTag(216, 2);
            output.WriteInt32(NormalDmgRatio);
          }
          if (SkillDmgRatio != 0) {
            output.WriteRawTag(224, 2);
            output.WriteInt32(SkillDmgRatio);
          }
          if (UltraDmgRatio != 0) {
            output.WriteRawTag(232, 2);
            output.WriteInt32(UltraDmgRatio);
          }
          if (OtherDmgRatio != 0) {
            output.WriteRawTag(240, 2);
            output.WriteInt32(OtherDmgRatio);
          }
          if (RcdNormalDmgRatio != 0) {
            output.WriteRawTag(248, 2);
            output.WriteInt32(RcdNormalDmgRatio);
          }
          if (RcdSkillDmgRatio != 0) {
            output.WriteRawTag(128, 3);
            output.WriteInt32(RcdSkillDmgRatio);
          }
          if (RcdUltraDmgRatio != 0) {
            output.WriteRawTag(136, 3);
            output.WriteInt32(RcdUltraDmgRatio);
          }
          if (RcdOtherDmgRatio != 0) {
            output.WriteRawTag(144, 3);
            output.WriteInt32(RcdOtherDmgRatio);
          }
          if (MarkDmgRatio != 0) {
            output.WriteRawTag(152, 3);
            output.WriteInt32(MarkDmgRatio);
          }
          if (SummonDmgRatio != 0) {
            output.WriteRawTag(160, 3);
            output.WriteInt32(SummonDmgRatio);
          }
          if (RcdSummonDmgRatio != 0) {
            output.WriteRawTag(168, 3);
            output.WriteInt32(RcdSummonDmgRatio);
          }
          if (ProjectileDmgRatio != 0) {
            output.WriteRawTag(176, 3);
            output.WriteInt32(ProjectileDmgRatio);
          }
          if (RcdProjectileDmgRatio != 0) {
            output.WriteRawTag(184, 3);
            output.WriteInt32(RcdProjectileDmgRatio);
          }
          if (GENDMG != 0) {
            output.WriteRawTag(192, 3);
            output.WriteInt32(GENDMG);
          }
          if (DMGPLUS != 0) {
            output.WriteRawTag(200, 3);
            output.WriteInt32(DMGPLUS);
          }
          if (FINALDMG != 0) {
            output.WriteRawTag(208, 3);
            output.WriteInt32(FINALDMG);
          }
          if (FINALDMGPLUS != 0) {
            output.WriteRawTag(216, 3);
            output.WriteInt32(FINALDMGPLUS);
          }
          if (WEERCD != 0) {
            output.WriteRawTag(224, 3);
            output.WriteInt32(WEERCD);
          }
          if (FEERCD != 0) {
            output.WriteRawTag(232, 3);
            output.WriteInt32(FEERCD);
          }
          if (SEERCD != 0) {
            output.WriteRawTag(240, 3);
            output.WriteInt32(SEERCD);
          }
          if (AEERCD != 0) {
            output.WriteRawTag(248, 3);
            output.WriteInt32(AEERCD);
          }
          if (LEERCD != 0) {
            output.WriteRawTag(128, 4);
            output.WriteInt32(LEERCD);
          }
          if (DEERCD != 0) {
            output.WriteRawTag(136, 4);
            output.WriteInt32(DEERCD);
          }
          if (GENDMGRCD != 0) {
            output.WriteRawTag(144, 4);
            output.WriteInt32(GENDMGRCD);
          }
          if (DMGPLUSRCD != 0) {
            output.WriteRawTag(152, 4);
            output.WriteInt32(DMGPLUSRCD);
          }
          if (EnergyConvRatio != 0) {
            output.WriteRawTag(160, 4);
            output.WriteInt32(EnergyConvRatio);
          }
          if (EnergyEfficiency != 0) {
            output.WriteRawTag(168, 4);
            output.WriteInt32(EnergyEfficiency);
          }
          if (NormalCritRate != 0) {
            output.WriteRawTag(176, 4);
            output.WriteInt32(NormalCritRate);
          }
          if (SkillCritRate != 0) {
            output.WriteRawTag(184, 4);
            output.WriteInt32(SkillCritRate);
          }
          if (UltraCritRate != 0) {
            output.WriteRawTag(192, 4);
            output.WriteInt32(UltraCritRate);
          }
          if (MarkCritRate != 0) {
            output.WriteRawTag(200, 4);
            output.WriteInt32(MarkCritRate);
          }
          if (SummonCritRate != 0) {
            output.WriteRawTag(208, 4);
            output.WriteInt32(SummonCritRate);
          }
          if (ProjectileCritRate != 0) {
            output.WriteRawTag(216, 4);
            output.WriteInt32(ProjectileCritRate);
          }
          if (OtherCritRate != 0) {
            output.WriteRawTag(224, 4);
            output.WriteInt32(OtherCritRate);
          }
          if (NormalCritPower != 0) {
            output.WriteRawTag(232, 4);
            output.WriteInt32(NormalCritPower);
          }
          if (SkillCritPower != 0) {
            output.WriteRawTag(240, 4);
            output.WriteInt32(SkillCritPower);
          }
          if (UltraCritPower != 0) {
            output.WriteRawTag(248, 4);
            output.WriteInt32(UltraCritPower);
          }
          if (MarkCritPower != 0) {
            output.WriteRawTag(128, 5);
            output.WriteInt32(MarkCritPower);
          }
          if (SummonCritPower != 0) {
            output.WriteRawTag(136, 5);
            output.WriteInt32(SummonCritPower);
          }
          if (ProjectileCritPower != 0) {
            output.WriteRawTag(144, 5);
            output.WriteInt32(ProjectileCritPower);
          }
          if (OtherCritPower != 0) {
            output.WriteRawTag(152, 5);
            output.WriteInt32(OtherCritPower);
          }
          if (AttrId.Length != 0) {
            output.WriteRawTag(162, 5);
            output.WriteString(AttrId);
          }
          skillLevelList_.WriteTo(ref output, _repeated_skillLevelList_codec);
          talentInfoList_.WriteTo(ref output, _repeated_talentInfoList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Level);
          }
          if (BreakCount != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(BreakCount);
          }
          if (Hp != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
          }
          if (Atk != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Atk);
          }
          if (Def != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Def);
          }
          if (MDef != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(MDef);
          }
          if (CritRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritRate);
          }
          if (CritResistance != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritResistance);
          }
          if (CritPower != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritPower);
          }
          if (HitRate != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(HitRate);
          }
          if (Evd != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Evd);
          }
          if (DefPierce != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefPierce);
          }
          if (DefIgnore != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(DefIgnore);
          }
          if (WEP != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(WEP);
          }
          if (FEP != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEP);
          }
          if (SEP != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEP);
          }
          if (AEP != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEP);
          }
          if (LEP != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEP);
          }
          if (DEP != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEP);
          }
          if (WEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEE);
          }
          if (FEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEE);
          }
          if (SEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEE);
          }
          if (AEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEE);
          }
          if (LEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEE);
          }
          if (DEE != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEE);
          }
          if (WER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(WER);
          }
          if (FER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FER);
          }
          if (SER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SER);
          }
          if (AER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AER);
          }
          if (LER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LER);
          }
          if (DER != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DER);
          }
          if (WEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEI);
          }
          if (FEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEI);
          }
          if (SEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEI);
          }
          if (AEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEI);
          }
          if (LEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEI);
          }
          if (DEI != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEI);
          }
          if (ShieldBonus != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShieldBonus);
          }
          if (IncomingShieldBonus != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(IncomingShieldBonus);
          }
          if (SkinId != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkinId);
          }
          if (Suppress != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(Suppress);
          }
          if (NormalDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalDmgRatio);
          }
          if (SkillDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillDmgRatio);
          }
          if (UltraDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltraDmgRatio);
          }
          if (OtherDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherDmgRatio);
          }
          if (RcdNormalDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdNormalDmgRatio);
          }
          if (RcdSkillDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdSkillDmgRatio);
          }
          if (RcdUltraDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdUltraDmgRatio);
          }
          if (RcdOtherDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdOtherDmgRatio);
          }
          if (MarkDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkDmgRatio);
          }
          if (SummonDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SummonDmgRatio);
          }
          if (RcdSummonDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdSummonDmgRatio);
          }
          if (ProjectileDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileDmgRatio);
          }
          if (RcdProjectileDmgRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(RcdProjectileDmgRatio);
          }
          if (GENDMG != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(GENDMG);
          }
          if (DMGPLUS != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMGPLUS);
          }
          if (FINALDMG != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FINALDMG);
          }
          if (FINALDMGPLUS != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FINALDMGPLUS);
          }
          if (WEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEERCD);
          }
          if (FEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEERCD);
          }
          if (SEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEERCD);
          }
          if (AEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEERCD);
          }
          if (LEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEERCD);
          }
          if (DEERCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEERCD);
          }
          if (GENDMGRCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(GENDMGRCD);
          }
          if (DMGPLUSRCD != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMGPLUSRCD);
          }
          if (EnergyConvRatio != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergyConvRatio);
          }
          if (EnergyEfficiency != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(EnergyEfficiency);
          }
          if (NormalCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalCritRate);
          }
          if (SkillCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillCritRate);
          }
          if (UltraCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltraCritRate);
          }
          if (MarkCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkCritRate);
          }
          if (SummonCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SummonCritRate);
          }
          if (ProjectileCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileCritRate);
          }
          if (OtherCritRate != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherCritRate);
          }
          if (NormalCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalCritPower);
          }
          if (SkillCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillCritPower);
          }
          if (UltraCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltraCritPower);
          }
          if (MarkCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkCritPower);
          }
          if (SummonCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(SummonCritPower);
          }
          if (ProjectileCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileCritPower);
          }
          if (OtherCritPower != 0) {
            size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherCritPower);
          }
          if (AttrId.Length != 0) {
            size += 2 + pb::CodedOutputStream.ComputeStringSize(AttrId);
          }
          size += skillLevelList_.CalculateSize(_repeated_skillLevelList_codec);
          size += talentInfoList_.CalculateSize(_repeated_talentInfoList_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Role other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          if (other.BreakCount != 0) {
            BreakCount = other.BreakCount;
          }
          if (other.Hp != 0) {
            Hp = other.Hp;
          }
          if (other.Atk != 0) {
            Atk = other.Atk;
          }
          if (other.Def != 0) {
            Def = other.Def;
          }
          if (other.MDef != 0) {
            MDef = other.MDef;
          }
          if (other.CritRate != 0) {
            CritRate = other.CritRate;
          }
          if (other.CritResistance != 0) {
            CritResistance = other.CritResistance;
          }
          if (other.CritPower != 0) {
            CritPower = other.CritPower;
          }
          if (other.HitRate != 0) {
            HitRate = other.HitRate;
          }
          if (other.Evd != 0) {
            Evd = other.Evd;
          }
          if (other.DefPierce != 0) {
            DefPierce = other.DefPierce;
          }
          if (other.DefIgnore != 0) {
            DefIgnore = other.DefIgnore;
          }
          if (other.WEP != 0) {
            WEP = other.WEP;
          }
          if (other.FEP != 0) {
            FEP = other.FEP;
          }
          if (other.SEP != 0) {
            SEP = other.SEP;
          }
          if (other.AEP != 0) {
            AEP = other.AEP;
          }
          if (other.LEP != 0) {
            LEP = other.LEP;
          }
          if (other.DEP != 0) {
            DEP = other.DEP;
          }
          if (other.WEE != 0) {
            WEE = other.WEE;
          }
          if (other.FEE != 0) {
            FEE = other.FEE;
          }
          if (other.SEE != 0) {
            SEE = other.SEE;
          }
          if (other.AEE != 0) {
            AEE = other.AEE;
          }
          if (other.LEE != 0) {
            LEE = other.LEE;
          }
          if (other.DEE != 0) {
            DEE = other.DEE;
          }
          if (other.WER != 0) {
            WER = other.WER;
          }
          if (other.FER != 0) {
            FER = other.FER;
          }
          if (other.SER != 0) {
            SER = other.SER;
          }
          if (other.AER != 0) {
            AER = other.AER;
          }
          if (other.LER != 0) {
            LER = other.LER;
          }
          if (other.DER != 0) {
            DER = other.DER;
          }
          if (other.WEI != 0) {
            WEI = other.WEI;
          }
          if (other.FEI != 0) {
            FEI = other.FEI;
          }
          if (other.SEI != 0) {
            SEI = other.SEI;
          }
          if (other.AEI != 0) {
            AEI = other.AEI;
          }
          if (other.LEI != 0) {
            LEI = other.LEI;
          }
          if (other.DEI != 0) {
            DEI = other.DEI;
          }
          if (other.ShieldBonus != 0) {
            ShieldBonus = other.ShieldBonus;
          }
          if (other.IncomingShieldBonus != 0) {
            IncomingShieldBonus = other.IncomingShieldBonus;
          }
          if (other.SkinId != 0) {
            SkinId = other.SkinId;
          }
          if (other.Suppress != 0) {
            Suppress = other.Suppress;
          }
          if (other.NormalDmgRatio != 0) {
            NormalDmgRatio = other.NormalDmgRatio;
          }
          if (other.SkillDmgRatio != 0) {
            SkillDmgRatio = other.SkillDmgRatio;
          }
          if (other.UltraDmgRatio != 0) {
            UltraDmgRatio = other.UltraDmgRatio;
          }
          if (other.OtherDmgRatio != 0) {
            OtherDmgRatio = other.OtherDmgRatio;
          }
          if (other.RcdNormalDmgRatio != 0) {
            RcdNormalDmgRatio = other.RcdNormalDmgRatio;
          }
          if (other.RcdSkillDmgRatio != 0) {
            RcdSkillDmgRatio = other.RcdSkillDmgRatio;
          }
          if (other.RcdUltraDmgRatio != 0) {
            RcdUltraDmgRatio = other.RcdUltraDmgRatio;
          }
          if (other.RcdOtherDmgRatio != 0) {
            RcdOtherDmgRatio = other.RcdOtherDmgRatio;
          }
          if (other.MarkDmgRatio != 0) {
            MarkDmgRatio = other.MarkDmgRatio;
          }
          if (other.SummonDmgRatio != 0) {
            SummonDmgRatio = other.SummonDmgRatio;
          }
          if (other.RcdSummonDmgRatio != 0) {
            RcdSummonDmgRatio = other.RcdSummonDmgRatio;
          }
          if (other.ProjectileDmgRatio != 0) {
            ProjectileDmgRatio = other.ProjectileDmgRatio;
          }
          if (other.RcdProjectileDmgRatio != 0) {
            RcdProjectileDmgRatio = other.RcdProjectileDmgRatio;
          }
          if (other.GENDMG != 0) {
            GENDMG = other.GENDMG;
          }
          if (other.DMGPLUS != 0) {
            DMGPLUS = other.DMGPLUS;
          }
          if (other.FINALDMG != 0) {
            FINALDMG = other.FINALDMG;
          }
          if (other.FINALDMGPLUS != 0) {
            FINALDMGPLUS = other.FINALDMGPLUS;
          }
          if (other.WEERCD != 0) {
            WEERCD = other.WEERCD;
          }
          if (other.FEERCD != 0) {
            FEERCD = other.FEERCD;
          }
          if (other.SEERCD != 0) {
            SEERCD = other.SEERCD;
          }
          if (other.AEERCD != 0) {
            AEERCD = other.AEERCD;
          }
          if (other.LEERCD != 0) {
            LEERCD = other.LEERCD;
          }
          if (other.DEERCD != 0) {
            DEERCD = other.DEERCD;
          }
          if (other.GENDMGRCD != 0) {
            GENDMGRCD = other.GENDMGRCD;
          }
          if (other.DMGPLUSRCD != 0) {
            DMGPLUSRCD = other.DMGPLUSRCD;
          }
          if (other.EnergyConvRatio != 0) {
            EnergyConvRatio = other.EnergyConvRatio;
          }
          if (other.EnergyEfficiency != 0) {
            EnergyEfficiency = other.EnergyEfficiency;
          }
          if (other.NormalCritRate != 0) {
            NormalCritRate = other.NormalCritRate;
          }
          if (other.SkillCritRate != 0) {
            SkillCritRate = other.SkillCritRate;
          }
          if (other.UltraCritRate != 0) {
            UltraCritRate = other.UltraCritRate;
          }
          if (other.MarkCritRate != 0) {
            MarkCritRate = other.MarkCritRate;
          }
          if (other.SummonCritRate != 0) {
            SummonCritRate = other.SummonCritRate;
          }
          if (other.ProjectileCritRate != 0) {
            ProjectileCritRate = other.ProjectileCritRate;
          }
          if (other.OtherCritRate != 0) {
            OtherCritRate = other.OtherCritRate;
          }
          if (other.NormalCritPower != 0) {
            NormalCritPower = other.NormalCritPower;
          }
          if (other.SkillCritPower != 0) {
            SkillCritPower = other.SkillCritPower;
          }
          if (other.UltraCritPower != 0) {
            UltraCritPower = other.UltraCritPower;
          }
          if (other.MarkCritPower != 0) {
            MarkCritPower = other.MarkCritPower;
          }
          if (other.SummonCritPower != 0) {
            SummonCritPower = other.SummonCritPower;
          }
          if (other.ProjectileCritPower != 0) {
            ProjectileCritPower = other.ProjectileCritPower;
          }
          if (other.OtherCritPower != 0) {
            OtherCritPower = other.OtherCritPower;
          }
          if (other.AttrId.Length != 0) {
            AttrId = other.AttrId;
          }
          skillLevelList_.Add(other.skillLevelList_);
          talentInfoList_.Add(other.talentInfoList_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadInt32();
                break;
              }
              case 24: {
                BreakCount = input.ReadInt32();
                break;
              }
              case 32: {
                Hp = input.ReadInt32();
                break;
              }
              case 40: {
                Atk = input.ReadInt32();
                break;
              }
              case 48: {
                Def = input.ReadInt32();
                break;
              }
              case 56: {
                MDef = input.ReadInt32();
                break;
              }
              case 64: {
                CritRate = input.ReadInt32();
                break;
              }
              case 72: {
                CritResistance = input.ReadInt32();
                break;
              }
              case 80: {
                CritPower = input.ReadInt32();
                break;
              }
              case 88: {
                HitRate = input.ReadInt32();
                break;
              }
              case 96: {
                Evd = input.ReadInt32();
                break;
              }
              case 104: {
                DefPierce = input.ReadInt32();
                break;
              }
              case 112: {
                DefIgnore = input.ReadInt32();
                break;
              }
              case 120: {
                WEP = input.ReadInt32();
                break;
              }
              case 128: {
                FEP = input.ReadInt32();
                break;
              }
              case 136: {
                SEP = input.ReadInt32();
                break;
              }
              case 144: {
                AEP = input.ReadInt32();
                break;
              }
              case 152: {
                LEP = input.ReadInt32();
                break;
              }
              case 160: {
                DEP = input.ReadInt32();
                break;
              }
              case 168: {
                WEE = input.ReadInt32();
                break;
              }
              case 176: {
                FEE = input.ReadInt32();
                break;
              }
              case 184: {
                SEE = input.ReadInt32();
                break;
              }
              case 192: {
                AEE = input.ReadInt32();
                break;
              }
              case 200: {
                LEE = input.ReadInt32();
                break;
              }
              case 208: {
                DEE = input.ReadInt32();
                break;
              }
              case 216: {
                WER = input.ReadInt32();
                break;
              }
              case 224: {
                FER = input.ReadInt32();
                break;
              }
              case 232: {
                SER = input.ReadInt32();
                break;
              }
              case 240: {
                AER = input.ReadInt32();
                break;
              }
              case 248: {
                LER = input.ReadInt32();
                break;
              }
              case 256: {
                DER = input.ReadInt32();
                break;
              }
              case 264: {
                WEI = input.ReadInt32();
                break;
              }
              case 272: {
                FEI = input.ReadInt32();
                break;
              }
              case 280: {
                SEI = input.ReadInt32();
                break;
              }
              case 288: {
                AEI = input.ReadInt32();
                break;
              }
              case 296: {
                LEI = input.ReadInt32();
                break;
              }
              case 304: {
                DEI = input.ReadInt32();
                break;
              }
              case 312: {
                ShieldBonus = input.ReadInt32();
                break;
              }
              case 320: {
                IncomingShieldBonus = input.ReadInt32();
                break;
              }
              case 328: {
                SkinId = input.ReadInt32();
                break;
              }
              case 336: {
                Suppress = input.ReadInt32();
                break;
              }
              case 344: {
                NormalDmgRatio = input.ReadInt32();
                break;
              }
              case 352: {
                SkillDmgRatio = input.ReadInt32();
                break;
              }
              case 360: {
                UltraDmgRatio = input.ReadInt32();
                break;
              }
              case 368: {
                OtherDmgRatio = input.ReadInt32();
                break;
              }
              case 376: {
                RcdNormalDmgRatio = input.ReadInt32();
                break;
              }
              case 384: {
                RcdSkillDmgRatio = input.ReadInt32();
                break;
              }
              case 392: {
                RcdUltraDmgRatio = input.ReadInt32();
                break;
              }
              case 400: {
                RcdOtherDmgRatio = input.ReadInt32();
                break;
              }
              case 408: {
                MarkDmgRatio = input.ReadInt32();
                break;
              }
              case 416: {
                SummonDmgRatio = input.ReadInt32();
                break;
              }
              case 424: {
                RcdSummonDmgRatio = input.ReadInt32();
                break;
              }
              case 432: {
                ProjectileDmgRatio = input.ReadInt32();
                break;
              }
              case 440: {
                RcdProjectileDmgRatio = input.ReadInt32();
                break;
              }
              case 448: {
                GENDMG = input.ReadInt32();
                break;
              }
              case 456: {
                DMGPLUS = input.ReadInt32();
                break;
              }
              case 464: {
                FINALDMG = input.ReadInt32();
                break;
              }
              case 472: {
                FINALDMGPLUS = input.ReadInt32();
                break;
              }
              case 480: {
                WEERCD = input.ReadInt32();
                break;
              }
              case 488: {
                FEERCD = input.ReadInt32();
                break;
              }
              case 496: {
                SEERCD = input.ReadInt32();
                break;
              }
              case 504: {
                AEERCD = input.ReadInt32();
                break;
              }
              case 512: {
                LEERCD = input.ReadInt32();
                break;
              }
              case 520: {
                DEERCD = input.ReadInt32();
                break;
              }
              case 528: {
                GENDMGRCD = input.ReadInt32();
                break;
              }
              case 536: {
                DMGPLUSRCD = input.ReadInt32();
                break;
              }
              case 544: {
                EnergyConvRatio = input.ReadInt32();
                break;
              }
              case 552: {
                EnergyEfficiency = input.ReadInt32();
                break;
              }
              case 560: {
                NormalCritRate = input.ReadInt32();
                break;
              }
              case 568: {
                SkillCritRate = input.ReadInt32();
                break;
              }
              case 576: {
                UltraCritRate = input.ReadInt32();
                break;
              }
              case 584: {
                MarkCritRate = input.ReadInt32();
                break;
              }
              case 592: {
                SummonCritRate = input.ReadInt32();
                break;
              }
              case 600: {
                ProjectileCritRate = input.ReadInt32();
                break;
              }
              case 608: {
                OtherCritRate = input.ReadInt32();
                break;
              }
              case 616: {
                NormalCritPower = input.ReadInt32();
                break;
              }
              case 624: {
                SkillCritPower = input.ReadInt32();
                break;
              }
              case 632: {
                UltraCritPower = input.ReadInt32();
                break;
              }
              case 640: {
                MarkCritPower = input.ReadInt32();
                break;
              }
              case 648: {
                SummonCritPower = input.ReadInt32();
                break;
              }
              case 656: {
                ProjectileCritPower = input.ReadInt32();
                break;
              }
              case 664: {
                OtherCritPower = input.ReadInt32();
                break;
              }
              case 674: {
                AttrId = input.ReadString();
                break;
              }
              case 682:
              case 680: {
                skillLevelList_.AddEntriesFrom(input, _repeated_skillLevelList_codec);
                break;
              }
              case 690:
              case 688: {
                talentInfoList_.AddEntriesFrom(input, _repeated_talentInfoList_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadInt32();
                break;
              }
              case 24: {
                BreakCount = input.ReadInt32();
                break;
              }
              case 32: {
                Hp = input.ReadInt32();
                break;
              }
              case 40: {
                Atk = input.ReadInt32();
                break;
              }
              case 48: {
                Def = input.ReadInt32();
                break;
              }
              case 56: {
                MDef = input.ReadInt32();
                break;
              }
              case 64: {
                CritRate = input.ReadInt32();
                break;
              }
              case 72: {
                CritResistance = input.ReadInt32();
                break;
              }
              case 80: {
                CritPower = input.ReadInt32();
                break;
              }
              case 88: {
                HitRate = input.ReadInt32();
                break;
              }
              case 96: {
                Evd = input.ReadInt32();
                break;
              }
              case 104: {
                DefPierce = input.ReadInt32();
                break;
              }
              case 112: {
                DefIgnore = input.ReadInt32();
                break;
              }
              case 120: {
                WEP = input.ReadInt32();
                break;
              }
              case 128: {
                FEP = input.ReadInt32();
                break;
              }
              case 136: {
                SEP = input.ReadInt32();
                break;
              }
              case 144: {
                AEP = input.ReadInt32();
                break;
              }
              case 152: {
                LEP = input.ReadInt32();
                break;
              }
              case 160: {
                DEP = input.ReadInt32();
                break;
              }
              case 168: {
                WEE = input.ReadInt32();
                break;
              }
              case 176: {
                FEE = input.ReadInt32();
                break;
              }
              case 184: {
                SEE = input.ReadInt32();
                break;
              }
              case 192: {
                AEE = input.ReadInt32();
                break;
              }
              case 200: {
                LEE = input.ReadInt32();
                break;
              }
              case 208: {
                DEE = input.ReadInt32();
                break;
              }
              case 216: {
                WER = input.ReadInt32();
                break;
              }
              case 224: {
                FER = input.ReadInt32();
                break;
              }
              case 232: {
                SER = input.ReadInt32();
                break;
              }
              case 240: {
                AER = input.ReadInt32();
                break;
              }
              case 248: {
                LER = input.ReadInt32();
                break;
              }
              case 256: {
                DER = input.ReadInt32();
                break;
              }
              case 264: {
                WEI = input.ReadInt32();
                break;
              }
              case 272: {
                FEI = input.ReadInt32();
                break;
              }
              case 280: {
                SEI = input.ReadInt32();
                break;
              }
              case 288: {
                AEI = input.ReadInt32();
                break;
              }
              case 296: {
                LEI = input.ReadInt32();
                break;
              }
              case 304: {
                DEI = input.ReadInt32();
                break;
              }
              case 312: {
                ShieldBonus = input.ReadInt32();
                break;
              }
              case 320: {
                IncomingShieldBonus = input.ReadInt32();
                break;
              }
              case 328: {
                SkinId = input.ReadInt32();
                break;
              }
              case 336: {
                Suppress = input.ReadInt32();
                break;
              }
              case 344: {
                NormalDmgRatio = input.ReadInt32();
                break;
              }
              case 352: {
                SkillDmgRatio = input.ReadInt32();
                break;
              }
              case 360: {
                UltraDmgRatio = input.ReadInt32();
                break;
              }
              case 368: {
                OtherDmgRatio = input.ReadInt32();
                break;
              }
              case 376: {
                RcdNormalDmgRatio = input.ReadInt32();
                break;
              }
              case 384: {
                RcdSkillDmgRatio = input.ReadInt32();
                break;
              }
              case 392: {
                RcdUltraDmgRatio = input.ReadInt32();
                break;
              }
              case 400: {
                RcdOtherDmgRatio = input.ReadInt32();
                break;
              }
              case 408: {
                MarkDmgRatio = input.ReadInt32();
                break;
              }
              case 416: {
                SummonDmgRatio = input.ReadInt32();
                break;
              }
              case 424: {
                RcdSummonDmgRatio = input.ReadInt32();
                break;
              }
              case 432: {
                ProjectileDmgRatio = input.ReadInt32();
                break;
              }
              case 440: {
                RcdProjectileDmgRatio = input.ReadInt32();
                break;
              }
              case 448: {
                GENDMG = input.ReadInt32();
                break;
              }
              case 456: {
                DMGPLUS = input.ReadInt32();
                break;
              }
              case 464: {
                FINALDMG = input.ReadInt32();
                break;
              }
              case 472: {
                FINALDMGPLUS = input.ReadInt32();
                break;
              }
              case 480: {
                WEERCD = input.ReadInt32();
                break;
              }
              case 488: {
                FEERCD = input.ReadInt32();
                break;
              }
              case 496: {
                SEERCD = input.ReadInt32();
                break;
              }
              case 504: {
                AEERCD = input.ReadInt32();
                break;
              }
              case 512: {
                LEERCD = input.ReadInt32();
                break;
              }
              case 520: {
                DEERCD = input.ReadInt32();
                break;
              }
              case 528: {
                GENDMGRCD = input.ReadInt32();
                break;
              }
              case 536: {
                DMGPLUSRCD = input.ReadInt32();
                break;
              }
              case 544: {
                EnergyConvRatio = input.ReadInt32();
                break;
              }
              case 552: {
                EnergyEfficiency = input.ReadInt32();
                break;
              }
              case 560: {
                NormalCritRate = input.ReadInt32();
                break;
              }
              case 568: {
                SkillCritRate = input.ReadInt32();
                break;
              }
              case 576: {
                UltraCritRate = input.ReadInt32();
                break;
              }
              case 584: {
                MarkCritRate = input.ReadInt32();
                break;
              }
              case 592: {
                SummonCritRate = input.ReadInt32();
                break;
              }
              case 600: {
                ProjectileCritRate = input.ReadInt32();
                break;
              }
              case 608: {
                OtherCritRate = input.ReadInt32();
                break;
              }
              case 616: {
                NormalCritPower = input.ReadInt32();
                break;
              }
              case 624: {
                SkillCritPower = input.ReadInt32();
                break;
              }
              case 632: {
                UltraCritPower = input.ReadInt32();
                break;
              }
              case 640: {
                MarkCritPower = input.ReadInt32();
                break;
              }
              case 648: {
                SummonCritPower = input.ReadInt32();
                break;
              }
              case 656: {
                ProjectileCritPower = input.ReadInt32();
                break;
              }
              case 664: {
                OtherCritPower = input.ReadInt32();
                break;
              }
              case 674: {
                AttrId = input.ReadString();
                break;
              }
              case 682:
              case 680: {
                skillLevelList_.AddEntriesFrom(ref input, _repeated_skillLevelList_codec);
                break;
              }
              case 690:
              case 688: {
                talentInfoList_.AddEntriesFrom(ref input, _repeated_talentInfoList_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class Disc : pb::IMessage<Disc>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<Disc> _parser = new pb::MessageParser<Disc>(() => new Disc());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<Disc> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nova.Client.Recorders.Descriptor.NestedTypes[1]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Disc() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Disc(Disc other) : this() {
          id_ = other.id_;
          level_ = other.level_;
          discSkillList_ = other.discSkillList_.Clone();
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public Disc Clone() {
          return new Disc(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        /// <summary>Field number for the "disc_skill_list" field.</summary>
        public const int DiscSkillListFieldNumber = 3;
        private static readonly pb::FieldCodec<global::Nova.Client.Recorders.Types.DiscSkill> _repeated_discSkillList_codec
            = pb::FieldCodec.ForMessage(26, global::Nova.Client.Recorders.Types.DiscSkill.Parser);
        private readonly pbc::RepeatedField<global::Nova.Client.Recorders.Types.DiscSkill> discSkillList_ = new pbc::RepeatedField<global::Nova.Client.Recorders.Types.DiscSkill>();
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public pbc::RepeatedField<global::Nova.Client.Recorders.Types.DiscSkill> DiscSkillList {
          get { return discSkillList_; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as Disc);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(Disc other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Level != other.Level) return false;
          if(!discSkillList_.Equals(other.discSkillList_)) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          hash ^= discSkillList_.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          discSkillList_.WriteTo(output, _repeated_discSkillList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          discSkillList_.WriteTo(ref output, _repeated_discSkillList_codec);
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          size += discSkillList_.CalculateSize(_repeated_discSkillList_codec);
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(Disc other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          discSkillList_.Add(other.discSkillList_);
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 26: {
                discSkillList_.AddEntriesFrom(input, _repeated_discSkillList_codec);
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
              case 26: {
                discSkillList_.AddEntriesFrom(ref input, _repeated_discSkillList_codec);
                break;
              }
            }
          }
        }
        #endif

      }

      [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
      public sealed partial class DiscSkill : pb::IMessage<DiscSkill>
      #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          , pb::IBufferMessage
      #endif
      {
        private static readonly pb::MessageParser<DiscSkill> _parser = new pb::MessageParser<DiscSkill>(() => new DiscSkill());
        private pb::UnknownFieldSet _unknownFields;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pb::MessageParser<DiscSkill> Parser { get { return _parser; } }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public static pbr::MessageDescriptor Descriptor {
          get { return global::Nova.Client.Recorders.Descriptor.NestedTypes[2]; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscSkill() {
          OnConstruction();
        }

        partial void OnConstruction();

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscSkill(DiscSkill other) : this() {
          id_ = other.id_;
          level_ = other.level_;
          _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public DiscSkill Clone() {
          return new DiscSkill(this);
        }

        /// <summary>Field number for the "id" field.</summary>
        public const int IdFieldNumber = 1;
        private uint id_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Id {
          get { return id_; }
          set {
            id_ = value;
          }
        }

        /// <summary>Field number for the "level" field.</summary>
        public const int LevelFieldNumber = 2;
        private uint level_;
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public uint Level {
          get { return level_; }
          set {
            level_ = value;
          }
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override bool Equals(object other) {
          return Equals(other as DiscSkill);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public bool Equals(DiscSkill other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Id != other.Id) return false;
          if (Level != other.Level) return false;
          return Equals(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override int GetHashCode() {
          int hash = 1;
          if (Id != 0) hash ^= Id.GetHashCode();
          if (Level != 0) hash ^= Level.GetHashCode();
          if (_unknownFields != null) {
            hash ^= _unknownFields.GetHashCode();
          }
          return hash;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public override string ToString() {
          return pb::JsonFormatter.ToDiagnosticString(this);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void WriteTo(pb::CodedOutputStream output) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          output.WriteRawMessage(this);
        #else
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(output);
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
          if (Id != 0) {
            output.WriteRawTag(8);
            output.WriteUInt32(Id);
          }
          if (Level != 0) {
            output.WriteRawTag(16);
            output.WriteUInt32(Level);
          }
          if (_unknownFields != null) {
            _unknownFields.WriteTo(ref output);
          }
        }
        #endif

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public int CalculateSize() {
          int size = 0;
          if (Id != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
          }
          if (Level != 0) {
            size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Level);
          }
          if (_unknownFields != null) {
            size += _unknownFields.CalculateSize();
          }
          return size;
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(DiscSkill other) {
          if (other == null) {
            return;
          }
          if (other.Id != 0) {
            Id = other.Id;
          }
          if (other.Level != 0) {
            Level = other.Level;
          }
          _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
        }

        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        public void MergeFrom(pb::CodedInputStream input) {
        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
          input.ReadRawMessage(this);
        #else
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        #endif
        }

        #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
        [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
        void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
          if ((tag & 7) == 4) {
            // Abort on any end group tag.
            return;
          }
          switch(tag) {
              default:
                _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
                break;
              case 8: {
                Id = input.ReadUInt32();
                break;
              }
              case 16: {
                Level = input.ReadUInt32();
                break;
              }
            }
          }
        }
        #endif

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
