// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Attribute.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Attribute.proto</summary>
  public static partial class AttributeReflection {

    #region Descriptor
    /// <summary>File descriptor for Attribute.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static AttributeReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg9BdHRyaWJ1dGUucHJvdG8irw0KCUF0dHJpYnV0ZRIKCgJpZBgBIAEoCRIQ",
            "Cghncm91cF9pZBgCIAEoBRINCgVicmVhaxgDIAEoBRILCgNsdmwYBCABKAUS",
            "CwoDYXRrGAUgASgFEgoKAmhwGAYgASgFEgsKA2RlZhgHIAEoBRIRCgljcml0",
            "X3JhdGUYCCABKAUSGAoQbm9ybWFsX2NyaXRfcmF0ZRgJIAEoBRIXCg9za2ls",
            "bF9jcml0X3JhdGUYCiABKAUSFwoPdWx0cmFfY3JpdF9yYXRlGAsgASgFEhYK",
            "Dm1hcmtfY3JpdF9yYXRlGAwgASgFEhgKEHN1bW1vbl9jcml0X3JhdGUYDSAB",
            "KAUSHAoUcHJvamVjdGlsZV9jcml0X3JhdGUYDiABKAUSFwoPb3RoZXJfY3Jp",
            "dF9yYXRlGA8gASgFEhcKD2NyaXRfcmVzaXN0YW5jZRgQIAEoBRISCgpjcml0",
            "X3Bvd2VyGBEgASgFEhkKEW5vcm1hbF9jcml0X3Bvd2VyGBIgASgFEhgKEHNr",
            "aWxsX2NyaXRfcG93ZXIYEyABKAUSGAoQdWx0cmFfY3JpdF9wb3dlchgUIAEo",
            "BRIXCg9tYXJrX2NyaXRfcG93ZXIYFSABKAUSGQoRc3VtbW9uX2NyaXRfcG93",
            "ZXIYFiABKAUSHQoVcHJvamVjdGlsZV9jcml0X3Bvd2VyGBcgASgFEhgKEG90",
            "aGVyX2NyaXRfcG93ZXIYGCABKAUSEAoIaGl0X3JhdGUYGSABKAUSCwoDZXZk",
            "GBogASgFEhIKCmRlZl9waWVyY2UYGyABKAUSEgoKZGVmX2lnbm9yZRgcIAEo",
            "BRINCgV3X2VfcBgdIAEoBRINCgVmX2VfcBgeIAEoBRINCgVzX2VfcBgfIAEo",
            "BRINCgVhX2VfcBggIAEoBRINCgVsX2VfcBghIAEoBRINCgVkX2VfcBgiIAEo",
            "BRINCgV3X2VfaRgjIAEoBRINCgVmX2VfaRgkIAEoBRINCgVzX2VfaRglIAEo",
            "BRINCgVhX2VfaRgmIAEoBRINCgVsX2VfaRgnIAEoBRINCgVkX2VfaRgoIAEo",
            "BRINCgV3X2VfZRgpIAEoBRINCgVmX2VfZRgqIAEoBRINCgVzX2VfZRgrIAEo",
            "BRINCgVhX2VfZRgsIAEoBRINCgVsX2VfZRgtIAEoBRINCgVkX2VfZRguIAEo",
            "BRINCgV3X2VfchgvIAEoBRINCgVmX2VfchgwIAEoBRINCgVzX2VfchgxIAEo",
            "BRINCgVhX2VfchgyIAEoBRINCgVsX2VfchgzIAEoBRINCgVkX2Vfchg0IAEo",
            "BRIfChd0b3VnaG5lc3NfZGFtYWdlX2FkanVzdBg1IAEoBRIRCgl0b3VnaG5l",
            "c3MYNiABKAUSEAoIc3VwcHJlc3MYNyABKAUSGQoRbl9vX3JfbV9hX2xfZF9t",
            "X2cYOCABKAUSFwoPc19rX2lfbF9sX2RfbV9nGDkgASgFEhcKD3VfbF90X3Jf",
            "YV9kX21fZxg6IAEoBRIXCg9vX3RfaF9lX3JfZF9tX2cYOyABKAUSHwoXcl9j",
            "X2Rfbl9vX3JfbV9hX2xfZF9tX2cYPCABKAUSEwoLUkNEU0tJTExETUcYPSAB",
            "KAUSEwoLUkNEVUxUUkFETUcYPiABKAUSEwoLUkNET1RIRVJETUcYPyABKAUS",
            "FQoNbV9hX3Jfa19kX21fZxhAIAEoBRIbChNyX2NfZF9tX2Ffcl9rX2RfbV9n",
            "GEEgASgFEhkKEXNfdV9tX21fb19uX2RfbV9nGEIgASgFEh8KF3JfY19kX3Nf",
            "dV9tX21fb19uX2RfbV9nGEMgASgFEiEKGXBfcl9vX2pfZV9jX3RfaV9sX2Vf",
            "ZF9tX2cYRCABKAUSJwofcl9jX2RfcF9yX29fal9lX2NfdF9pX2xfZV9kX21f",
            "ZxhFIAEoBRITCgtnX2Vfbl9kX21fZxhGIAEoBRIVCg1kX21fZ19wX2xfdV9z",
            "GEcgASgFEhcKD2ZfaV9uX2FfbF9kX21fZxhIIAEoBRIfChdmX2lfbl9hX2xf",
            "ZF9tX2dfcF9sX3VfcxhJIAEoBRITCgt3X2VfZV9yX2NfZBhKIAEoBRITCgtm",
            "X2VfZV9yX2NfZBhLIAEoBRITCgtzX2VfZV9yX2NfZBhMIAEoBRITCgthX2Vf",
            "ZV9yX2NfZBhNIAEoBRITCgtsX2VfZV9yX2NfZBhOIAEoBRITCgtkX2VfZV9y",
            "X2NfZBhPIAEoBRIZChFnX2Vfbl9kX21fZ19yX2NfZBhQIAEoBRIbChNkX21f",
            "Z19wX2xfdV9zX3JfY19kGFEgASgFQg6qAgtOb3ZhLkNsaWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Attribute), global::Nova.Client.Attribute.Parser, new[]{ "Id", "GroupId", "Break", "Lvl", "Atk", "Hp", "Def", "CritRate", "NormalCritRate", "SkillCritRate", "UltraCritRate", "MarkCritRate", "SummonCritRate", "ProjectileCritRate", "OtherCritRate", "CritResistance", "CritPower", "NormalCritPower", "SkillCritPower", "UltraCritPower", "MarkCritPower", "SummonCritPower", "ProjectileCritPower", "OtherCritPower", "HitRate", "Evd", "DefPierce", "DefIgnore", "WEP", "FEP", "SEP", "AEP", "LEP", "DEP", "WEI", "FEI", "SEI", "AEI", "LEI", "DEI", "WEE", "FEE", "SEE", "AEE", "LEE", "DEE", "WER", "FER", "SER", "AER", "LER", "DER", "ToughnessDamageAdjust", "Toughness", "Suppress", "NORMALDMG", "SKILLDMG", "ULTRADMG", "OTHERDMG", "RCDNORMALDMG", "RCDSKILLDMG", "RCDULTRADMG", "RCDOTHERDMG", "MARKDMG", "RCDMARKDMG", "SUMMONDMG", "RCDSUMMONDMG", "PROJECTILEDMG", "RCDPROJECTILEDMG", "GENDMG", "DMGPLUS", "FINALDMG", "FINALDMGPLUS", "WEERCD", "FEERCD", "SEERCD", "AEERCD", "LEERCD", "DEERCD", "GENDMGRCD", "DMGPLUSRCD" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Attribute : pb::IMessage<Attribute>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Attribute> _parser = new pb::MessageParser<Attribute>(() => new Attribute());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Attribute> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.AttributeReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Attribute() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Attribute(Attribute other) : this() {
      id_ = other.id_;
      groupId_ = other.groupId_;
      break_ = other.break_;
      lvl_ = other.lvl_;
      atk_ = other.atk_;
      hp_ = other.hp_;
      def_ = other.def_;
      critRate_ = other.critRate_;
      normalCritRate_ = other.normalCritRate_;
      skillCritRate_ = other.skillCritRate_;
      ultraCritRate_ = other.ultraCritRate_;
      markCritRate_ = other.markCritRate_;
      summonCritRate_ = other.summonCritRate_;
      projectileCritRate_ = other.projectileCritRate_;
      otherCritRate_ = other.otherCritRate_;
      critResistance_ = other.critResistance_;
      critPower_ = other.critPower_;
      normalCritPower_ = other.normalCritPower_;
      skillCritPower_ = other.skillCritPower_;
      ultraCritPower_ = other.ultraCritPower_;
      markCritPower_ = other.markCritPower_;
      summonCritPower_ = other.summonCritPower_;
      projectileCritPower_ = other.projectileCritPower_;
      otherCritPower_ = other.otherCritPower_;
      hitRate_ = other.hitRate_;
      evd_ = other.evd_;
      defPierce_ = other.defPierce_;
      defIgnore_ = other.defIgnore_;
      wEP_ = other.wEP_;
      fEP_ = other.fEP_;
      sEP_ = other.sEP_;
      aEP_ = other.aEP_;
      lEP_ = other.lEP_;
      dEP_ = other.dEP_;
      wEI_ = other.wEI_;
      fEI_ = other.fEI_;
      sEI_ = other.sEI_;
      aEI_ = other.aEI_;
      lEI_ = other.lEI_;
      dEI_ = other.dEI_;
      wEE_ = other.wEE_;
      fEE_ = other.fEE_;
      sEE_ = other.sEE_;
      aEE_ = other.aEE_;
      lEE_ = other.lEE_;
      dEE_ = other.dEE_;
      wER_ = other.wER_;
      fER_ = other.fER_;
      sER_ = other.sER_;
      aER_ = other.aER_;
      lER_ = other.lER_;
      dER_ = other.dER_;
      toughnessDamageAdjust_ = other.toughnessDamageAdjust_;
      toughness_ = other.toughness_;
      suppress_ = other.suppress_;
      nORMALDMG_ = other.nORMALDMG_;
      sKILLDMG_ = other.sKILLDMG_;
      uLTRADMG_ = other.uLTRADMG_;
      oTHERDMG_ = other.oTHERDMG_;
      rCDNORMALDMG_ = other.rCDNORMALDMG_;
      rCDSKILLDMG_ = other.rCDSKILLDMG_;
      rCDULTRADMG_ = other.rCDULTRADMG_;
      rCDOTHERDMG_ = other.rCDOTHERDMG_;
      mARKDMG_ = other.mARKDMG_;
      rCDMARKDMG_ = other.rCDMARKDMG_;
      sUMMONDMG_ = other.sUMMONDMG_;
      rCDSUMMONDMG_ = other.rCDSUMMONDMG_;
      pROJECTILEDMG_ = other.pROJECTILEDMG_;
      rCDPROJECTILEDMG_ = other.rCDPROJECTILEDMG_;
      gENDMG_ = other.gENDMG_;
      dMGPLUS_ = other.dMGPLUS_;
      fINALDMG_ = other.fINALDMG_;
      fINALDMGPLUS_ = other.fINALDMGPLUS_;
      wEERCD_ = other.wEERCD_;
      fEERCD_ = other.fEERCD_;
      sEERCD_ = other.sEERCD_;
      aEERCD_ = other.aEERCD_;
      lEERCD_ = other.lEERCD_;
      dEERCD_ = other.dEERCD_;
      gENDMGRCD_ = other.gENDMGRCD_;
      dMGPLUSRCD_ = other.dMGPLUSRCD_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Attribute Clone() {
      return new Attribute(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "group_id" field.</summary>
    public const int GroupIdFieldNumber = 2;
    private int groupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GroupId {
      get { return groupId_; }
      set {
        groupId_ = value;
      }
    }

    /// <summary>Field number for the "break" field.</summary>
    public const int BreakFieldNumber = 3;
    private int break_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Break {
      get { return break_; }
      set {
        break_ = value;
      }
    }

    /// <summary>Field number for the "lvl" field.</summary>
    public const int LvlFieldNumber = 4;
    private int lvl_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Lvl {
      get { return lvl_; }
      set {
        lvl_ = value;
      }
    }

    /// <summary>Field number for the "atk" field.</summary>
    public const int AtkFieldNumber = 5;
    private int atk_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Atk {
      get { return atk_; }
      set {
        atk_ = value;
      }
    }

    /// <summary>Field number for the "hp" field.</summary>
    public const int HpFieldNumber = 6;
    private int hp_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Hp {
      get { return hp_; }
      set {
        hp_ = value;
      }
    }

    /// <summary>Field number for the "def" field.</summary>
    public const int DefFieldNumber = 7;
    private int def_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Def {
      get { return def_; }
      set {
        def_ = value;
      }
    }

    /// <summary>Field number for the "crit_rate" field.</summary>
    public const int CritRateFieldNumber = 8;
    private int critRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CritRate {
      get { return critRate_; }
      set {
        critRate_ = value;
      }
    }

    /// <summary>Field number for the "normal_crit_rate" field.</summary>
    public const int NormalCritRateFieldNumber = 9;
    private int normalCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalCritRate {
      get { return normalCritRate_; }
      set {
        normalCritRate_ = value;
      }
    }

    /// <summary>Field number for the "skill_crit_rate" field.</summary>
    public const int SkillCritRateFieldNumber = 10;
    private int skillCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillCritRate {
      get { return skillCritRate_; }
      set {
        skillCritRate_ = value;
      }
    }

    /// <summary>Field number for the "ultra_crit_rate" field.</summary>
    public const int UltraCritRateFieldNumber = 11;
    private int ultraCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UltraCritRate {
      get { return ultraCritRate_; }
      set {
        ultraCritRate_ = value;
      }
    }

    /// <summary>Field number for the "mark_crit_rate" field.</summary>
    public const int MarkCritRateFieldNumber = 12;
    private int markCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarkCritRate {
      get { return markCritRate_; }
      set {
        markCritRate_ = value;
      }
    }

    /// <summary>Field number for the "summon_crit_rate" field.</summary>
    public const int SummonCritRateFieldNumber = 13;
    private int summonCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SummonCritRate {
      get { return summonCritRate_; }
      set {
        summonCritRate_ = value;
      }
    }

    /// <summary>Field number for the "projectile_crit_rate" field.</summary>
    public const int ProjectileCritRateFieldNumber = 14;
    private int projectileCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProjectileCritRate {
      get { return projectileCritRate_; }
      set {
        projectileCritRate_ = value;
      }
    }

    /// <summary>Field number for the "other_crit_rate" field.</summary>
    public const int OtherCritRateFieldNumber = 15;
    private int otherCritRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtherCritRate {
      get { return otherCritRate_; }
      set {
        otherCritRate_ = value;
      }
    }

    /// <summary>Field number for the "crit_resistance" field.</summary>
    public const int CritResistanceFieldNumber = 16;
    private int critResistance_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CritResistance {
      get { return critResistance_; }
      set {
        critResistance_ = value;
      }
    }

    /// <summary>Field number for the "crit_power" field.</summary>
    public const int CritPowerFieldNumber = 17;
    private int critPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CritPower {
      get { return critPower_; }
      set {
        critPower_ = value;
      }
    }

    /// <summary>Field number for the "normal_crit_power" field.</summary>
    public const int NormalCritPowerFieldNumber = 18;
    private int normalCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NormalCritPower {
      get { return normalCritPower_; }
      set {
        normalCritPower_ = value;
      }
    }

    /// <summary>Field number for the "skill_crit_power" field.</summary>
    public const int SkillCritPowerFieldNumber = 19;
    private int skillCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SkillCritPower {
      get { return skillCritPower_; }
      set {
        skillCritPower_ = value;
      }
    }

    /// <summary>Field number for the "ultra_crit_power" field.</summary>
    public const int UltraCritPowerFieldNumber = 20;
    private int ultraCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int UltraCritPower {
      get { return ultraCritPower_; }
      set {
        ultraCritPower_ = value;
      }
    }

    /// <summary>Field number for the "mark_crit_power" field.</summary>
    public const int MarkCritPowerFieldNumber = 21;
    private int markCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MarkCritPower {
      get { return markCritPower_; }
      set {
        markCritPower_ = value;
      }
    }

    /// <summary>Field number for the "summon_crit_power" field.</summary>
    public const int SummonCritPowerFieldNumber = 22;
    private int summonCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SummonCritPower {
      get { return summonCritPower_; }
      set {
        summonCritPower_ = value;
      }
    }

    /// <summary>Field number for the "projectile_crit_power" field.</summary>
    public const int ProjectileCritPowerFieldNumber = 23;
    private int projectileCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ProjectileCritPower {
      get { return projectileCritPower_; }
      set {
        projectileCritPower_ = value;
      }
    }

    /// <summary>Field number for the "other_crit_power" field.</summary>
    public const int OtherCritPowerFieldNumber = 24;
    private int otherCritPower_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OtherCritPower {
      get { return otherCritPower_; }
      set {
        otherCritPower_ = value;
      }
    }

    /// <summary>Field number for the "hit_rate" field.</summary>
    public const int HitRateFieldNumber = 25;
    private int hitRate_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int HitRate {
      get { return hitRate_; }
      set {
        hitRate_ = value;
      }
    }

    /// <summary>Field number for the "evd" field.</summary>
    public const int EvdFieldNumber = 26;
    private int evd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Evd {
      get { return evd_; }
      set {
        evd_ = value;
      }
    }

    /// <summary>Field number for the "def_pierce" field.</summary>
    public const int DefPierceFieldNumber = 27;
    private int defPierce_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefPierce {
      get { return defPierce_; }
      set {
        defPierce_ = value;
      }
    }

    /// <summary>Field number for the "def_ignore" field.</summary>
    public const int DefIgnoreFieldNumber = 28;
    private int defIgnore_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DefIgnore {
      get { return defIgnore_; }
      set {
        defIgnore_ = value;
      }
    }

    /// <summary>Field number for the "w_e_p" field.</summary>
    public const int WEPFieldNumber = 29;
    private int wEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEP {
      get { return wEP_; }
      set {
        wEP_ = value;
      }
    }

    /// <summary>Field number for the "f_e_p" field.</summary>
    public const int FEPFieldNumber = 30;
    private int fEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEP {
      get { return fEP_; }
      set {
        fEP_ = value;
      }
    }

    /// <summary>Field number for the "s_e_p" field.</summary>
    public const int SEPFieldNumber = 31;
    private int sEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEP {
      get { return sEP_; }
      set {
        sEP_ = value;
      }
    }

    /// <summary>Field number for the "a_e_p" field.</summary>
    public const int AEPFieldNumber = 32;
    private int aEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEP {
      get { return aEP_; }
      set {
        aEP_ = value;
      }
    }

    /// <summary>Field number for the "l_e_p" field.</summary>
    public const int LEPFieldNumber = 33;
    private int lEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEP {
      get { return lEP_; }
      set {
        lEP_ = value;
      }
    }

    /// <summary>Field number for the "d_e_p" field.</summary>
    public const int DEPFieldNumber = 34;
    private int dEP_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEP {
      get { return dEP_; }
      set {
        dEP_ = value;
      }
    }

    /// <summary>Field number for the "w_e_i" field.</summary>
    public const int WEIFieldNumber = 35;
    private int wEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEI {
      get { return wEI_; }
      set {
        wEI_ = value;
      }
    }

    /// <summary>Field number for the "f_e_i" field.</summary>
    public const int FEIFieldNumber = 36;
    private int fEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEI {
      get { return fEI_; }
      set {
        fEI_ = value;
      }
    }

    /// <summary>Field number for the "s_e_i" field.</summary>
    public const int SEIFieldNumber = 37;
    private int sEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEI {
      get { return sEI_; }
      set {
        sEI_ = value;
      }
    }

    /// <summary>Field number for the "a_e_i" field.</summary>
    public const int AEIFieldNumber = 38;
    private int aEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEI {
      get { return aEI_; }
      set {
        aEI_ = value;
      }
    }

    /// <summary>Field number for the "l_e_i" field.</summary>
    public const int LEIFieldNumber = 39;
    private int lEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEI {
      get { return lEI_; }
      set {
        lEI_ = value;
      }
    }

    /// <summary>Field number for the "d_e_i" field.</summary>
    public const int DEIFieldNumber = 40;
    private int dEI_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEI {
      get { return dEI_; }
      set {
        dEI_ = value;
      }
    }

    /// <summary>Field number for the "w_e_e" field.</summary>
    public const int WEEFieldNumber = 41;
    private int wEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEE {
      get { return wEE_; }
      set {
        wEE_ = value;
      }
    }

    /// <summary>Field number for the "f_e_e" field.</summary>
    public const int FEEFieldNumber = 42;
    private int fEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEE {
      get { return fEE_; }
      set {
        fEE_ = value;
      }
    }

    /// <summary>Field number for the "s_e_e" field.</summary>
    public const int SEEFieldNumber = 43;
    private int sEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEE {
      get { return sEE_; }
      set {
        sEE_ = value;
      }
    }

    /// <summary>Field number for the "a_e_e" field.</summary>
    public const int AEEFieldNumber = 44;
    private int aEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEE {
      get { return aEE_; }
      set {
        aEE_ = value;
      }
    }

    /// <summary>Field number for the "l_e_e" field.</summary>
    public const int LEEFieldNumber = 45;
    private int lEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEE {
      get { return lEE_; }
      set {
        lEE_ = value;
      }
    }

    /// <summary>Field number for the "d_e_e" field.</summary>
    public const int DEEFieldNumber = 46;
    private int dEE_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEE {
      get { return dEE_; }
      set {
        dEE_ = value;
      }
    }

    /// <summary>Field number for the "w_e_r" field.</summary>
    public const int WERFieldNumber = 47;
    private int wER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WER {
      get { return wER_; }
      set {
        wER_ = value;
      }
    }

    /// <summary>Field number for the "f_e_r" field.</summary>
    public const int FERFieldNumber = 48;
    private int fER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FER {
      get { return fER_; }
      set {
        fER_ = value;
      }
    }

    /// <summary>Field number for the "s_e_r" field.</summary>
    public const int SERFieldNumber = 49;
    private int sER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SER {
      get { return sER_; }
      set {
        sER_ = value;
      }
    }

    /// <summary>Field number for the "a_e_r" field.</summary>
    public const int AERFieldNumber = 50;
    private int aER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AER {
      get { return aER_; }
      set {
        aER_ = value;
      }
    }

    /// <summary>Field number for the "l_e_r" field.</summary>
    public const int LERFieldNumber = 51;
    private int lER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LER {
      get { return lER_; }
      set {
        lER_ = value;
      }
    }

    /// <summary>Field number for the "d_e_r" field.</summary>
    public const int DERFieldNumber = 52;
    private int dER_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DER {
      get { return dER_; }
      set {
        dER_ = value;
      }
    }

    /// <summary>Field number for the "toughness_damage_adjust" field.</summary>
    public const int ToughnessDamageAdjustFieldNumber = 53;
    private int toughnessDamageAdjust_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ToughnessDamageAdjust {
      get { return toughnessDamageAdjust_; }
      set {
        toughnessDamageAdjust_ = value;
      }
    }

    /// <summary>Field number for the "toughness" field.</summary>
    public const int ToughnessFieldNumber = 54;
    private int toughness_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Toughness {
      get { return toughness_; }
      set {
        toughness_ = value;
      }
    }

    /// <summary>Field number for the "suppress" field.</summary>
    public const int SuppressFieldNumber = 55;
    private int suppress_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Suppress {
      get { return suppress_; }
      set {
        suppress_ = value;
      }
    }

    /// <summary>Field number for the "n_o_r_m_a_l_d_m_g" field.</summary>
    public const int NORMALDMGFieldNumber = 56;
    private int nORMALDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NORMALDMG {
      get { return nORMALDMG_; }
      set {
        nORMALDMG_ = value;
      }
    }

    /// <summary>Field number for the "s_k_i_l_l_d_m_g" field.</summary>
    public const int SKILLDMGFieldNumber = 57;
    private int sKILLDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SKILLDMG {
      get { return sKILLDMG_; }
      set {
        sKILLDMG_ = value;
      }
    }

    /// <summary>Field number for the "u_l_t_r_a_d_m_g" field.</summary>
    public const int ULTRADMGFieldNumber = 58;
    private int uLTRADMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ULTRADMG {
      get { return uLTRADMG_; }
      set {
        uLTRADMG_ = value;
      }
    }

    /// <summary>Field number for the "o_t_h_e_r_d_m_g" field.</summary>
    public const int OTHERDMGFieldNumber = 59;
    private int oTHERDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OTHERDMG {
      get { return oTHERDMG_; }
      set {
        oTHERDMG_ = value;
      }
    }

    /// <summary>Field number for the "r_c_d_n_o_r_m_a_l_d_m_g" field.</summary>
    public const int RCDNORMALDMGFieldNumber = 60;
    private int rCDNORMALDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDNORMALDMG {
      get { return rCDNORMALDMG_; }
      set {
        rCDNORMALDMG_ = value;
      }
    }

    /// <summary>Field number for the "RCDSKILLDMG" field.</summary>
    public const int RCDSKILLDMGFieldNumber = 61;
    private int rCDSKILLDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDSKILLDMG {
      get { return rCDSKILLDMG_; }
      set {
        rCDSKILLDMG_ = value;
      }
    }

    /// <summary>Field number for the "RCDULTRADMG" field.</summary>
    public const int RCDULTRADMGFieldNumber = 62;
    private int rCDULTRADMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDULTRADMG {
      get { return rCDULTRADMG_; }
      set {
        rCDULTRADMG_ = value;
      }
    }

    /// <summary>Field number for the "RCDOTHERDMG" field.</summary>
    public const int RCDOTHERDMGFieldNumber = 63;
    private int rCDOTHERDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDOTHERDMG {
      get { return rCDOTHERDMG_; }
      set {
        rCDOTHERDMG_ = value;
      }
    }

    /// <summary>Field number for the "m_a_r_k_d_m_g" field.</summary>
    public const int MARKDMGFieldNumber = 64;
    private int mARKDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MARKDMG {
      get { return mARKDMG_; }
      set {
        mARKDMG_ = value;
      }
    }

    /// <summary>Field number for the "r_c_d_m_a_r_k_d_m_g" field.</summary>
    public const int RCDMARKDMGFieldNumber = 65;
    private int rCDMARKDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDMARKDMG {
      get { return rCDMARKDMG_; }
      set {
        rCDMARKDMG_ = value;
      }
    }

    /// <summary>Field number for the "s_u_m_m_o_n_d_m_g" field.</summary>
    public const int SUMMONDMGFieldNumber = 66;
    private int sUMMONDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SUMMONDMG {
      get { return sUMMONDMG_; }
      set {
        sUMMONDMG_ = value;
      }
    }

    /// <summary>Field number for the "r_c_d_s_u_m_m_o_n_d_m_g" field.</summary>
    public const int RCDSUMMONDMGFieldNumber = 67;
    private int rCDSUMMONDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDSUMMONDMG {
      get { return rCDSUMMONDMG_; }
      set {
        rCDSUMMONDMG_ = value;
      }
    }

    /// <summary>Field number for the "p_r_o_j_e_c_t_i_l_e_d_m_g" field.</summary>
    public const int PROJECTILEDMGFieldNumber = 68;
    private int pROJECTILEDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PROJECTILEDMG {
      get { return pROJECTILEDMG_; }
      set {
        pROJECTILEDMG_ = value;
      }
    }

    /// <summary>Field number for the "r_c_d_p_r_o_j_e_c_t_i_l_e_d_m_g" field.</summary>
    public const int RCDPROJECTILEDMGFieldNumber = 69;
    private int rCDPROJECTILEDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RCDPROJECTILEDMG {
      get { return rCDPROJECTILEDMG_; }
      set {
        rCDPROJECTILEDMG_ = value;
      }
    }

    /// <summary>Field number for the "g_e_n_d_m_g" field.</summary>
    public const int GENDMGFieldNumber = 70;
    private int gENDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GENDMG {
      get { return gENDMG_; }
      set {
        gENDMG_ = value;
      }
    }

    /// <summary>Field number for the "d_m_g_p_l_u_s" field.</summary>
    public const int DMGPLUSFieldNumber = 71;
    private int dMGPLUS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DMGPLUS {
      get { return dMGPLUS_; }
      set {
        dMGPLUS_ = value;
      }
    }

    /// <summary>Field number for the "f_i_n_a_l_d_m_g" field.</summary>
    public const int FINALDMGFieldNumber = 72;
    private int fINALDMG_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FINALDMG {
      get { return fINALDMG_; }
      set {
        fINALDMG_ = value;
      }
    }

    /// <summary>Field number for the "f_i_n_a_l_d_m_g_p_l_u_s" field.</summary>
    public const int FINALDMGPLUSFieldNumber = 73;
    private int fINALDMGPLUS_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FINALDMGPLUS {
      get { return fINALDMGPLUS_; }
      set {
        fINALDMGPLUS_ = value;
      }
    }

    /// <summary>Field number for the "w_e_e_r_c_d" field.</summary>
    public const int WEERCDFieldNumber = 74;
    private int wEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int WEERCD {
      get { return wEERCD_; }
      set {
        wEERCD_ = value;
      }
    }

    /// <summary>Field number for the "f_e_e_r_c_d" field.</summary>
    public const int FEERCDFieldNumber = 75;
    private int fEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FEERCD {
      get { return fEERCD_; }
      set {
        fEERCD_ = value;
      }
    }

    /// <summary>Field number for the "s_e_e_r_c_d" field.</summary>
    public const int SEERCDFieldNumber = 76;
    private int sEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SEERCD {
      get { return sEERCD_; }
      set {
        sEERCD_ = value;
      }
    }

    /// <summary>Field number for the "a_e_e_r_c_d" field.</summary>
    public const int AEERCDFieldNumber = 77;
    private int aEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int AEERCD {
      get { return aEERCD_; }
      set {
        aEERCD_ = value;
      }
    }

    /// <summary>Field number for the "l_e_e_r_c_d" field.</summary>
    public const int LEERCDFieldNumber = 78;
    private int lEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int LEERCD {
      get { return lEERCD_; }
      set {
        lEERCD_ = value;
      }
    }

    /// <summary>Field number for the "d_e_e_r_c_d" field.</summary>
    public const int DEERCDFieldNumber = 79;
    private int dEERCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DEERCD {
      get { return dEERCD_; }
      set {
        dEERCD_ = value;
      }
    }

    /// <summary>Field number for the "g_e_n_d_m_g_r_c_d" field.</summary>
    public const int GENDMGRCDFieldNumber = 80;
    private int gENDMGRCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GENDMGRCD {
      get { return gENDMGRCD_; }
      set {
        gENDMGRCD_ = value;
      }
    }

    /// <summary>Field number for the "d_m_g_p_l_u_s_r_c_d" field.</summary>
    public const int DMGPLUSRCDFieldNumber = 81;
    private int dMGPLUSRCD_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int DMGPLUSRCD {
      get { return dMGPLUSRCD_; }
      set {
        dMGPLUSRCD_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Attribute);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Attribute other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (GroupId != other.GroupId) return false;
      if (Break != other.Break) return false;
      if (Lvl != other.Lvl) return false;
      if (Atk != other.Atk) return false;
      if (Hp != other.Hp) return false;
      if (Def != other.Def) return false;
      if (CritRate != other.CritRate) return false;
      if (NormalCritRate != other.NormalCritRate) return false;
      if (SkillCritRate != other.SkillCritRate) return false;
      if (UltraCritRate != other.UltraCritRate) return false;
      if (MarkCritRate != other.MarkCritRate) return false;
      if (SummonCritRate != other.SummonCritRate) return false;
      if (ProjectileCritRate != other.ProjectileCritRate) return false;
      if (OtherCritRate != other.OtherCritRate) return false;
      if (CritResistance != other.CritResistance) return false;
      if (CritPower != other.CritPower) return false;
      if (NormalCritPower != other.NormalCritPower) return false;
      if (SkillCritPower != other.SkillCritPower) return false;
      if (UltraCritPower != other.UltraCritPower) return false;
      if (MarkCritPower != other.MarkCritPower) return false;
      if (SummonCritPower != other.SummonCritPower) return false;
      if (ProjectileCritPower != other.ProjectileCritPower) return false;
      if (OtherCritPower != other.OtherCritPower) return false;
      if (HitRate != other.HitRate) return false;
      if (Evd != other.Evd) return false;
      if (DefPierce != other.DefPierce) return false;
      if (DefIgnore != other.DefIgnore) return false;
      if (WEP != other.WEP) return false;
      if (FEP != other.FEP) return false;
      if (SEP != other.SEP) return false;
      if (AEP != other.AEP) return false;
      if (LEP != other.LEP) return false;
      if (DEP != other.DEP) return false;
      if (WEI != other.WEI) return false;
      if (FEI != other.FEI) return false;
      if (SEI != other.SEI) return false;
      if (AEI != other.AEI) return false;
      if (LEI != other.LEI) return false;
      if (DEI != other.DEI) return false;
      if (WEE != other.WEE) return false;
      if (FEE != other.FEE) return false;
      if (SEE != other.SEE) return false;
      if (AEE != other.AEE) return false;
      if (LEE != other.LEE) return false;
      if (DEE != other.DEE) return false;
      if (WER != other.WER) return false;
      if (FER != other.FER) return false;
      if (SER != other.SER) return false;
      if (AER != other.AER) return false;
      if (LER != other.LER) return false;
      if (DER != other.DER) return false;
      if (ToughnessDamageAdjust != other.ToughnessDamageAdjust) return false;
      if (Toughness != other.Toughness) return false;
      if (Suppress != other.Suppress) return false;
      if (NORMALDMG != other.NORMALDMG) return false;
      if (SKILLDMG != other.SKILLDMG) return false;
      if (ULTRADMG != other.ULTRADMG) return false;
      if (OTHERDMG != other.OTHERDMG) return false;
      if (RCDNORMALDMG != other.RCDNORMALDMG) return false;
      if (RCDSKILLDMG != other.RCDSKILLDMG) return false;
      if (RCDULTRADMG != other.RCDULTRADMG) return false;
      if (RCDOTHERDMG != other.RCDOTHERDMG) return false;
      if (MARKDMG != other.MARKDMG) return false;
      if (RCDMARKDMG != other.RCDMARKDMG) return false;
      if (SUMMONDMG != other.SUMMONDMG) return false;
      if (RCDSUMMONDMG != other.RCDSUMMONDMG) return false;
      if (PROJECTILEDMG != other.PROJECTILEDMG) return false;
      if (RCDPROJECTILEDMG != other.RCDPROJECTILEDMG) return false;
      if (GENDMG != other.GENDMG) return false;
      if (DMGPLUS != other.DMGPLUS) return false;
      if (FINALDMG != other.FINALDMG) return false;
      if (FINALDMGPLUS != other.FINALDMGPLUS) return false;
      if (WEERCD != other.WEERCD) return false;
      if (FEERCD != other.FEERCD) return false;
      if (SEERCD != other.SEERCD) return false;
      if (AEERCD != other.AEERCD) return false;
      if (LEERCD != other.LEERCD) return false;
      if (DEERCD != other.DEERCD) return false;
      if (GENDMGRCD != other.GENDMGRCD) return false;
      if (DMGPLUSRCD != other.DMGPLUSRCD) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (GroupId != 0) hash ^= GroupId.GetHashCode();
      if (Break != 0) hash ^= Break.GetHashCode();
      if (Lvl != 0) hash ^= Lvl.GetHashCode();
      if (Atk != 0) hash ^= Atk.GetHashCode();
      if (Hp != 0) hash ^= Hp.GetHashCode();
      if (Def != 0) hash ^= Def.GetHashCode();
      if (CritRate != 0) hash ^= CritRate.GetHashCode();
      if (NormalCritRate != 0) hash ^= NormalCritRate.GetHashCode();
      if (SkillCritRate != 0) hash ^= SkillCritRate.GetHashCode();
      if (UltraCritRate != 0) hash ^= UltraCritRate.GetHashCode();
      if (MarkCritRate != 0) hash ^= MarkCritRate.GetHashCode();
      if (SummonCritRate != 0) hash ^= SummonCritRate.GetHashCode();
      if (ProjectileCritRate != 0) hash ^= ProjectileCritRate.GetHashCode();
      if (OtherCritRate != 0) hash ^= OtherCritRate.GetHashCode();
      if (CritResistance != 0) hash ^= CritResistance.GetHashCode();
      if (CritPower != 0) hash ^= CritPower.GetHashCode();
      if (NormalCritPower != 0) hash ^= NormalCritPower.GetHashCode();
      if (SkillCritPower != 0) hash ^= SkillCritPower.GetHashCode();
      if (UltraCritPower != 0) hash ^= UltraCritPower.GetHashCode();
      if (MarkCritPower != 0) hash ^= MarkCritPower.GetHashCode();
      if (SummonCritPower != 0) hash ^= SummonCritPower.GetHashCode();
      if (ProjectileCritPower != 0) hash ^= ProjectileCritPower.GetHashCode();
      if (OtherCritPower != 0) hash ^= OtherCritPower.GetHashCode();
      if (HitRate != 0) hash ^= HitRate.GetHashCode();
      if (Evd != 0) hash ^= Evd.GetHashCode();
      if (DefPierce != 0) hash ^= DefPierce.GetHashCode();
      if (DefIgnore != 0) hash ^= DefIgnore.GetHashCode();
      if (WEP != 0) hash ^= WEP.GetHashCode();
      if (FEP != 0) hash ^= FEP.GetHashCode();
      if (SEP != 0) hash ^= SEP.GetHashCode();
      if (AEP != 0) hash ^= AEP.GetHashCode();
      if (LEP != 0) hash ^= LEP.GetHashCode();
      if (DEP != 0) hash ^= DEP.GetHashCode();
      if (WEI != 0) hash ^= WEI.GetHashCode();
      if (FEI != 0) hash ^= FEI.GetHashCode();
      if (SEI != 0) hash ^= SEI.GetHashCode();
      if (AEI != 0) hash ^= AEI.GetHashCode();
      if (LEI != 0) hash ^= LEI.GetHashCode();
      if (DEI != 0) hash ^= DEI.GetHashCode();
      if (WEE != 0) hash ^= WEE.GetHashCode();
      if (FEE != 0) hash ^= FEE.GetHashCode();
      if (SEE != 0) hash ^= SEE.GetHashCode();
      if (AEE != 0) hash ^= AEE.GetHashCode();
      if (LEE != 0) hash ^= LEE.GetHashCode();
      if (DEE != 0) hash ^= DEE.GetHashCode();
      if (WER != 0) hash ^= WER.GetHashCode();
      if (FER != 0) hash ^= FER.GetHashCode();
      if (SER != 0) hash ^= SER.GetHashCode();
      if (AER != 0) hash ^= AER.GetHashCode();
      if (LER != 0) hash ^= LER.GetHashCode();
      if (DER != 0) hash ^= DER.GetHashCode();
      if (ToughnessDamageAdjust != 0) hash ^= ToughnessDamageAdjust.GetHashCode();
      if (Toughness != 0) hash ^= Toughness.GetHashCode();
      if (Suppress != 0) hash ^= Suppress.GetHashCode();
      if (NORMALDMG != 0) hash ^= NORMALDMG.GetHashCode();
      if (SKILLDMG != 0) hash ^= SKILLDMG.GetHashCode();
      if (ULTRADMG != 0) hash ^= ULTRADMG.GetHashCode();
      if (OTHERDMG != 0) hash ^= OTHERDMG.GetHashCode();
      if (RCDNORMALDMG != 0) hash ^= RCDNORMALDMG.GetHashCode();
      if (RCDSKILLDMG != 0) hash ^= RCDSKILLDMG.GetHashCode();
      if (RCDULTRADMG != 0) hash ^= RCDULTRADMG.GetHashCode();
      if (RCDOTHERDMG != 0) hash ^= RCDOTHERDMG.GetHashCode();
      if (MARKDMG != 0) hash ^= MARKDMG.GetHashCode();
      if (RCDMARKDMG != 0) hash ^= RCDMARKDMG.GetHashCode();
      if (SUMMONDMG != 0) hash ^= SUMMONDMG.GetHashCode();
      if (RCDSUMMONDMG != 0) hash ^= RCDSUMMONDMG.GetHashCode();
      if (PROJECTILEDMG != 0) hash ^= PROJECTILEDMG.GetHashCode();
      if (RCDPROJECTILEDMG != 0) hash ^= RCDPROJECTILEDMG.GetHashCode();
      if (GENDMG != 0) hash ^= GENDMG.GetHashCode();
      if (DMGPLUS != 0) hash ^= DMGPLUS.GetHashCode();
      if (FINALDMG != 0) hash ^= FINALDMG.GetHashCode();
      if (FINALDMGPLUS != 0) hash ^= FINALDMGPLUS.GetHashCode();
      if (WEERCD != 0) hash ^= WEERCD.GetHashCode();
      if (FEERCD != 0) hash ^= FEERCD.GetHashCode();
      if (SEERCD != 0) hash ^= SEERCD.GetHashCode();
      if (AEERCD != 0) hash ^= AEERCD.GetHashCode();
      if (LEERCD != 0) hash ^= LEERCD.GetHashCode();
      if (DEERCD != 0) hash ^= DEERCD.GetHashCode();
      if (GENDMGRCD != 0) hash ^= GENDMGRCD.GetHashCode();
      if (DMGPLUSRCD != 0) hash ^= DMGPLUSRCD.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (Break != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Break);
      }
      if (Lvl != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lvl);
      }
      if (Atk != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Atk);
      }
      if (Hp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hp);
      }
      if (Def != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Def);
      }
      if (CritRate != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CritRate);
      }
      if (NormalCritRate != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NormalCritRate);
      }
      if (SkillCritRate != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkillCritRate);
      }
      if (UltraCritRate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UltraCritRate);
      }
      if (MarkCritRate != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MarkCritRate);
      }
      if (SummonCritRate != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SummonCritRate);
      }
      if (ProjectileCritRate != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ProjectileCritRate);
      }
      if (OtherCritRate != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(OtherCritRate);
      }
      if (CritResistance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CritResistance);
      }
      if (CritPower != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CritPower);
      }
      if (NormalCritPower != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NormalCritPower);
      }
      if (SkillCritPower != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SkillCritPower);
      }
      if (UltraCritPower != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(UltraCritPower);
      }
      if (MarkCritPower != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MarkCritPower);
      }
      if (SummonCritPower != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SummonCritPower);
      }
      if (ProjectileCritPower != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ProjectileCritPower);
      }
      if (OtherCritPower != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(OtherCritPower);
      }
      if (HitRate != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(HitRate);
      }
      if (Evd != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Evd);
      }
      if (DefPierce != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DefPierce);
      }
      if (DefIgnore != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DefIgnore);
      }
      if (WEP != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(WEP);
      }
      if (FEP != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(FEP);
      }
      if (SEP != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SEP);
      }
      if (AEP != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(AEP);
      }
      if (LEP != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(LEP);
      }
      if (DEP != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DEP);
      }
      if (WEI != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(WEI);
      }
      if (FEI != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(FEI);
      }
      if (SEI != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SEI);
      }
      if (AEI != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(AEI);
      }
      if (LEI != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(LEI);
      }
      if (DEI != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(DEI);
      }
      if (WEE != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(WEE);
      }
      if (FEE != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(FEE);
      }
      if (SEE != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SEE);
      }
      if (AEE != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(AEE);
      }
      if (LEE != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(LEE);
      }
      if (DEE != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DEE);
      }
      if (WER != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(WER);
      }
      if (FER != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(FER);
      }
      if (SER != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(SER);
      }
      if (AER != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(AER);
      }
      if (LER != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(LER);
      }
      if (DER != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(DER);
      }
      if (ToughnessDamageAdjust != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ToughnessDamageAdjust);
      }
      if (Toughness != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Toughness);
      }
      if (Suppress != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(Suppress);
      }
      if (NORMALDMG != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(NORMALDMG);
      }
      if (SKILLDMG != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SKILLDMG);
      }
      if (ULTRADMG != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ULTRADMG);
      }
      if (OTHERDMG != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(OTHERDMG);
      }
      if (RCDNORMALDMG != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(RCDNORMALDMG);
      }
      if (RCDSKILLDMG != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(RCDSKILLDMG);
      }
      if (RCDULTRADMG != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(RCDULTRADMG);
      }
      if (RCDOTHERDMG != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(RCDOTHERDMG);
      }
      if (MARKDMG != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(MARKDMG);
      }
      if (RCDMARKDMG != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(RCDMARKDMG);
      }
      if (SUMMONDMG != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(SUMMONDMG);
      }
      if (RCDSUMMONDMG != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(RCDSUMMONDMG);
      }
      if (PROJECTILEDMG != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(PROJECTILEDMG);
      }
      if (RCDPROJECTILEDMG != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(RCDPROJECTILEDMG);
      }
      if (GENDMG != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(GENDMG);
      }
      if (DMGPLUS != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(DMGPLUS);
      }
      if (FINALDMG != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(FINALDMG);
      }
      if (FINALDMGPLUS != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(FINALDMGPLUS);
      }
      if (WEERCD != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(WEERCD);
      }
      if (FEERCD != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(FEERCD);
      }
      if (SEERCD != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SEERCD);
      }
      if (AEERCD != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(AEERCD);
      }
      if (LEERCD != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(LEERCD);
      }
      if (DEERCD != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(DEERCD);
      }
      if (GENDMGRCD != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(GENDMGRCD);
      }
      if (DMGPLUSRCD != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(DMGPLUSRCD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (GroupId != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(GroupId);
      }
      if (Break != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Break);
      }
      if (Lvl != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Lvl);
      }
      if (Atk != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Atk);
      }
      if (Hp != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Hp);
      }
      if (Def != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Def);
      }
      if (CritRate != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CritRate);
      }
      if (NormalCritRate != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(NormalCritRate);
      }
      if (SkillCritRate != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(SkillCritRate);
      }
      if (UltraCritRate != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(UltraCritRate);
      }
      if (MarkCritRate != 0) {
        output.WriteRawTag(96);
        output.WriteInt32(MarkCritRate);
      }
      if (SummonCritRate != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(SummonCritRate);
      }
      if (ProjectileCritRate != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(ProjectileCritRate);
      }
      if (OtherCritRate != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(OtherCritRate);
      }
      if (CritResistance != 0) {
        output.WriteRawTag(128, 1);
        output.WriteInt32(CritResistance);
      }
      if (CritPower != 0) {
        output.WriteRawTag(136, 1);
        output.WriteInt32(CritPower);
      }
      if (NormalCritPower != 0) {
        output.WriteRawTag(144, 1);
        output.WriteInt32(NormalCritPower);
      }
      if (SkillCritPower != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(SkillCritPower);
      }
      if (UltraCritPower != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(UltraCritPower);
      }
      if (MarkCritPower != 0) {
        output.WriteRawTag(168, 1);
        output.WriteInt32(MarkCritPower);
      }
      if (SummonCritPower != 0) {
        output.WriteRawTag(176, 1);
        output.WriteInt32(SummonCritPower);
      }
      if (ProjectileCritPower != 0) {
        output.WriteRawTag(184, 1);
        output.WriteInt32(ProjectileCritPower);
      }
      if (OtherCritPower != 0) {
        output.WriteRawTag(192, 1);
        output.WriteInt32(OtherCritPower);
      }
      if (HitRate != 0) {
        output.WriteRawTag(200, 1);
        output.WriteInt32(HitRate);
      }
      if (Evd != 0) {
        output.WriteRawTag(208, 1);
        output.WriteInt32(Evd);
      }
      if (DefPierce != 0) {
        output.WriteRawTag(216, 1);
        output.WriteInt32(DefPierce);
      }
      if (DefIgnore != 0) {
        output.WriteRawTag(224, 1);
        output.WriteInt32(DefIgnore);
      }
      if (WEP != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(WEP);
      }
      if (FEP != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(FEP);
      }
      if (SEP != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(SEP);
      }
      if (AEP != 0) {
        output.WriteRawTag(128, 2);
        output.WriteInt32(AEP);
      }
      if (LEP != 0) {
        output.WriteRawTag(136, 2);
        output.WriteInt32(LEP);
      }
      if (DEP != 0) {
        output.WriteRawTag(144, 2);
        output.WriteInt32(DEP);
      }
      if (WEI != 0) {
        output.WriteRawTag(152, 2);
        output.WriteInt32(WEI);
      }
      if (FEI != 0) {
        output.WriteRawTag(160, 2);
        output.WriteInt32(FEI);
      }
      if (SEI != 0) {
        output.WriteRawTag(168, 2);
        output.WriteInt32(SEI);
      }
      if (AEI != 0) {
        output.WriteRawTag(176, 2);
        output.WriteInt32(AEI);
      }
      if (LEI != 0) {
        output.WriteRawTag(184, 2);
        output.WriteInt32(LEI);
      }
      if (DEI != 0) {
        output.WriteRawTag(192, 2);
        output.WriteInt32(DEI);
      }
      if (WEE != 0) {
        output.WriteRawTag(200, 2);
        output.WriteInt32(WEE);
      }
      if (FEE != 0) {
        output.WriteRawTag(208, 2);
        output.WriteInt32(FEE);
      }
      if (SEE != 0) {
        output.WriteRawTag(216, 2);
        output.WriteInt32(SEE);
      }
      if (AEE != 0) {
        output.WriteRawTag(224, 2);
        output.WriteInt32(AEE);
      }
      if (LEE != 0) {
        output.WriteRawTag(232, 2);
        output.WriteInt32(LEE);
      }
      if (DEE != 0) {
        output.WriteRawTag(240, 2);
        output.WriteInt32(DEE);
      }
      if (WER != 0) {
        output.WriteRawTag(248, 2);
        output.WriteInt32(WER);
      }
      if (FER != 0) {
        output.WriteRawTag(128, 3);
        output.WriteInt32(FER);
      }
      if (SER != 0) {
        output.WriteRawTag(136, 3);
        output.WriteInt32(SER);
      }
      if (AER != 0) {
        output.WriteRawTag(144, 3);
        output.WriteInt32(AER);
      }
      if (LER != 0) {
        output.WriteRawTag(152, 3);
        output.WriteInt32(LER);
      }
      if (DER != 0) {
        output.WriteRawTag(160, 3);
        output.WriteInt32(DER);
      }
      if (ToughnessDamageAdjust != 0) {
        output.WriteRawTag(168, 3);
        output.WriteInt32(ToughnessDamageAdjust);
      }
      if (Toughness != 0) {
        output.WriteRawTag(176, 3);
        output.WriteInt32(Toughness);
      }
      if (Suppress != 0) {
        output.WriteRawTag(184, 3);
        output.WriteInt32(Suppress);
      }
      if (NORMALDMG != 0) {
        output.WriteRawTag(192, 3);
        output.WriteInt32(NORMALDMG);
      }
      if (SKILLDMG != 0) {
        output.WriteRawTag(200, 3);
        output.WriteInt32(SKILLDMG);
      }
      if (ULTRADMG != 0) {
        output.WriteRawTag(208, 3);
        output.WriteInt32(ULTRADMG);
      }
      if (OTHERDMG != 0) {
        output.WriteRawTag(216, 3);
        output.WriteInt32(OTHERDMG);
      }
      if (RCDNORMALDMG != 0) {
        output.WriteRawTag(224, 3);
        output.WriteInt32(RCDNORMALDMG);
      }
      if (RCDSKILLDMG != 0) {
        output.WriteRawTag(232, 3);
        output.WriteInt32(RCDSKILLDMG);
      }
      if (RCDULTRADMG != 0) {
        output.WriteRawTag(240, 3);
        output.WriteInt32(RCDULTRADMG);
      }
      if (RCDOTHERDMG != 0) {
        output.WriteRawTag(248, 3);
        output.WriteInt32(RCDOTHERDMG);
      }
      if (MARKDMG != 0) {
        output.WriteRawTag(128, 4);
        output.WriteInt32(MARKDMG);
      }
      if (RCDMARKDMG != 0) {
        output.WriteRawTag(136, 4);
        output.WriteInt32(RCDMARKDMG);
      }
      if (SUMMONDMG != 0) {
        output.WriteRawTag(144, 4);
        output.WriteInt32(SUMMONDMG);
      }
      if (RCDSUMMONDMG != 0) {
        output.WriteRawTag(152, 4);
        output.WriteInt32(RCDSUMMONDMG);
      }
      if (PROJECTILEDMG != 0) {
        output.WriteRawTag(160, 4);
        output.WriteInt32(PROJECTILEDMG);
      }
      if (RCDPROJECTILEDMG != 0) {
        output.WriteRawTag(168, 4);
        output.WriteInt32(RCDPROJECTILEDMG);
      }
      if (GENDMG != 0) {
        output.WriteRawTag(176, 4);
        output.WriteInt32(GENDMG);
      }
      if (DMGPLUS != 0) {
        output.WriteRawTag(184, 4);
        output.WriteInt32(DMGPLUS);
      }
      if (FINALDMG != 0) {
        output.WriteRawTag(192, 4);
        output.WriteInt32(FINALDMG);
      }
      if (FINALDMGPLUS != 0) {
        output.WriteRawTag(200, 4);
        output.WriteInt32(FINALDMGPLUS);
      }
      if (WEERCD != 0) {
        output.WriteRawTag(208, 4);
        output.WriteInt32(WEERCD);
      }
      if (FEERCD != 0) {
        output.WriteRawTag(216, 4);
        output.WriteInt32(FEERCD);
      }
      if (SEERCD != 0) {
        output.WriteRawTag(224, 4);
        output.WriteInt32(SEERCD);
      }
      if (AEERCD != 0) {
        output.WriteRawTag(232, 4);
        output.WriteInt32(AEERCD);
      }
      if (LEERCD != 0) {
        output.WriteRawTag(240, 4);
        output.WriteInt32(LEERCD);
      }
      if (DEERCD != 0) {
        output.WriteRawTag(248, 4);
        output.WriteInt32(DEERCD);
      }
      if (GENDMGRCD != 0) {
        output.WriteRawTag(128, 5);
        output.WriteInt32(GENDMGRCD);
      }
      if (DMGPLUSRCD != 0) {
        output.WriteRawTag(136, 5);
        output.WriteInt32(DMGPLUSRCD);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (GroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GroupId);
      }
      if (Break != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Break);
      }
      if (Lvl != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Lvl);
      }
      if (Atk != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Atk);
      }
      if (Hp != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hp);
      }
      if (Def != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Def);
      }
      if (CritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CritRate);
      }
      if (NormalCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NormalCritRate);
      }
      if (SkillCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SkillCritRate);
      }
      if (UltraCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UltraCritRate);
      }
      if (MarkCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MarkCritRate);
      }
      if (SummonCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SummonCritRate);
      }
      if (ProjectileCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ProjectileCritRate);
      }
      if (OtherCritRate != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OtherCritRate);
      }
      if (CritResistance != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CritResistance);
      }
      if (CritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(CritPower);
      }
      if (NormalCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NormalCritPower);
      }
      if (SkillCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SkillCritPower);
      }
      if (UltraCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(UltraCritPower);
      }
      if (MarkCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MarkCritPower);
      }
      if (SummonCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SummonCritPower);
      }
      if (ProjectileCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ProjectileCritPower);
      }
      if (OtherCritPower != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OtherCritPower);
      }
      if (HitRate != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(HitRate);
      }
      if (Evd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Evd);
      }
      if (DefPierce != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefPierce);
      }
      if (DefIgnore != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DefIgnore);
      }
      if (WEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEP);
      }
      if (FEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEP);
      }
      if (SEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEP);
      }
      if (AEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEP);
      }
      if (LEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEP);
      }
      if (DEP != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEP);
      }
      if (WEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEI);
      }
      if (FEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEI);
      }
      if (SEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEI);
      }
      if (AEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEI);
      }
      if (LEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEI);
      }
      if (DEI != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEI);
      }
      if (WEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEE);
      }
      if (FEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEE);
      }
      if (SEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEE);
      }
      if (AEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEE);
      }
      if (LEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEE);
      }
      if (DEE != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEE);
      }
      if (WER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WER);
      }
      if (FER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FER);
      }
      if (SER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SER);
      }
      if (AER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AER);
      }
      if (LER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LER);
      }
      if (DER != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DER);
      }
      if (ToughnessDamageAdjust != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ToughnessDamageAdjust);
      }
      if (Toughness != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Toughness);
      }
      if (Suppress != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Suppress);
      }
      if (NORMALDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NORMALDMG);
      }
      if (SKILLDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SKILLDMG);
      }
      if (ULTRADMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ULTRADMG);
      }
      if (OTHERDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(OTHERDMG);
      }
      if (RCDNORMALDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDNORMALDMG);
      }
      if (RCDSKILLDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDSKILLDMG);
      }
      if (RCDULTRADMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDULTRADMG);
      }
      if (RCDOTHERDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDOTHERDMG);
      }
      if (MARKDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MARKDMG);
      }
      if (RCDMARKDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDMARKDMG);
      }
      if (SUMMONDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SUMMONDMG);
      }
      if (RCDSUMMONDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDSUMMONDMG);
      }
      if (PROJECTILEDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(PROJECTILEDMG);
      }
      if (RCDPROJECTILEDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RCDPROJECTILEDMG);
      }
      if (GENDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GENDMG);
      }
      if (DMGPLUS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMGPLUS);
      }
      if (FINALDMG != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FINALDMG);
      }
      if (FINALDMGPLUS != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FINALDMGPLUS);
      }
      if (WEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(WEERCD);
      }
      if (FEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(FEERCD);
      }
      if (SEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(SEERCD);
      }
      if (AEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(AEERCD);
      }
      if (LEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(LEERCD);
      }
      if (DEERCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DEERCD);
      }
      if (GENDMGRCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(GENDMGRCD);
      }
      if (DMGPLUSRCD != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(DMGPLUSRCD);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Attribute other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.GroupId != 0) {
        GroupId = other.GroupId;
      }
      if (other.Break != 0) {
        Break = other.Break;
      }
      if (other.Lvl != 0) {
        Lvl = other.Lvl;
      }
      if (other.Atk != 0) {
        Atk = other.Atk;
      }
      if (other.Hp != 0) {
        Hp = other.Hp;
      }
      if (other.Def != 0) {
        Def = other.Def;
      }
      if (other.CritRate != 0) {
        CritRate = other.CritRate;
      }
      if (other.NormalCritRate != 0) {
        NormalCritRate = other.NormalCritRate;
      }
      if (other.SkillCritRate != 0) {
        SkillCritRate = other.SkillCritRate;
      }
      if (other.UltraCritRate != 0) {
        UltraCritRate = other.UltraCritRate;
      }
      if (other.MarkCritRate != 0) {
        MarkCritRate = other.MarkCritRate;
      }
      if (other.SummonCritRate != 0) {
        SummonCritRate = other.SummonCritRate;
      }
      if (other.ProjectileCritRate != 0) {
        ProjectileCritRate = other.ProjectileCritRate;
      }
      if (other.OtherCritRate != 0) {
        OtherCritRate = other.OtherCritRate;
      }
      if (other.CritResistance != 0) {
        CritResistance = other.CritResistance;
      }
      if (other.CritPower != 0) {
        CritPower = other.CritPower;
      }
      if (other.NormalCritPower != 0) {
        NormalCritPower = other.NormalCritPower;
      }
      if (other.SkillCritPower != 0) {
        SkillCritPower = other.SkillCritPower;
      }
      if (other.UltraCritPower != 0) {
        UltraCritPower = other.UltraCritPower;
      }
      if (other.MarkCritPower != 0) {
        MarkCritPower = other.MarkCritPower;
      }
      if (other.SummonCritPower != 0) {
        SummonCritPower = other.SummonCritPower;
      }
      if (other.ProjectileCritPower != 0) {
        ProjectileCritPower = other.ProjectileCritPower;
      }
      if (other.OtherCritPower != 0) {
        OtherCritPower = other.OtherCritPower;
      }
      if (other.HitRate != 0) {
        HitRate = other.HitRate;
      }
      if (other.Evd != 0) {
        Evd = other.Evd;
      }
      if (other.DefPierce != 0) {
        DefPierce = other.DefPierce;
      }
      if (other.DefIgnore != 0) {
        DefIgnore = other.DefIgnore;
      }
      if (other.WEP != 0) {
        WEP = other.WEP;
      }
      if (other.FEP != 0) {
        FEP = other.FEP;
      }
      if (other.SEP != 0) {
        SEP = other.SEP;
      }
      if (other.AEP != 0) {
        AEP = other.AEP;
      }
      if (other.LEP != 0) {
        LEP = other.LEP;
      }
      if (other.DEP != 0) {
        DEP = other.DEP;
      }
      if (other.WEI != 0) {
        WEI = other.WEI;
      }
      if (other.FEI != 0) {
        FEI = other.FEI;
      }
      if (other.SEI != 0) {
        SEI = other.SEI;
      }
      if (other.AEI != 0) {
        AEI = other.AEI;
      }
      if (other.LEI != 0) {
        LEI = other.LEI;
      }
      if (other.DEI != 0) {
        DEI = other.DEI;
      }
      if (other.WEE != 0) {
        WEE = other.WEE;
      }
      if (other.FEE != 0) {
        FEE = other.FEE;
      }
      if (other.SEE != 0) {
        SEE = other.SEE;
      }
      if (other.AEE != 0) {
        AEE = other.AEE;
      }
      if (other.LEE != 0) {
        LEE = other.LEE;
      }
      if (other.DEE != 0) {
        DEE = other.DEE;
      }
      if (other.WER != 0) {
        WER = other.WER;
      }
      if (other.FER != 0) {
        FER = other.FER;
      }
      if (other.SER != 0) {
        SER = other.SER;
      }
      if (other.AER != 0) {
        AER = other.AER;
      }
      if (other.LER != 0) {
        LER = other.LER;
      }
      if (other.DER != 0) {
        DER = other.DER;
      }
      if (other.ToughnessDamageAdjust != 0) {
        ToughnessDamageAdjust = other.ToughnessDamageAdjust;
      }
      if (other.Toughness != 0) {
        Toughness = other.Toughness;
      }
      if (other.Suppress != 0) {
        Suppress = other.Suppress;
      }
      if (other.NORMALDMG != 0) {
        NORMALDMG = other.NORMALDMG;
      }
      if (other.SKILLDMG != 0) {
        SKILLDMG = other.SKILLDMG;
      }
      if (other.ULTRADMG != 0) {
        ULTRADMG = other.ULTRADMG;
      }
      if (other.OTHERDMG != 0) {
        OTHERDMG = other.OTHERDMG;
      }
      if (other.RCDNORMALDMG != 0) {
        RCDNORMALDMG = other.RCDNORMALDMG;
      }
      if (other.RCDSKILLDMG != 0) {
        RCDSKILLDMG = other.RCDSKILLDMG;
      }
      if (other.RCDULTRADMG != 0) {
        RCDULTRADMG = other.RCDULTRADMG;
      }
      if (other.RCDOTHERDMG != 0) {
        RCDOTHERDMG = other.RCDOTHERDMG;
      }
      if (other.MARKDMG != 0) {
        MARKDMG = other.MARKDMG;
      }
      if (other.RCDMARKDMG != 0) {
        RCDMARKDMG = other.RCDMARKDMG;
      }
      if (other.SUMMONDMG != 0) {
        SUMMONDMG = other.SUMMONDMG;
      }
      if (other.RCDSUMMONDMG != 0) {
        RCDSUMMONDMG = other.RCDSUMMONDMG;
      }
      if (other.PROJECTILEDMG != 0) {
        PROJECTILEDMG = other.PROJECTILEDMG;
      }
      if (other.RCDPROJECTILEDMG != 0) {
        RCDPROJECTILEDMG = other.RCDPROJECTILEDMG;
      }
      if (other.GENDMG != 0) {
        GENDMG = other.GENDMG;
      }
      if (other.DMGPLUS != 0) {
        DMGPLUS = other.DMGPLUS;
      }
      if (other.FINALDMG != 0) {
        FINALDMG = other.FINALDMG;
      }
      if (other.FINALDMGPLUS != 0) {
        FINALDMGPLUS = other.FINALDMGPLUS;
      }
      if (other.WEERCD != 0) {
        WEERCD = other.WEERCD;
      }
      if (other.FEERCD != 0) {
        FEERCD = other.FEERCD;
      }
      if (other.SEERCD != 0) {
        SEERCD = other.SEERCD;
      }
      if (other.AEERCD != 0) {
        AEERCD = other.AEERCD;
      }
      if (other.LEERCD != 0) {
        LEERCD = other.LEERCD;
      }
      if (other.DEERCD != 0) {
        DEERCD = other.DEERCD;
      }
      if (other.GENDMGRCD != 0) {
        GENDMGRCD = other.GENDMGRCD;
      }
      if (other.DMGPLUSRCD != 0) {
        DMGPLUSRCD = other.DMGPLUSRCD;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            Break = input.ReadInt32();
            break;
          }
          case 32: {
            Lvl = input.ReadInt32();
            break;
          }
          case 40: {
            Atk = input.ReadInt32();
            break;
          }
          case 48: {
            Hp = input.ReadInt32();
            break;
          }
          case 56: {
            Def = input.ReadInt32();
            break;
          }
          case 64: {
            CritRate = input.ReadInt32();
            break;
          }
          case 72: {
            NormalCritRate = input.ReadInt32();
            break;
          }
          case 80: {
            SkillCritRate = input.ReadInt32();
            break;
          }
          case 88: {
            UltraCritRate = input.ReadInt32();
            break;
          }
          case 96: {
            MarkCritRate = input.ReadInt32();
            break;
          }
          case 104: {
            SummonCritRate = input.ReadInt32();
            break;
          }
          case 112: {
            ProjectileCritRate = input.ReadInt32();
            break;
          }
          case 120: {
            OtherCritRate = input.ReadInt32();
            break;
          }
          case 128: {
            CritResistance = input.ReadInt32();
            break;
          }
          case 136: {
            CritPower = input.ReadInt32();
            break;
          }
          case 144: {
            NormalCritPower = input.ReadInt32();
            break;
          }
          case 152: {
            SkillCritPower = input.ReadInt32();
            break;
          }
          case 160: {
            UltraCritPower = input.ReadInt32();
            break;
          }
          case 168: {
            MarkCritPower = input.ReadInt32();
            break;
          }
          case 176: {
            SummonCritPower = input.ReadInt32();
            break;
          }
          case 184: {
            ProjectileCritPower = input.ReadInt32();
            break;
          }
          case 192: {
            OtherCritPower = input.ReadInt32();
            break;
          }
          case 200: {
            HitRate = input.ReadInt32();
            break;
          }
          case 208: {
            Evd = input.ReadInt32();
            break;
          }
          case 216: {
            DefPierce = input.ReadInt32();
            break;
          }
          case 224: {
            DefIgnore = input.ReadInt32();
            break;
          }
          case 232: {
            WEP = input.ReadInt32();
            break;
          }
          case 240: {
            FEP = input.ReadInt32();
            break;
          }
          case 248: {
            SEP = input.ReadInt32();
            break;
          }
          case 256: {
            AEP = input.ReadInt32();
            break;
          }
          case 264: {
            LEP = input.ReadInt32();
            break;
          }
          case 272: {
            DEP = input.ReadInt32();
            break;
          }
          case 280: {
            WEI = input.ReadInt32();
            break;
          }
          case 288: {
            FEI = input.ReadInt32();
            break;
          }
          case 296: {
            SEI = input.ReadInt32();
            break;
          }
          case 304: {
            AEI = input.ReadInt32();
            break;
          }
          case 312: {
            LEI = input.ReadInt32();
            break;
          }
          case 320: {
            DEI = input.ReadInt32();
            break;
          }
          case 328: {
            WEE = input.ReadInt32();
            break;
          }
          case 336: {
            FEE = input.ReadInt32();
            break;
          }
          case 344: {
            SEE = input.ReadInt32();
            break;
          }
          case 352: {
            AEE = input.ReadInt32();
            break;
          }
          case 360: {
            LEE = input.ReadInt32();
            break;
          }
          case 368: {
            DEE = input.ReadInt32();
            break;
          }
          case 376: {
            WER = input.ReadInt32();
            break;
          }
          case 384: {
            FER = input.ReadInt32();
            break;
          }
          case 392: {
            SER = input.ReadInt32();
            break;
          }
          case 400: {
            AER = input.ReadInt32();
            break;
          }
          case 408: {
            LER = input.ReadInt32();
            break;
          }
          case 416: {
            DER = input.ReadInt32();
            break;
          }
          case 424: {
            ToughnessDamageAdjust = input.ReadInt32();
            break;
          }
          case 432: {
            Toughness = input.ReadInt32();
            break;
          }
          case 440: {
            Suppress = input.ReadInt32();
            break;
          }
          case 448: {
            NORMALDMG = input.ReadInt32();
            break;
          }
          case 456: {
            SKILLDMG = input.ReadInt32();
            break;
          }
          case 464: {
            ULTRADMG = input.ReadInt32();
            break;
          }
          case 472: {
            OTHERDMG = input.ReadInt32();
            break;
          }
          case 480: {
            RCDNORMALDMG = input.ReadInt32();
            break;
          }
          case 488: {
            RCDSKILLDMG = input.ReadInt32();
            break;
          }
          case 496: {
            RCDULTRADMG = input.ReadInt32();
            break;
          }
          case 504: {
            RCDOTHERDMG = input.ReadInt32();
            break;
          }
          case 512: {
            MARKDMG = input.ReadInt32();
            break;
          }
          case 520: {
            RCDMARKDMG = input.ReadInt32();
            break;
          }
          case 528: {
            SUMMONDMG = input.ReadInt32();
            break;
          }
          case 536: {
            RCDSUMMONDMG = input.ReadInt32();
            break;
          }
          case 544: {
            PROJECTILEDMG = input.ReadInt32();
            break;
          }
          case 552: {
            RCDPROJECTILEDMG = input.ReadInt32();
            break;
          }
          case 560: {
            GENDMG = input.ReadInt32();
            break;
          }
          case 568: {
            DMGPLUS = input.ReadInt32();
            break;
          }
          case 576: {
            FINALDMG = input.ReadInt32();
            break;
          }
          case 584: {
            FINALDMGPLUS = input.ReadInt32();
            break;
          }
          case 592: {
            WEERCD = input.ReadInt32();
            break;
          }
          case 600: {
            FEERCD = input.ReadInt32();
            break;
          }
          case 608: {
            SEERCD = input.ReadInt32();
            break;
          }
          case 616: {
            AEERCD = input.ReadInt32();
            break;
          }
          case 624: {
            LEERCD = input.ReadInt32();
            break;
          }
          case 632: {
            DEERCD = input.ReadInt32();
            break;
          }
          case 640: {
            GENDMGRCD = input.ReadInt32();
            break;
          }
          case 648: {
            DMGPLUSRCD = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            GroupId = input.ReadInt32();
            break;
          }
          case 24: {
            Break = input.ReadInt32();
            break;
          }
          case 32: {
            Lvl = input.ReadInt32();
            break;
          }
          case 40: {
            Atk = input.ReadInt32();
            break;
          }
          case 48: {
            Hp = input.ReadInt32();
            break;
          }
          case 56: {
            Def = input.ReadInt32();
            break;
          }
          case 64: {
            CritRate = input.ReadInt32();
            break;
          }
          case 72: {
            NormalCritRate = input.ReadInt32();
            break;
          }
          case 80: {
            SkillCritRate = input.ReadInt32();
            break;
          }
          case 88: {
            UltraCritRate = input.ReadInt32();
            break;
          }
          case 96: {
            MarkCritRate = input.ReadInt32();
            break;
          }
          case 104: {
            SummonCritRate = input.ReadInt32();
            break;
          }
          case 112: {
            ProjectileCritRate = input.ReadInt32();
            break;
          }
          case 120: {
            OtherCritRate = input.ReadInt32();
            break;
          }
          case 128: {
            CritResistance = input.ReadInt32();
            break;
          }
          case 136: {
            CritPower = input.ReadInt32();
            break;
          }
          case 144: {
            NormalCritPower = input.ReadInt32();
            break;
          }
          case 152: {
            SkillCritPower = input.ReadInt32();
            break;
          }
          case 160: {
            UltraCritPower = input.ReadInt32();
            break;
          }
          case 168: {
            MarkCritPower = input.ReadInt32();
            break;
          }
          case 176: {
            SummonCritPower = input.ReadInt32();
            break;
          }
          case 184: {
            ProjectileCritPower = input.ReadInt32();
            break;
          }
          case 192: {
            OtherCritPower = input.ReadInt32();
            break;
          }
          case 200: {
            HitRate = input.ReadInt32();
            break;
          }
          case 208: {
            Evd = input.ReadInt32();
            break;
          }
          case 216: {
            DefPierce = input.ReadInt32();
            break;
          }
          case 224: {
            DefIgnore = input.ReadInt32();
            break;
          }
          case 232: {
            WEP = input.ReadInt32();
            break;
          }
          case 240: {
            FEP = input.ReadInt32();
            break;
          }
          case 248: {
            SEP = input.ReadInt32();
            break;
          }
          case 256: {
            AEP = input.ReadInt32();
            break;
          }
          case 264: {
            LEP = input.ReadInt32();
            break;
          }
          case 272: {
            DEP = input.ReadInt32();
            break;
          }
          case 280: {
            WEI = input.ReadInt32();
            break;
          }
          case 288: {
            FEI = input.ReadInt32();
            break;
          }
          case 296: {
            SEI = input.ReadInt32();
            break;
          }
          case 304: {
            AEI = input.ReadInt32();
            break;
          }
          case 312: {
            LEI = input.ReadInt32();
            break;
          }
          case 320: {
            DEI = input.ReadInt32();
            break;
          }
          case 328: {
            WEE = input.ReadInt32();
            break;
          }
          case 336: {
            FEE = input.ReadInt32();
            break;
          }
          case 344: {
            SEE = input.ReadInt32();
            break;
          }
          case 352: {
            AEE = input.ReadInt32();
            break;
          }
          case 360: {
            LEE = input.ReadInt32();
            break;
          }
          case 368: {
            DEE = input.ReadInt32();
            break;
          }
          case 376: {
            WER = input.ReadInt32();
            break;
          }
          case 384: {
            FER = input.ReadInt32();
            break;
          }
          case 392: {
            SER = input.ReadInt32();
            break;
          }
          case 400: {
            AER = input.ReadInt32();
            break;
          }
          case 408: {
            LER = input.ReadInt32();
            break;
          }
          case 416: {
            DER = input.ReadInt32();
            break;
          }
          case 424: {
            ToughnessDamageAdjust = input.ReadInt32();
            break;
          }
          case 432: {
            Toughness = input.ReadInt32();
            break;
          }
          case 440: {
            Suppress = input.ReadInt32();
            break;
          }
          case 448: {
            NORMALDMG = input.ReadInt32();
            break;
          }
          case 456: {
            SKILLDMG = input.ReadInt32();
            break;
          }
          case 464: {
            ULTRADMG = input.ReadInt32();
            break;
          }
          case 472: {
            OTHERDMG = input.ReadInt32();
            break;
          }
          case 480: {
            RCDNORMALDMG = input.ReadInt32();
            break;
          }
          case 488: {
            RCDSKILLDMG = input.ReadInt32();
            break;
          }
          case 496: {
            RCDULTRADMG = input.ReadInt32();
            break;
          }
          case 504: {
            RCDOTHERDMG = input.ReadInt32();
            break;
          }
          case 512: {
            MARKDMG = input.ReadInt32();
            break;
          }
          case 520: {
            RCDMARKDMG = input.ReadInt32();
            break;
          }
          case 528: {
            SUMMONDMG = input.ReadInt32();
            break;
          }
          case 536: {
            RCDSUMMONDMG = input.ReadInt32();
            break;
          }
          case 544: {
            PROJECTILEDMG = input.ReadInt32();
            break;
          }
          case 552: {
            RCDPROJECTILEDMG = input.ReadInt32();
            break;
          }
          case 560: {
            GENDMG = input.ReadInt32();
            break;
          }
          case 568: {
            DMGPLUS = input.ReadInt32();
            break;
          }
          case 576: {
            FINALDMG = input.ReadInt32();
            break;
          }
          case 584: {
            FINALDMGPLUS = input.ReadInt32();
            break;
          }
          case 592: {
            WEERCD = input.ReadInt32();
            break;
          }
          case 600: {
            FEERCD = input.ReadInt32();
            break;
          }
          case 608: {
            SEERCD = input.ReadInt32();
            break;
          }
          case 616: {
            AEERCD = input.ReadInt32();
            break;
          }
          case 624: {
            LEERCD = input.ReadInt32();
            break;
          }
          case 632: {
            DEERCD = input.ReadInt32();
            break;
          }
          case 640: {
            GENDMGRCD = input.ReadInt32();
            break;
          }
          case 648: {
            DMGPLUSRCD = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
