// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Perk.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Perk.proto</summary>
  public static partial class PerkReflection {

    #region Descriptor
    /// <summary>File descriptor for Perk.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PerkReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpQZXJrLnByb3RvIqIECgRQZXJrEgoKAmlkGAEgASgFEhEKCW1heF9sZXZl",
            "bBgCIAEoBRIYChBhZGRpdGlvbmFsX2xldmVsGAMgASgIEg0KBWVfZV90GAQg",
            "ASgFEhYKDnNjb3JlX2dyb3VwX2lkGAUgASgFEhYKDnN0cmVuZ3RoX3Njb3Jl",
            "GAYgAygFEhEKCXBlcmtfdHlwZRgHIAEoBRIPCgdjaGFyX2lkGAggASgFEhYK",
            "DmNoYXJfcGVya190eXBlGAkgASgFEg0KBXRoZW1lGAogASgFEhQKDGdhbWVf",
            "Ym9va19pZBgLIAEoBRIcChRvcGVyYXRpbmdfZmxvb3JfdHlwZRgMIAMoBRIY",
            "ChBvcGVyYXRpbmdfbnVtYmVyGA0gASgFEg0KBXByaWNlGA4gASgFEgwKBHNs",
            "b3QYDyABKAUSDAoEdGFncxgQIAMoBRIUCgxwcmVfcGVya19pZHMYESADKAUS",
            "FAoMcHJlX3RhZ19wa2dzGBIgASgJEhIKCm5lZWRfZmxvb3IYEyABKAUSFwoP",
            "ZWZmZWN0X2dyb3VwX2lkGBQgASgFEhQKDGlzX2VmZmVjdGl2ZRgVIAEoCBIR",
            "CglwZXJrX3RhZzEYFiABKAkSEQoJcGVya190YWcyGBcgASgJEhEKCXBlcmtf",
            "dGFnMxgYIAEoCRIRCglwZXJrX3RhZzQYGSABKAkSEQoJbG9nb19pY29uGBog",
            "ASgJEhAKCHNsb3RfdGFnGBsgASgJQg6qAgtOb3ZhLkNsaWVudGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Perk), global::Nova.Client.Perk.Parser, new[]{ "Id", "MaxLevel", "AdditionalLevel", "EET", "ScoreGroupId", "StrengthScore", "PerkType", "CharId", "CharPerkType", "Theme", "GameBookId", "OperatingFloorType", "OperatingNumber", "Price", "Slot", "Tags", "PrePerkIds", "PreTagPkgs", "NeedFloor", "EffectGroupId", "IsEffective", "PerkTag1", "PerkTag2", "PerkTag3", "PerkTag4", "LogoIcon", "SlotTag" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Perk : pb::IMessage<Perk>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Perk> _parser = new pb::MessageParser<Perk>(() => new Perk());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Perk> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.PerkReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Perk() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Perk(Perk other) : this() {
      id_ = other.id_;
      maxLevel_ = other.maxLevel_;
      additionalLevel_ = other.additionalLevel_;
      eET_ = other.eET_;
      scoreGroupId_ = other.scoreGroupId_;
      strengthScore_ = other.strengthScore_.Clone();
      perkType_ = other.perkType_;
      charId_ = other.charId_;
      charPerkType_ = other.charPerkType_;
      theme_ = other.theme_;
      gameBookId_ = other.gameBookId_;
      operatingFloorType_ = other.operatingFloorType_.Clone();
      operatingNumber_ = other.operatingNumber_;
      price_ = other.price_;
      slot_ = other.slot_;
      tags_ = other.tags_.Clone();
      prePerkIds_ = other.prePerkIds_.Clone();
      preTagPkgs_ = other.preTagPkgs_;
      needFloor_ = other.needFloor_;
      effectGroupId_ = other.effectGroupId_;
      isEffective_ = other.isEffective_;
      perkTag1_ = other.perkTag1_;
      perkTag2_ = other.perkTag2_;
      perkTag3_ = other.perkTag3_;
      perkTag4_ = other.perkTag4_;
      logoIcon_ = other.logoIcon_;
      slotTag_ = other.slotTag_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Perk Clone() {
      return new Perk(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "max_level" field.</summary>
    public const int MaxLevelFieldNumber = 2;
    private int maxLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MaxLevel {
      get { return maxLevel_; }
      set {
        maxLevel_ = value;
      }
    }

    /// <summary>Field number for the "additional_level" field.</summary>
    public const int AdditionalLevelFieldNumber = 3;
    private bool additionalLevel_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool AdditionalLevel {
      get { return additionalLevel_; }
      set {
        additionalLevel_ = value;
      }
    }

    /// <summary>Field number for the "e_e_t" field.</summary>
    public const int EETFieldNumber = 4;
    private int eET_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EET {
      get { return eET_; }
      set {
        eET_ = value;
      }
    }

    /// <summary>Field number for the "score_group_id" field.</summary>
    public const int ScoreGroupIdFieldNumber = 5;
    private int scoreGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ScoreGroupId {
      get { return scoreGroupId_; }
      set {
        scoreGroupId_ = value;
      }
    }

    /// <summary>Field number for the "strength_score" field.</summary>
    public const int StrengthScoreFieldNumber = 6;
    private static readonly pb::FieldCodec<int> _repeated_strengthScore_codec
        = pb::FieldCodec.ForInt32(50);
    private readonly pbc::RepeatedField<int> strengthScore_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> StrengthScore {
      get { return strengthScore_; }
    }

    /// <summary>Field number for the "perk_type" field.</summary>
    public const int PerkTypeFieldNumber = 7;
    private int perkType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int PerkType {
      get { return perkType_; }
      set {
        perkType_ = value;
      }
    }

    /// <summary>Field number for the "char_id" field.</summary>
    public const int CharIdFieldNumber = 8;
    private int charId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharId {
      get { return charId_; }
      set {
        charId_ = value;
      }
    }

    /// <summary>Field number for the "char_perk_type" field.</summary>
    public const int CharPerkTypeFieldNumber = 9;
    private int charPerkType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CharPerkType {
      get { return charPerkType_; }
      set {
        charPerkType_ = value;
      }
    }

    /// <summary>Field number for the "theme" field.</summary>
    public const int ThemeFieldNumber = 10;
    private int theme_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Theme {
      get { return theme_; }
      set {
        theme_ = value;
      }
    }

    /// <summary>Field number for the "game_book_id" field.</summary>
    public const int GameBookIdFieldNumber = 11;
    private int gameBookId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int GameBookId {
      get { return gameBookId_; }
      set {
        gameBookId_ = value;
      }
    }

    /// <summary>Field number for the "operating_floor_type" field.</summary>
    public const int OperatingFloorTypeFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_operatingFloorType_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> operatingFloorType_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> OperatingFloorType {
      get { return operatingFloorType_; }
    }

    /// <summary>Field number for the "operating_number" field.</summary>
    public const int OperatingNumberFieldNumber = 13;
    private int operatingNumber_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int OperatingNumber {
      get { return operatingNumber_; }
      set {
        operatingNumber_ = value;
      }
    }

    /// <summary>Field number for the "price" field.</summary>
    public const int PriceFieldNumber = 14;
    private int price_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Price {
      get { return price_; }
      set {
        price_ = value;
      }
    }

    /// <summary>Field number for the "slot" field.</summary>
    public const int SlotFieldNumber = 15;
    private int slot_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Slot {
      get { return slot_; }
      set {
        slot_ = value;
      }
    }

    /// <summary>Field number for the "tags" field.</summary>
    public const int TagsFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_tags_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> tags_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Tags {
      get { return tags_; }
    }

    /// <summary>Field number for the "pre_perk_ids" field.</summary>
    public const int PrePerkIdsFieldNumber = 17;
    private static readonly pb::FieldCodec<int> _repeated_prePerkIds_codec
        = pb::FieldCodec.ForInt32(138);
    private readonly pbc::RepeatedField<int> prePerkIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> PrePerkIds {
      get { return prePerkIds_; }
    }

    /// <summary>Field number for the "pre_tag_pkgs" field.</summary>
    public const int PreTagPkgsFieldNumber = 18;
    private string preTagPkgs_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PreTagPkgs {
      get { return preTagPkgs_; }
      set {
        preTagPkgs_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "need_floor" field.</summary>
    public const int NeedFloorFieldNumber = 19;
    private int needFloor_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int NeedFloor {
      get { return needFloor_; }
      set {
        needFloor_ = value;
      }
    }

    /// <summary>Field number for the "effect_group_id" field.</summary>
    public const int EffectGroupIdFieldNumber = 20;
    private int effectGroupId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int EffectGroupId {
      get { return effectGroupId_; }
      set {
        effectGroupId_ = value;
      }
    }

    /// <summary>Field number for the "is_effective" field.</summary>
    public const int IsEffectiveFieldNumber = 21;
    private bool isEffective_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsEffective {
      get { return isEffective_; }
      set {
        isEffective_ = value;
      }
    }

    /// <summary>Field number for the "perk_tag1" field.</summary>
    public const int PerkTag1FieldNumber = 22;
    private string perkTag1_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PerkTag1 {
      get { return perkTag1_; }
      set {
        perkTag1_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perk_tag2" field.</summary>
    public const int PerkTag2FieldNumber = 23;
    private string perkTag2_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PerkTag2 {
      get { return perkTag2_; }
      set {
        perkTag2_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perk_tag3" field.</summary>
    public const int PerkTag3FieldNumber = 24;
    private string perkTag3_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PerkTag3 {
      get { return perkTag3_; }
      set {
        perkTag3_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "perk_tag4" field.</summary>
    public const int PerkTag4FieldNumber = 25;
    private string perkTag4_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string PerkTag4 {
      get { return perkTag4_; }
      set {
        perkTag4_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "logo_icon" field.</summary>
    public const int LogoIconFieldNumber = 26;
    private string logoIcon_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string LogoIcon {
      get { return logoIcon_; }
      set {
        logoIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "slot_tag" field.</summary>
    public const int SlotTagFieldNumber = 27;
    private string slotTag_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string SlotTag {
      get { return slotTag_; }
      set {
        slotTag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Perk);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Perk other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (MaxLevel != other.MaxLevel) return false;
      if (AdditionalLevel != other.AdditionalLevel) return false;
      if (EET != other.EET) return false;
      if (ScoreGroupId != other.ScoreGroupId) return false;
      if(!strengthScore_.Equals(other.strengthScore_)) return false;
      if (PerkType != other.PerkType) return false;
      if (CharId != other.CharId) return false;
      if (CharPerkType != other.CharPerkType) return false;
      if (Theme != other.Theme) return false;
      if (GameBookId != other.GameBookId) return false;
      if(!operatingFloorType_.Equals(other.operatingFloorType_)) return false;
      if (OperatingNumber != other.OperatingNumber) return false;
      if (Price != other.Price) return false;
      if (Slot != other.Slot) return false;
      if(!tags_.Equals(other.tags_)) return false;
      if(!prePerkIds_.Equals(other.prePerkIds_)) return false;
      if (PreTagPkgs != other.PreTagPkgs) return false;
      if (NeedFloor != other.NeedFloor) return false;
      if (EffectGroupId != other.EffectGroupId) return false;
      if (IsEffective != other.IsEffective) return false;
      if (PerkTag1 != other.PerkTag1) return false;
      if (PerkTag2 != other.PerkTag2) return false;
      if (PerkTag3 != other.PerkTag3) return false;
      if (PerkTag4 != other.PerkTag4) return false;
      if (LogoIcon != other.LogoIcon) return false;
      if (SlotTag != other.SlotTag) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (MaxLevel != 0) hash ^= MaxLevel.GetHashCode();
      if (AdditionalLevel != false) hash ^= AdditionalLevel.GetHashCode();
      if (EET != 0) hash ^= EET.GetHashCode();
      if (ScoreGroupId != 0) hash ^= ScoreGroupId.GetHashCode();
      hash ^= strengthScore_.GetHashCode();
      if (PerkType != 0) hash ^= PerkType.GetHashCode();
      if (CharId != 0) hash ^= CharId.GetHashCode();
      if (CharPerkType != 0) hash ^= CharPerkType.GetHashCode();
      if (Theme != 0) hash ^= Theme.GetHashCode();
      if (GameBookId != 0) hash ^= GameBookId.GetHashCode();
      hash ^= operatingFloorType_.GetHashCode();
      if (OperatingNumber != 0) hash ^= OperatingNumber.GetHashCode();
      if (Price != 0) hash ^= Price.GetHashCode();
      if (Slot != 0) hash ^= Slot.GetHashCode();
      hash ^= tags_.GetHashCode();
      hash ^= prePerkIds_.GetHashCode();
      if (PreTagPkgs.Length != 0) hash ^= PreTagPkgs.GetHashCode();
      if (NeedFloor != 0) hash ^= NeedFloor.GetHashCode();
      if (EffectGroupId != 0) hash ^= EffectGroupId.GetHashCode();
      if (IsEffective != false) hash ^= IsEffective.GetHashCode();
      if (PerkTag1.Length != 0) hash ^= PerkTag1.GetHashCode();
      if (PerkTag2.Length != 0) hash ^= PerkTag2.GetHashCode();
      if (PerkTag3.Length != 0) hash ^= PerkTag3.GetHashCode();
      if (PerkTag4.Length != 0) hash ^= PerkTag4.GetHashCode();
      if (LogoIcon.Length != 0) hash ^= LogoIcon.GetHashCode();
      if (SlotTag.Length != 0) hash ^= SlotTag.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxLevel);
      }
      if (AdditionalLevel != false) {
        output.WriteRawTag(24);
        output.WriteBool(AdditionalLevel);
      }
      if (EET != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EET);
      }
      if (ScoreGroupId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScoreGroupId);
      }
      strengthScore_.WriteTo(output, _repeated_strengthScore_codec);
      if (PerkType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PerkType);
      }
      if (CharId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CharId);
      }
      if (CharPerkType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharPerkType);
      }
      if (Theme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Theme);
      }
      if (GameBookId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GameBookId);
      }
      operatingFloorType_.WriteTo(output, _repeated_operatingFloorType_codec);
      if (OperatingNumber != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OperatingNumber);
      }
      if (Price != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Price);
      }
      if (Slot != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Slot);
      }
      tags_.WriteTo(output, _repeated_tags_codec);
      prePerkIds_.WriteTo(output, _repeated_prePerkIds_codec);
      if (PreTagPkgs.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PreTagPkgs);
      }
      if (NeedFloor != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NeedFloor);
      }
      if (EffectGroupId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EffectGroupId);
      }
      if (IsEffective != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsEffective);
      }
      if (PerkTag1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PerkTag1);
      }
      if (PerkTag2.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(PerkTag2);
      }
      if (PerkTag3.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(PerkTag3);
      }
      if (PerkTag4.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(PerkTag4);
      }
      if (LogoIcon.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(LogoIcon);
      }
      if (SlotTag.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SlotTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (MaxLevel != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(MaxLevel);
      }
      if (AdditionalLevel != false) {
        output.WriteRawTag(24);
        output.WriteBool(AdditionalLevel);
      }
      if (EET != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(EET);
      }
      if (ScoreGroupId != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ScoreGroupId);
      }
      strengthScore_.WriteTo(ref output, _repeated_strengthScore_codec);
      if (PerkType != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(PerkType);
      }
      if (CharId != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(CharId);
      }
      if (CharPerkType != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(CharPerkType);
      }
      if (Theme != 0) {
        output.WriteRawTag(80);
        output.WriteInt32(Theme);
      }
      if (GameBookId != 0) {
        output.WriteRawTag(88);
        output.WriteInt32(GameBookId);
      }
      operatingFloorType_.WriteTo(ref output, _repeated_operatingFloorType_codec);
      if (OperatingNumber != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(OperatingNumber);
      }
      if (Price != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(Price);
      }
      if (Slot != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Slot);
      }
      tags_.WriteTo(ref output, _repeated_tags_codec);
      prePerkIds_.WriteTo(ref output, _repeated_prePerkIds_codec);
      if (PreTagPkgs.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(PreTagPkgs);
      }
      if (NeedFloor != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(NeedFloor);
      }
      if (EffectGroupId != 0) {
        output.WriteRawTag(160, 1);
        output.WriteInt32(EffectGroupId);
      }
      if (IsEffective != false) {
        output.WriteRawTag(168, 1);
        output.WriteBool(IsEffective);
      }
      if (PerkTag1.Length != 0) {
        output.WriteRawTag(178, 1);
        output.WriteString(PerkTag1);
      }
      if (PerkTag2.Length != 0) {
        output.WriteRawTag(186, 1);
        output.WriteString(PerkTag2);
      }
      if (PerkTag3.Length != 0) {
        output.WriteRawTag(194, 1);
        output.WriteString(PerkTag3);
      }
      if (PerkTag4.Length != 0) {
        output.WriteRawTag(202, 1);
        output.WriteString(PerkTag4);
      }
      if (LogoIcon.Length != 0) {
        output.WriteRawTag(210, 1);
        output.WriteString(LogoIcon);
      }
      if (SlotTag.Length != 0) {
        output.WriteRawTag(218, 1);
        output.WriteString(SlotTag);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (MaxLevel != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxLevel);
      }
      if (AdditionalLevel != false) {
        size += 1 + 1;
      }
      if (EET != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EET);
      }
      if (ScoreGroupId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ScoreGroupId);
      }
      size += strengthScore_.CalculateSize(_repeated_strengthScore_codec);
      if (PerkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PerkType);
      }
      if (CharId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharId);
      }
      if (CharPerkType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(CharPerkType);
      }
      if (Theme != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Theme);
      }
      if (GameBookId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(GameBookId);
      }
      size += operatingFloorType_.CalculateSize(_repeated_operatingFloorType_codec);
      if (OperatingNumber != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(OperatingNumber);
      }
      if (Price != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Price);
      }
      if (Slot != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Slot);
      }
      size += tags_.CalculateSize(_repeated_tags_codec);
      size += prePerkIds_.CalculateSize(_repeated_prePerkIds_codec);
      if (PreTagPkgs.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PreTagPkgs);
      }
      if (NeedFloor != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(NeedFloor);
      }
      if (EffectGroupId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(EffectGroupId);
      }
      if (IsEffective != false) {
        size += 2 + 1;
      }
      if (PerkTag1.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PerkTag1);
      }
      if (PerkTag2.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PerkTag2);
      }
      if (PerkTag3.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PerkTag3);
      }
      if (PerkTag4.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(PerkTag4);
      }
      if (LogoIcon.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(LogoIcon);
      }
      if (SlotTag.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(SlotTag);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Perk other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.MaxLevel != 0) {
        MaxLevel = other.MaxLevel;
      }
      if (other.AdditionalLevel != false) {
        AdditionalLevel = other.AdditionalLevel;
      }
      if (other.EET != 0) {
        EET = other.EET;
      }
      if (other.ScoreGroupId != 0) {
        ScoreGroupId = other.ScoreGroupId;
      }
      strengthScore_.Add(other.strengthScore_);
      if (other.PerkType != 0) {
        PerkType = other.PerkType;
      }
      if (other.CharId != 0) {
        CharId = other.CharId;
      }
      if (other.CharPerkType != 0) {
        CharPerkType = other.CharPerkType;
      }
      if (other.Theme != 0) {
        Theme = other.Theme;
      }
      if (other.GameBookId != 0) {
        GameBookId = other.GameBookId;
      }
      operatingFloorType_.Add(other.operatingFloorType_);
      if (other.OperatingNumber != 0) {
        OperatingNumber = other.OperatingNumber;
      }
      if (other.Price != 0) {
        Price = other.Price;
      }
      if (other.Slot != 0) {
        Slot = other.Slot;
      }
      tags_.Add(other.tags_);
      prePerkIds_.Add(other.prePerkIds_);
      if (other.PreTagPkgs.Length != 0) {
        PreTagPkgs = other.PreTagPkgs;
      }
      if (other.NeedFloor != 0) {
        NeedFloor = other.NeedFloor;
      }
      if (other.EffectGroupId != 0) {
        EffectGroupId = other.EffectGroupId;
      }
      if (other.IsEffective != false) {
        IsEffective = other.IsEffective;
      }
      if (other.PerkTag1.Length != 0) {
        PerkTag1 = other.PerkTag1;
      }
      if (other.PerkTag2.Length != 0) {
        PerkTag2 = other.PerkTag2;
      }
      if (other.PerkTag3.Length != 0) {
        PerkTag3 = other.PerkTag3;
      }
      if (other.PerkTag4.Length != 0) {
        PerkTag4 = other.PerkTag4;
      }
      if (other.LogoIcon.Length != 0) {
        LogoIcon = other.LogoIcon;
      }
      if (other.SlotTag.Length != 0) {
        SlotTag = other.SlotTag;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AdditionalLevel = input.ReadBool();
            break;
          }
          case 32: {
            EET = input.ReadInt32();
            break;
          }
          case 40: {
            ScoreGroupId = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            strengthScore_.AddEntriesFrom(input, _repeated_strengthScore_codec);
            break;
          }
          case 56: {
            PerkType = input.ReadInt32();
            break;
          }
          case 64: {
            CharId = input.ReadInt32();
            break;
          }
          case 72: {
            CharPerkType = input.ReadInt32();
            break;
          }
          case 80: {
            Theme = input.ReadInt32();
            break;
          }
          case 88: {
            GameBookId = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            operatingFloorType_.AddEntriesFrom(input, _repeated_operatingFloorType_codec);
            break;
          }
          case 104: {
            OperatingNumber = input.ReadInt32();
            break;
          }
          case 112: {
            Price = input.ReadInt32();
            break;
          }
          case 120: {
            Slot = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            tags_.AddEntriesFrom(input, _repeated_tags_codec);
            break;
          }
          case 138:
          case 136: {
            prePerkIds_.AddEntriesFrom(input, _repeated_prePerkIds_codec);
            break;
          }
          case 146: {
            PreTagPkgs = input.ReadString();
            break;
          }
          case 152: {
            NeedFloor = input.ReadInt32();
            break;
          }
          case 160: {
            EffectGroupId = input.ReadInt32();
            break;
          }
          case 168: {
            IsEffective = input.ReadBool();
            break;
          }
          case 178: {
            PerkTag1 = input.ReadString();
            break;
          }
          case 186: {
            PerkTag2 = input.ReadString();
            break;
          }
          case 194: {
            PerkTag3 = input.ReadString();
            break;
          }
          case 202: {
            PerkTag4 = input.ReadString();
            break;
          }
          case 210: {
            LogoIcon = input.ReadString();
            break;
          }
          case 218: {
            SlotTag = input.ReadString();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 16: {
            MaxLevel = input.ReadInt32();
            break;
          }
          case 24: {
            AdditionalLevel = input.ReadBool();
            break;
          }
          case 32: {
            EET = input.ReadInt32();
            break;
          }
          case 40: {
            ScoreGroupId = input.ReadInt32();
            break;
          }
          case 50:
          case 48: {
            strengthScore_.AddEntriesFrom(ref input, _repeated_strengthScore_codec);
            break;
          }
          case 56: {
            PerkType = input.ReadInt32();
            break;
          }
          case 64: {
            CharId = input.ReadInt32();
            break;
          }
          case 72: {
            CharPerkType = input.ReadInt32();
            break;
          }
          case 80: {
            Theme = input.ReadInt32();
            break;
          }
          case 88: {
            GameBookId = input.ReadInt32();
            break;
          }
          case 98:
          case 96: {
            operatingFloorType_.AddEntriesFrom(ref input, _repeated_operatingFloorType_codec);
            break;
          }
          case 104: {
            OperatingNumber = input.ReadInt32();
            break;
          }
          case 112: {
            Price = input.ReadInt32();
            break;
          }
          case 120: {
            Slot = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            tags_.AddEntriesFrom(ref input, _repeated_tags_codec);
            break;
          }
          case 138:
          case 136: {
            prePerkIds_.AddEntriesFrom(ref input, _repeated_prePerkIds_codec);
            break;
          }
          case 146: {
            PreTagPkgs = input.ReadString();
            break;
          }
          case 152: {
            NeedFloor = input.ReadInt32();
            break;
          }
          case 160: {
            EffectGroupId = input.ReadInt32();
            break;
          }
          case 168: {
            IsEffective = input.ReadBool();
            break;
          }
          case 178: {
            PerkTag1 = input.ReadString();
            break;
          }
          case 186: {
            PerkTag2 = input.ReadString();
            break;
          }
          case 194: {
            PerkTag3 = input.ReadString();
            break;
          }
          case 202: {
            PerkTag4 = input.ReadString();
            break;
          }
          case 210: {
            LogoIcon = input.ReadString();
            break;
          }
          case 218: {
            SlotTag = input.ReadString();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
