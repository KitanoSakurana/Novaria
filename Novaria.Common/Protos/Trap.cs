// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Trap.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021, 8981
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Nova.Client {

  /// <summary>Holder for reflection information generated from Trap.proto</summary>
  public static partial class TrapReflection {

    #region Descriptor
    /// <summary>File descriptor for Trap.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TrapReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgpUcmFwLnByb3RvIs4ECgRUcmFwEgoKAmlkGAEgASgFEgwKBG5hbWUYAiAB",
            "KAkSDgoGZl9jX2lkGAMgASgFEg0KBW1vZGVsGAQgASgJEhMKC21vZGVsX3Nj",
            "YWxlGAUgASgFEhYKDmJ1ZmZfZl94X3NjYWxlGAYgASgFEhYKDmNvbGxpZGVy",
            "X3NjYWxlGAcgASgFEhQKDGF0dHJpYnV0ZV9pZBgIIAEoCRIQCgh0ZW1wbGV0",
            "ZRgJIAEoBRIQCghidWZmX2lkcxgKIAMoBRIZChF0dXJuX29mZl9idWZmX2lk",
            "cxgLIAMoBRIYChB0dXJuX29uX2J1ZmZfaWRzGAwgAygFEhcKD2ludGVycnVw",
            "dF9za2lsbBgNIAEoCBIQCghzdWJfdHlwZRgOIAEoBRIPCgdmYWN0aW9uGA8g",
            "ASgFEg4KBmZpbHRlchgQIAMoBRIYChBpZ25vcmVfY29sbGlzaW9uGBEgASgI",
            "EhIKCmFjdGl2ZV9lZmYYEiABKAkSEgoKc2hhcGVfdHlwZRgTIAEoBRINCgV3",
            "aWR0aBgUIAEoAhIOCgZsZW5ndGgYFSABKAISDgoGcmFkaXVzGBYgASgCEhQK",
            "DGlubmVyX3JhZGl1cxgXIAEoAhINCgVhbmdsZRgYIAEoAhIOCgZvZmZzZXQY",
            "GSADKAISEAoIcm90YXRpb24YGiABKAISDwoHaXNfbW92ZRgbIAEoCBIQCghp",
            "c19ibG9jaxgcIAEoCBIPCgdtb3ZfYWNjGB0gASgFEg8KB3JvdF9zcGQYHiAB",
            "KAUSEAoIbW92ZV9zcGQYHyABKAVCDqoCC05vdmEuQ2xpZW50YgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Nova.Client.Trap), global::Nova.Client.Trap.Parser, new[]{ "Id", "Name", "FCId", "Model", "ModelScale", "BuffFXScale", "ColliderScale", "AttributeId", "Templete", "BuffIds", "TurnOffBuffIds", "TurnOnBuffIds", "InterruptSkill", "SubType", "Faction", "Filter", "IgnoreCollision", "ActiveEff", "ShapeType", "Width", "Length", "Radius", "InnerRadius", "Angle", "Offset", "Rotation", "IsMove", "IsBlock", "MovAcc", "RotSpd", "MoveSpd" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerDisplayAttribute("{ToString(),nq}")]
  public sealed partial class Trap : pb::IMessage<Trap>
  #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      , pb::IBufferMessage
  #endif
  {
    private static readonly pb::MessageParser<Trap> _parser = new pb::MessageParser<Trap>(() => new Trap());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pb::MessageParser<Trap> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Nova.Client.TrapReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap(Trap other) : this() {
      id_ = other.id_;
      name_ = other.name_;
      fCId_ = other.fCId_;
      model_ = other.model_;
      modelScale_ = other.modelScale_;
      buffFXScale_ = other.buffFXScale_;
      colliderScale_ = other.colliderScale_;
      attributeId_ = other.attributeId_;
      templete_ = other.templete_;
      buffIds_ = other.buffIds_.Clone();
      turnOffBuffIds_ = other.turnOffBuffIds_.Clone();
      turnOnBuffIds_ = other.turnOnBuffIds_.Clone();
      interruptSkill_ = other.interruptSkill_;
      subType_ = other.subType_;
      faction_ = other.faction_;
      filter_ = other.filter_.Clone();
      ignoreCollision_ = other.ignoreCollision_;
      activeEff_ = other.activeEff_;
      shapeType_ = other.shapeType_;
      width_ = other.width_;
      length_ = other.length_;
      radius_ = other.radius_;
      innerRadius_ = other.innerRadius_;
      angle_ = other.angle_;
      offset_ = other.offset_.Clone();
      rotation_ = other.rotation_;
      isMove_ = other.isMove_;
      isBlock_ = other.isBlock_;
      movAcc_ = other.movAcc_;
      rotSpd_ = other.rotSpd_;
      moveSpd_ = other.moveSpd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public Trap Clone() {
      return new Trap(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private int id_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    /// <summary>Field number for the "name" field.</summary>
    public const int NameFieldNumber = 2;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "f_c_id" field.</summary>
    public const int FCIdFieldNumber = 3;
    private int fCId_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int FCId {
      get { return fCId_; }
      set {
        fCId_ = value;
      }
    }

    /// <summary>Field number for the "model" field.</summary>
    public const int ModelFieldNumber = 4;
    private string model_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string Model {
      get { return model_; }
      set {
        model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "model_scale" field.</summary>
    public const int ModelScaleFieldNumber = 5;
    private int modelScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ModelScale {
      get { return modelScale_; }
      set {
        modelScale_ = value;
      }
    }

    /// <summary>Field number for the "buff_f_x_scale" field.</summary>
    public const int BuffFXScaleFieldNumber = 6;
    private int buffFXScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int BuffFXScale {
      get { return buffFXScale_; }
      set {
        buffFXScale_ = value;
      }
    }

    /// <summary>Field number for the "collider_scale" field.</summary>
    public const int ColliderScaleFieldNumber = 7;
    private int colliderScale_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ColliderScale {
      get { return colliderScale_; }
      set {
        colliderScale_ = value;
      }
    }

    /// <summary>Field number for the "attribute_id" field.</summary>
    public const int AttributeIdFieldNumber = 8;
    private string attributeId_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string AttributeId {
      get { return attributeId_; }
      set {
        attributeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "templete" field.</summary>
    public const int TempleteFieldNumber = 9;
    private int templete_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Templete {
      get { return templete_; }
      set {
        templete_ = value;
      }
    }

    /// <summary>Field number for the "buff_ids" field.</summary>
    public const int BuffIdsFieldNumber = 10;
    private static readonly pb::FieldCodec<int> _repeated_buffIds_codec
        = pb::FieldCodec.ForInt32(82);
    private readonly pbc::RepeatedField<int> buffIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> BuffIds {
      get { return buffIds_; }
    }

    /// <summary>Field number for the "turn_off_buff_ids" field.</summary>
    public const int TurnOffBuffIdsFieldNumber = 11;
    private static readonly pb::FieldCodec<int> _repeated_turnOffBuffIds_codec
        = pb::FieldCodec.ForInt32(90);
    private readonly pbc::RepeatedField<int> turnOffBuffIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TurnOffBuffIds {
      get { return turnOffBuffIds_; }
    }

    /// <summary>Field number for the "turn_on_buff_ids" field.</summary>
    public const int TurnOnBuffIdsFieldNumber = 12;
    private static readonly pb::FieldCodec<int> _repeated_turnOnBuffIds_codec
        = pb::FieldCodec.ForInt32(98);
    private readonly pbc::RepeatedField<int> turnOnBuffIds_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> TurnOnBuffIds {
      get { return turnOnBuffIds_; }
    }

    /// <summary>Field number for the "interrupt_skill" field.</summary>
    public const int InterruptSkillFieldNumber = 13;
    private bool interruptSkill_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool InterruptSkill {
      get { return interruptSkill_; }
      set {
        interruptSkill_ = value;
      }
    }

    /// <summary>Field number for the "sub_type" field.</summary>
    public const int SubTypeFieldNumber = 14;
    private int subType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int SubType {
      get { return subType_; }
      set {
        subType_ = value;
      }
    }

    /// <summary>Field number for the "faction" field.</summary>
    public const int FactionFieldNumber = 15;
    private int faction_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int Faction {
      get { return faction_; }
      set {
        faction_ = value;
      }
    }

    /// <summary>Field number for the "filter" field.</summary>
    public const int FilterFieldNumber = 16;
    private static readonly pb::FieldCodec<int> _repeated_filter_codec
        = pb::FieldCodec.ForInt32(130);
    private readonly pbc::RepeatedField<int> filter_ = new pbc::RepeatedField<int>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<int> Filter {
      get { return filter_; }
    }

    /// <summary>Field number for the "ignore_collision" field.</summary>
    public const int IgnoreCollisionFieldNumber = 17;
    private bool ignoreCollision_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IgnoreCollision {
      get { return ignoreCollision_; }
      set {
        ignoreCollision_ = value;
      }
    }

    /// <summary>Field number for the "active_eff" field.</summary>
    public const int ActiveEffFieldNumber = 18;
    private string activeEff_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public string ActiveEff {
      get { return activeEff_; }
      set {
        activeEff_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "shape_type" field.</summary>
    public const int ShapeTypeFieldNumber = 19;
    private int shapeType_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int ShapeType {
      get { return shapeType_; }
      set {
        shapeType_ = value;
      }
    }

    /// <summary>Field number for the "width" field.</summary>
    public const int WidthFieldNumber = 20;
    private float width_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Width {
      get { return width_; }
      set {
        width_ = value;
      }
    }

    /// <summary>Field number for the "length" field.</summary>
    public const int LengthFieldNumber = 21;
    private float length_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Length {
      get { return length_; }
      set {
        length_ = value;
      }
    }

    /// <summary>Field number for the "radius" field.</summary>
    public const int RadiusFieldNumber = 22;
    private float radius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Radius {
      get { return radius_; }
      set {
        radius_ = value;
      }
    }

    /// <summary>Field number for the "inner_radius" field.</summary>
    public const int InnerRadiusFieldNumber = 23;
    private float innerRadius_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float InnerRadius {
      get { return innerRadius_; }
      set {
        innerRadius_ = value;
      }
    }

    /// <summary>Field number for the "angle" field.</summary>
    public const int AngleFieldNumber = 24;
    private float angle_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Angle {
      get { return angle_; }
      set {
        angle_ = value;
      }
    }

    /// <summary>Field number for the "offset" field.</summary>
    public const int OffsetFieldNumber = 25;
    private static readonly pb::FieldCodec<float> _repeated_offset_codec
        = pb::FieldCodec.ForFloat(202);
    private readonly pbc::RepeatedField<float> offset_ = new pbc::RepeatedField<float>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public pbc::RepeatedField<float> Offset {
      get { return offset_; }
    }

    /// <summary>Field number for the "rotation" field.</summary>
    public const int RotationFieldNumber = 26;
    private float rotation_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public float Rotation {
      get { return rotation_; }
      set {
        rotation_ = value;
      }
    }

    /// <summary>Field number for the "is_move" field.</summary>
    public const int IsMoveFieldNumber = 27;
    private bool isMove_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsMove {
      get { return isMove_; }
      set {
        isMove_ = value;
      }
    }

    /// <summary>Field number for the "is_block" field.</summary>
    public const int IsBlockFieldNumber = 28;
    private bool isBlock_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool IsBlock {
      get { return isBlock_; }
      set {
        isBlock_ = value;
      }
    }

    /// <summary>Field number for the "mov_acc" field.</summary>
    public const int MovAccFieldNumber = 29;
    private int movAcc_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MovAcc {
      get { return movAcc_; }
      set {
        movAcc_ = value;
      }
    }

    /// <summary>Field number for the "rot_spd" field.</summary>
    public const int RotSpdFieldNumber = 30;
    private int rotSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int RotSpd {
      get { return rotSpd_; }
      set {
        rotSpd_ = value;
      }
    }

    /// <summary>Field number for the "move_spd" field.</summary>
    public const int MoveSpdFieldNumber = 31;
    private int moveSpd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int MoveSpd {
      get { return moveSpd_; }
      set {
        moveSpd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override bool Equals(object other) {
      return Equals(other as Trap);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public bool Equals(Trap other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Name != other.Name) return false;
      if (FCId != other.FCId) return false;
      if (Model != other.Model) return false;
      if (ModelScale != other.ModelScale) return false;
      if (BuffFXScale != other.BuffFXScale) return false;
      if (ColliderScale != other.ColliderScale) return false;
      if (AttributeId != other.AttributeId) return false;
      if (Templete != other.Templete) return false;
      if(!buffIds_.Equals(other.buffIds_)) return false;
      if(!turnOffBuffIds_.Equals(other.turnOffBuffIds_)) return false;
      if(!turnOnBuffIds_.Equals(other.turnOnBuffIds_)) return false;
      if (InterruptSkill != other.InterruptSkill) return false;
      if (SubType != other.SubType) return false;
      if (Faction != other.Faction) return false;
      if(!filter_.Equals(other.filter_)) return false;
      if (IgnoreCollision != other.IgnoreCollision) return false;
      if (ActiveEff != other.ActiveEff) return false;
      if (ShapeType != other.ShapeType) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Width, other.Width)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Length, other.Length)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Radius, other.Radius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(InnerRadius, other.InnerRadius)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Angle, other.Angle)) return false;
      if(!offset_.Equals(other.offset_)) return false;
      if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Rotation, other.Rotation)) return false;
      if (IsMove != other.IsMove) return false;
      if (IsBlock != other.IsBlock) return false;
      if (MovAcc != other.MovAcc) return false;
      if (RotSpd != other.RotSpd) return false;
      if (MoveSpd != other.MoveSpd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override int GetHashCode() {
      int hash = 1;
      if (Id != 0) hash ^= Id.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (FCId != 0) hash ^= FCId.GetHashCode();
      if (Model.Length != 0) hash ^= Model.GetHashCode();
      if (ModelScale != 0) hash ^= ModelScale.GetHashCode();
      if (BuffFXScale != 0) hash ^= BuffFXScale.GetHashCode();
      if (ColliderScale != 0) hash ^= ColliderScale.GetHashCode();
      if (AttributeId.Length != 0) hash ^= AttributeId.GetHashCode();
      if (Templete != 0) hash ^= Templete.GetHashCode();
      hash ^= buffIds_.GetHashCode();
      hash ^= turnOffBuffIds_.GetHashCode();
      hash ^= turnOnBuffIds_.GetHashCode();
      if (InterruptSkill != false) hash ^= InterruptSkill.GetHashCode();
      if (SubType != 0) hash ^= SubType.GetHashCode();
      if (Faction != 0) hash ^= Faction.GetHashCode();
      hash ^= filter_.GetHashCode();
      if (IgnoreCollision != false) hash ^= IgnoreCollision.GetHashCode();
      if (ActiveEff.Length != 0) hash ^= ActiveEff.GetHashCode();
      if (ShapeType != 0) hash ^= ShapeType.GetHashCode();
      if (Width != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Width);
      if (Length != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Length);
      if (Radius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Radius);
      if (InnerRadius != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(InnerRadius);
      if (Angle != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Angle);
      hash ^= offset_.GetHashCode();
      if (Rotation != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Rotation);
      if (IsMove != false) hash ^= IsMove.GetHashCode();
      if (IsBlock != false) hash ^= IsBlock.GetHashCode();
      if (MovAcc != 0) hash ^= MovAcc.GetHashCode();
      if (RotSpd != 0) hash ^= RotSpd.GetHashCode();
      if (MoveSpd != 0) hash ^= MoveSpd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void WriteTo(pb::CodedOutputStream output) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      output.WriteRawMessage(this);
    #else
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FCId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FCId);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Model);
      }
      if (ModelScale != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModelScale);
      }
      if (BuffFXScale != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BuffFXScale);
      }
      if (ColliderScale != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ColliderScale);
      }
      if (AttributeId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AttributeId);
      }
      if (Templete != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Templete);
      }
      buffIds_.WriteTo(output, _repeated_buffIds_codec);
      turnOffBuffIds_.WriteTo(output, _repeated_turnOffBuffIds_codec);
      turnOnBuffIds_.WriteTo(output, _repeated_turnOnBuffIds_codec);
      if (InterruptSkill != false) {
        output.WriteRawTag(104);
        output.WriteBool(InterruptSkill);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (Faction != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Faction);
      }
      filter_.WriteTo(output, _repeated_filter_codec);
      if (IgnoreCollision != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IgnoreCollision);
      }
      if (ActiveEff.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ActiveEff);
      }
      if (ShapeType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ShapeType);
      }
      if (Width != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Width);
      }
      if (Length != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Length);
      }
      if (Radius != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Radius);
      }
      if (InnerRadius != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(InnerRadius);
      }
      if (Angle != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Angle);
      }
      offset_.WriteTo(output, _repeated_offset_codec);
      if (Rotation != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Rotation);
      }
      if (IsMove != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsMove);
      }
      if (IsBlock != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsBlock);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MovAcc);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(RotSpd);
      }
      if (MoveSpd != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(MoveSpd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalWriteTo(ref pb::WriteContext output) {
      if (Id != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Id);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (FCId != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(FCId);
      }
      if (Model.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(Model);
      }
      if (ModelScale != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(ModelScale);
      }
      if (BuffFXScale != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(BuffFXScale);
      }
      if (ColliderScale != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(ColliderScale);
      }
      if (AttributeId.Length != 0) {
        output.WriteRawTag(66);
        output.WriteString(AttributeId);
      }
      if (Templete != 0) {
        output.WriteRawTag(72);
        output.WriteInt32(Templete);
      }
      buffIds_.WriteTo(ref output, _repeated_buffIds_codec);
      turnOffBuffIds_.WriteTo(ref output, _repeated_turnOffBuffIds_codec);
      turnOnBuffIds_.WriteTo(ref output, _repeated_turnOnBuffIds_codec);
      if (InterruptSkill != false) {
        output.WriteRawTag(104);
        output.WriteBool(InterruptSkill);
      }
      if (SubType != 0) {
        output.WriteRawTag(112);
        output.WriteInt32(SubType);
      }
      if (Faction != 0) {
        output.WriteRawTag(120);
        output.WriteInt32(Faction);
      }
      filter_.WriteTo(ref output, _repeated_filter_codec);
      if (IgnoreCollision != false) {
        output.WriteRawTag(136, 1);
        output.WriteBool(IgnoreCollision);
      }
      if (ActiveEff.Length != 0) {
        output.WriteRawTag(146, 1);
        output.WriteString(ActiveEff);
      }
      if (ShapeType != 0) {
        output.WriteRawTag(152, 1);
        output.WriteInt32(ShapeType);
      }
      if (Width != 0F) {
        output.WriteRawTag(165, 1);
        output.WriteFloat(Width);
      }
      if (Length != 0F) {
        output.WriteRawTag(173, 1);
        output.WriteFloat(Length);
      }
      if (Radius != 0F) {
        output.WriteRawTag(181, 1);
        output.WriteFloat(Radius);
      }
      if (InnerRadius != 0F) {
        output.WriteRawTag(189, 1);
        output.WriteFloat(InnerRadius);
      }
      if (Angle != 0F) {
        output.WriteRawTag(197, 1);
        output.WriteFloat(Angle);
      }
      offset_.WriteTo(ref output, _repeated_offset_codec);
      if (Rotation != 0F) {
        output.WriteRawTag(213, 1);
        output.WriteFloat(Rotation);
      }
      if (IsMove != false) {
        output.WriteRawTag(216, 1);
        output.WriteBool(IsMove);
      }
      if (IsBlock != false) {
        output.WriteRawTag(224, 1);
        output.WriteBool(IsBlock);
      }
      if (MovAcc != 0) {
        output.WriteRawTag(232, 1);
        output.WriteInt32(MovAcc);
      }
      if (RotSpd != 0) {
        output.WriteRawTag(240, 1);
        output.WriteInt32(RotSpd);
      }
      if (MoveSpd != 0) {
        output.WriteRawTag(248, 1);
        output.WriteInt32(MoveSpd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(ref output);
      }
    }
    #endif

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public int CalculateSize() {
      int size = 0;
      if (Id != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Id);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (FCId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(FCId);
      }
      if (Model.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
      }
      if (ModelScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ModelScale);
      }
      if (BuffFXScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(BuffFXScale);
      }
      if (ColliderScale != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ColliderScale);
      }
      if (AttributeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(AttributeId);
      }
      if (Templete != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Templete);
      }
      size += buffIds_.CalculateSize(_repeated_buffIds_codec);
      size += turnOffBuffIds_.CalculateSize(_repeated_turnOffBuffIds_codec);
      size += turnOnBuffIds_.CalculateSize(_repeated_turnOnBuffIds_codec);
      if (InterruptSkill != false) {
        size += 1 + 1;
      }
      if (SubType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SubType);
      }
      if (Faction != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Faction);
      }
      size += filter_.CalculateSize(_repeated_filter_codec);
      if (IgnoreCollision != false) {
        size += 2 + 1;
      }
      if (ActiveEff.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(ActiveEff);
      }
      if (ShapeType != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(ShapeType);
      }
      if (Width != 0F) {
        size += 2 + 4;
      }
      if (Length != 0F) {
        size += 2 + 4;
      }
      if (Radius != 0F) {
        size += 2 + 4;
      }
      if (InnerRadius != 0F) {
        size += 2 + 4;
      }
      if (Angle != 0F) {
        size += 2 + 4;
      }
      size += offset_.CalculateSize(_repeated_offset_codec);
      if (Rotation != 0F) {
        size += 2 + 4;
      }
      if (IsMove != false) {
        size += 2 + 1;
      }
      if (IsBlock != false) {
        size += 2 + 1;
      }
      if (MovAcc != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MovAcc);
      }
      if (RotSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RotSpd);
      }
      if (MoveSpd != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(MoveSpd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(Trap other) {
      if (other == null) {
        return;
      }
      if (other.Id != 0) {
        Id = other.Id;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.FCId != 0) {
        FCId = other.FCId;
      }
      if (other.Model.Length != 0) {
        Model = other.Model;
      }
      if (other.ModelScale != 0) {
        ModelScale = other.ModelScale;
      }
      if (other.BuffFXScale != 0) {
        BuffFXScale = other.BuffFXScale;
      }
      if (other.ColliderScale != 0) {
        ColliderScale = other.ColliderScale;
      }
      if (other.AttributeId.Length != 0) {
        AttributeId = other.AttributeId;
      }
      if (other.Templete != 0) {
        Templete = other.Templete;
      }
      buffIds_.Add(other.buffIds_);
      turnOffBuffIds_.Add(other.turnOffBuffIds_);
      turnOnBuffIds_.Add(other.turnOnBuffIds_);
      if (other.InterruptSkill != false) {
        InterruptSkill = other.InterruptSkill;
      }
      if (other.SubType != 0) {
        SubType = other.SubType;
      }
      if (other.Faction != 0) {
        Faction = other.Faction;
      }
      filter_.Add(other.filter_);
      if (other.IgnoreCollision != false) {
        IgnoreCollision = other.IgnoreCollision;
      }
      if (other.ActiveEff.Length != 0) {
        ActiveEff = other.ActiveEff;
      }
      if (other.ShapeType != 0) {
        ShapeType = other.ShapeType;
      }
      if (other.Width != 0F) {
        Width = other.Width;
      }
      if (other.Length != 0F) {
        Length = other.Length;
      }
      if (other.Radius != 0F) {
        Radius = other.Radius;
      }
      if (other.InnerRadius != 0F) {
        InnerRadius = other.InnerRadius;
      }
      if (other.Angle != 0F) {
        Angle = other.Angle;
      }
      offset_.Add(other.offset_);
      if (other.Rotation != 0F) {
        Rotation = other.Rotation;
      }
      if (other.IsMove != false) {
        IsMove = other.IsMove;
      }
      if (other.IsBlock != false) {
        IsBlock = other.IsBlock;
      }
      if (other.MovAcc != 0) {
        MovAcc = other.MovAcc;
      }
      if (other.RotSpd != 0) {
        RotSpd = other.RotSpd;
      }
      if (other.MoveSpd != 0) {
        MoveSpd = other.MoveSpd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    public void MergeFrom(pb::CodedInputStream input) {
    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
      input.ReadRawMessage(this);
    #else
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            FCId = input.ReadInt32();
            break;
          }
          case 34: {
            Model = input.ReadString();
            break;
          }
          case 40: {
            ModelScale = input.ReadInt32();
            break;
          }
          case 48: {
            BuffFXScale = input.ReadInt32();
            break;
          }
          case 56: {
            ColliderScale = input.ReadInt32();
            break;
          }
          case 66: {
            AttributeId = input.ReadString();
            break;
          }
          case 72: {
            Templete = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            buffIds_.AddEntriesFrom(input, _repeated_buffIds_codec);
            break;
          }
          case 90:
          case 88: {
            turnOffBuffIds_.AddEntriesFrom(input, _repeated_turnOffBuffIds_codec);
            break;
          }
          case 98:
          case 96: {
            turnOnBuffIds_.AddEntriesFrom(input, _repeated_turnOnBuffIds_codec);
            break;
          }
          case 104: {
            InterruptSkill = input.ReadBool();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
          case 120: {
            Faction = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            filter_.AddEntriesFrom(input, _repeated_filter_codec);
            break;
          }
          case 136: {
            IgnoreCollision = input.ReadBool();
            break;
          }
          case 146: {
            ActiveEff = input.ReadString();
            break;
          }
          case 152: {
            ShapeType = input.ReadInt32();
            break;
          }
          case 165: {
            Width = input.ReadFloat();
            break;
          }
          case 173: {
            Length = input.ReadFloat();
            break;
          }
          case 181: {
            Radius = input.ReadFloat();
            break;
          }
          case 189: {
            InnerRadius = input.ReadFloat();
            break;
          }
          case 197: {
            Angle = input.ReadFloat();
            break;
          }
          case 202:
          case 205: {
            offset_.AddEntriesFrom(input, _repeated_offset_codec);
            break;
          }
          case 213: {
            Rotation = input.ReadFloat();
            break;
          }
          case 216: {
            IsMove = input.ReadBool();
            break;
          }
          case 224: {
            IsBlock = input.ReadBool();
            break;
          }
          case 232: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 240: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 248: {
            MoveSpd = input.ReadInt32();
            break;
          }
        }
      }
    #endif
    }

    #if !GOOGLE_PROTOBUF_REFSTRUCT_COMPATIBILITY_MODE
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    [global::System.CodeDom.Compiler.GeneratedCode("protoc", null)]
    void pb::IBufferMessage.InternalMergeFrom(ref pb::ParseContext input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
      if ((tag & 7) == 4) {
        // Abort on any end group tag.
        return;
      }
      switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, ref input);
            break;
          case 8: {
            Id = input.ReadInt32();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            FCId = input.ReadInt32();
            break;
          }
          case 34: {
            Model = input.ReadString();
            break;
          }
          case 40: {
            ModelScale = input.ReadInt32();
            break;
          }
          case 48: {
            BuffFXScale = input.ReadInt32();
            break;
          }
          case 56: {
            ColliderScale = input.ReadInt32();
            break;
          }
          case 66: {
            AttributeId = input.ReadString();
            break;
          }
          case 72: {
            Templete = input.ReadInt32();
            break;
          }
          case 82:
          case 80: {
            buffIds_.AddEntriesFrom(ref input, _repeated_buffIds_codec);
            break;
          }
          case 90:
          case 88: {
            turnOffBuffIds_.AddEntriesFrom(ref input, _repeated_turnOffBuffIds_codec);
            break;
          }
          case 98:
          case 96: {
            turnOnBuffIds_.AddEntriesFrom(ref input, _repeated_turnOnBuffIds_codec);
            break;
          }
          case 104: {
            InterruptSkill = input.ReadBool();
            break;
          }
          case 112: {
            SubType = input.ReadInt32();
            break;
          }
          case 120: {
            Faction = input.ReadInt32();
            break;
          }
          case 130:
          case 128: {
            filter_.AddEntriesFrom(ref input, _repeated_filter_codec);
            break;
          }
          case 136: {
            IgnoreCollision = input.ReadBool();
            break;
          }
          case 146: {
            ActiveEff = input.ReadString();
            break;
          }
          case 152: {
            ShapeType = input.ReadInt32();
            break;
          }
          case 165: {
            Width = input.ReadFloat();
            break;
          }
          case 173: {
            Length = input.ReadFloat();
            break;
          }
          case 181: {
            Radius = input.ReadFloat();
            break;
          }
          case 189: {
            InnerRadius = input.ReadFloat();
            break;
          }
          case 197: {
            Angle = input.ReadFloat();
            break;
          }
          case 202:
          case 205: {
            offset_.AddEntriesFrom(ref input, _repeated_offset_codec);
            break;
          }
          case 213: {
            Rotation = input.ReadFloat();
            break;
          }
          case 216: {
            IsMove = input.ReadBool();
            break;
          }
          case 224: {
            IsBlock = input.ReadBool();
            break;
          }
          case 232: {
            MovAcc = input.ReadInt32();
            break;
          }
          case 240: {
            RotSpd = input.ReadInt32();
            break;
          }
          case 248: {
            MoveSpd = input.ReadInt32();
            break;
          }
        }
      }
    }
    #endif

  }

  #endregion

}

#endregion Designer generated code
